
------------------------------------------------------------------------------------------
## ubuntu 22.04 How to add existing user to an existing group?
------------------------------------------------------------------------------------------

The useradd command will try to add a new user. Since your user already exists this is not what you want.

Instead: To modify an existing user, like adding that user to a new group, use the usermod command.

Try this:

sudo usermod -a -G groupName userName

## EXMPLE:
sudo usermod -a -G debug silenzio


The -a (append) switch is essential. Otherwise, the user will be removed from any groups, not in the list.

The -G switch takes a (comma-separated) list of additional groups to assign the user to.

In general (for the GUI, or for already running processes, etc.), the user will need to log out and log back in to see their new group added. For the current shell session, you can use newgrp:

newgrp groupName
newgrp adds the group to the current shell session.

_____
https://github.com/ceres-solver/ceres-solver/issues/909

To run cuda-memcheck on a Jetson device you need to have persmissions to use the Jetson GPU in debug mode. One way to do this is:

sudo chmod a+rw /dev/nvhost-dbg-gpu
The better method is to add your user to the debug group, though you'll have to reboot for changes to take effect.

@sandwichmaker Let's add a TODO to add this to the documentation, I think it has come up before.

------------------------------------------------------------------------------------------
## ubuntu 22.04 sublime text how to keyboard shortcuts
------------------------------------------------------------------------------------------
[
	{ "keys": ["alt+x"], "command": "cut" },
	{ "keys": ["alt+c"], "command": "copy" },
	{ "keys": ["alt+v"], "command": "paste" },	
	{ "keys": ["alt+s"], "command": "save", "args": { "async": true } },
	{ "keys": ["alt+shift+s"], "command": "prompt_save_as" },
	{ "keys": ["alt+z"], "command": "undo" },
	{ "keys": ["alt+shift+z"], "command": "redo" },
	{ "keys": ["alt+f"], "command": "show_panel", "args": {"panel": "find", "reverse": false} },
]




------------------------------------------------------------------------------------------
## OPEN3D
------------------------------------------------------------------------------------------

python3
Python 3.10.12 (main, Jan 17 2025, 14:35:34) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import open3d
>>> print(open3d.__version__)
0.18.0

$ python -c "import open3d as o3d; \
           mesh = o3d.geometry.TriangleMesh.create_sphere(); \
           mesh.compute_vertex_normals(); \
           o3d.visualization.draw(mesh, raw_mode=True)"
FEngine (64 bits) created at 0xffff7f3d3010 (threading is enabled)
FEngine resolved backend: OpenGL

$ open3d example visualization/draw
***************************************************
* Open3D: A Modern Library for 3D Data Processing *
*                                                 *
* Version 0.18.0                                  *
* Docs    https://www.open3d.org/docs             *
* Code    https://github.com/isl-org/Open3D       *
***************************************************
Running example visualization/draw ...
FEngine (64 bits) created at 0xffff5a853010 (threading is enabled)
FEngine resolved backend: OpenGL
[Open3D INFO] Downloading https://github.com/isl-org/open3d_downloads/releases/download/20220201-data/BunnyMesh.ply


/home/silenzio/.local/lib/python3.10/site-packages/open3d/examples/t_reconstruction_system/run_system.py



## INSTALL FROM SOURCE
## https://www.open3d.org/docs/release/compilation.html



------------------------------------------------------------------------------------------
## PATH How to add path of a program to $PATH environment variable?
------------------------------------------------------------------------------------------

# https://askubuntu.com/questions/109381/how-to-add-path-of-a-program-to-path-environment-variable

Firstly, check your original path:

echo $PATH
It should show something like this:

/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
Now add your program to that path, ensuring your using the entire path all the way from / to your program.

export PATH=$PATH:/path/to/my/program
This sets your PATH variable to the existing PATH plus what you add to the end. Check that it has been added (Caveat: it presist only in the current session of the terminal):

echo $PATH

## THE SAME WITH SHARED LIBRARY PATH 

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/librealsense/lib

root@jetsonnx:/opt/librealsense/lib# echo $LD_LIBRARY_PATH
/catkin_ws/devel/lib:/opt/ros/noetic/lib:/opt/librealsense/lib



------------------------------------------------------------------------------------------
## Uninstalling librealsense2
------------------------------------------------------------------------------------------

## https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md

Uninstalling the Packages:
Important Removing Debian package is allowed only when no other installed packages directly refer to it. For example removing librealsense2-udev-rules requires librealsense2 to be removed first.

Remove a single package with:
sudo apt-get purge <package-name>

Remove all RealSense™ SDK-related packages with:
dpkg -l | grep "realsense" | cut -d " " -f 3 | xargs sudo dpkg --purge






------------------------------------------------------------------------------------------
##  CloudCompare
------------------------------------------------------------------------------------------
## https://github.com/CloudCompare/CloudCompare

sudo apt install snapd
sudo apt-get update
sudo apt-get install cloudcompare



spci
0001:00:00.0 PCI bridge: NVIDIA Corporation Device 229e (rev a1)
0001:01:00.0 Network controller: Realtek Semiconductor Co., Ltd. RTL8822CE 802.11ac PCIe Wireless Network Adapter
0004:00:00.0 PCI bridge: NVIDIA Corporation Device 229c (rev a1)
0004:01:00.0 Non-Volatile memory controller: Silicon Motion, Inc. SM2263EN/SM2263XT SSD Controller (rev 03)
0008:00:00.0 PCI bridge: NVIDIA Corporation Device 229c (rev a1)
0008:01:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 15)


lsblk
NAME         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
loop0          7:0    0     4K  1 loop /snap/bare/5
loop1          7:1    0 174.6M  1 loop /snap/chromium/3039
loop2          7:2    0  68.8M  1 loop /snap/core22/1752
loop3          7:3    0  64.7M  1 loop /snap/cups/1069
loop4          7:4    0 493.5M  1 loop /snap/gnome-42-2204/201
loop5          7:5    0  91.7M  1 loop /snap/gtk-common-themes/1535
loop6          7:6    0  38.7M  1 loop /snap/snapd/23546
loop7          7:7    0    16M  1 loop 
zram0        252:0    0 978.5M  0 disk [SWAP]
zram1        252:1    0 978.5M  0 disk [SWAP]
zram2        252:2    0 978.5M  0 disk [SWAP]
zram3        252:3    0 978.5M  0 disk [SWAP]
zram4        252:4    0 978.5M  0 disk [SWAP]
zram5        252:5    0 978.5M  0 disk [SWAP]
zram6        252:6    0 978.5M  0 disk [SWAP]
zram7        252:7    0 978.5M  0 disk [SWAP]
nvme0n1      259:0    0 238.5G  0 disk 
...
nvme0n1p10 259:10   0    64M  0 part /boot/efi
...


------------------------------------------------------------------------------------------
## apt-cache search FOR APT INSTALL
------------------------------------------------------------------------------------------

$  apt-cache search gflags
libgflags-dev - commandline flags module for C++ (development files)
libgflags-doc - documentation of gflags
libgflags2.2 - commandline flags module for C++ (shared library)
python3-gflags - implementation of the Google command line flags module - Python 3.x
python3-typeshed - collection of library stubs for Python, with static types
ros-cmake-modules - Robot OS CMake Modules




sudo nmap -A 192.168.2.21
Starting Nmap 7.80 ( https://nmap.org ) at 2025-02-26 22:56 MSK
Nmap scan report for 192.168.2.21
Host is up (0.00023s latency).
All 1000 scanned ports on 192.168.2.21 are filtered
MAC Address: 3C:07:54:27:71:B2 (Apple)
Too many fingerprints match this host to give specific OS details
Network Distance: 1 hop

TRACEROUTE
HOP RTT     ADDRESS
1   0.23 ms 192.168.2.21

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 24.91 seconds



sudo nmap -A 192.168.2.34
Starting Nmap 7.80 ( https://nmap.org ) at 2025-02-26 22:55 MSK
Nmap scan report for jetsonnx (192.168.2.34)
Host is up (0.000090s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)
111/tcp  open  rpcbind 2-4 (RPC #100000)
| rpcinfo: 
|   program version    port/proto  service
|   100000  2,3,4        111/tcp   rpcbind
|   100000  2,3,4        111/udp   rpcbind
|   100000  3,4          111/tcp6  rpcbind
|_  100000  3,4          111/udp6  rpcbind
631/tcp  open  ipp     CUPS 2.4
| http-robots.txt: 1 disallowed entry 
|_/
|_http-server-header: CUPS/2.4 IPP/2.1
|_http-title: Home - CUPS 2.4.11
5900/tcp open  vnc     VNC (protocol 3.7)
|_ssl-cert: ERROR: Script execution failed (use -d to debug)
|_ssl-date: ERROR: Script execution failed (use -d to debug)
|_sslv2: ERROR: Script execution failed (use -d to debug)
|_tls-alpn: ERROR: Script execution failed (use -d to debug)
|_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)
|_vnc-info: ERROR: Script execution failed (use -d to debug)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6.32
OS details: Linux 2.6.32
Network Distance: 0 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 8.88 seconds



sudo nmap -sV localhost
Starting Nmap 7.80 ( https://nmap.org ) at 2025-02-26 22:53 MSK
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000014s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)
111/tcp  open  rpcbind 2-4 (RPC #100000)
631/tcp  open  ipp     CUPS 2.4
5900/tcp open  vnc     VNC (protocol 3.7)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 6.71 seconds



sudo nmap -O localhost
Starting Nmap 7.80 ( https://nmap.org ) at 2025-02-26 22:52 MSK
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00010s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
111/tcp  open  rpcbind
631/tcp  open  ipp
5900/tcp open  vnc
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6.32
OS details: Linux 2.6.32
Network Distance: 0 hops

OS detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 1.91 seconds


$ nmap 192.168.2.34
Starting Nmap 7.80 ( https://nmap.org ) at 2025-02-26 22:50 MSK
Nmap scan report for jetsonnx (192.168.2.34)
Host is up (0.00024s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
111/tcp  open  rpcbind
631/tcp  open  ipp
5900/tcp open  vnc

Nmap done: 1 IP address (1 host up) scanned in 0.15 seconds
silenzio@jetsonnx:~/ros2_ws$ nmap 192.168.3.26
Starting Nmap 7.80 ( https://nmap.org ) at 2025-02-26 22:50 MSK
Nmap scan report for jetsonnx (192.168.3.26)
Host is up (0.00026s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
111/tcp  open  rpcbind
631/tcp  open  ipp
5900/tcp open  vnc

Nmap done: 1 IP address (1 host up) scanned in 0.12 seconds






------------------------------------------------------------------------------------------
## INSTALL UBUNTU 22 Intel RealSense L515 
------------------------------------------------------------------------------------------


Have you tried unplugging the micro-sized end of the USB cable from the base of the L515 camera, reversing the connector's orientation and plugging it back into the L515 camera, please (USB-C cables are two-way insertion at the micro-sized end). The L515 typically performs better when the micro-sized connector is inserted into the camera base in one particular orientation of the two available.



librealsense-2.51.1

cd ~/lib/librealsense-2.56.3
mkdir build
cd build

cmake -D CMAKE_BUILD_TYPE=RELEASE ..

make -j4

make install

sudo ldconfig




lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 20.04.6 LTS
Release:	20.04
Codename:	focal


hostnamectl


cat /etc/*ease

DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=20.04
DISTRIB_CODENAME=focal
DISTRIB_DESCRIPTION="Ubuntu 20.04.6 LTS"
NAME="Ubuntu"
VERSION="20.04.6 LTS (Focal Fossa)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 20.04.6 LTS"
VERSION_ID="20.04"
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal


sudo dmesg -wT

>>>>>>>>>>>>>>>> L515:
...
cpufreq: cpu0,cur:1276000,set:1497600,delta:221600,set ndiv:117
[Tue Feb 25 23:24:57 2025] usb 2-1.1: new SuperSpeed USB device number 12 using tegra-xusb

[Tue Feb 25 23:24:57 2025] usb 2-1.1: Found UVC 1.50 device Intel(R) RealSense(TM) 515 (8086:0b64)
[Tue Feb 25 23:24:57 2025] input: Intel(R) RealSense(TM) 515: Int as /devices/platform/bus@0/3610000.usb/usb2/2-1/2-1.1/2-1.1:1.0/input/input138
[Tue Feb 25 23:24:57 2025] usb 2-1.1: Found UVC 1.50 device Intel(R) RealSense(TM) 515 (8086:0b64)
[Tue Feb 25 23:24:57 2025] hid-generic 0003:8086:0B64.0013: hidraw0: USB HID v1.10 Device [Intel(R) RealSense(TM) Camera Intel(R) RealSense(TM) 515] on usb-3610000.usb-1.1/input7

...

>>>>>>>>>>>>>>>> T265:
[Tue Feb 25 23:37:26 2025] cpufreq: cpu0,cur:729000,set:1497600,delta:768600,set ndiv:117
[Tue Feb 25 23:38:12 2025] usb 1-2.1: new high-speed USB device number 8 using tegra-xusb
[Tue Feb 25 23:38:24 2025] usb 1-2.1: USB disconnect, device number 8




lsusb
Bus 002 Device 004: ID 8087:0b37 Intel Corp. Intel(R) RealSense(TM) Tracking Camera T265

Bus 002 Device 005: ID 8086:0b64 Intel Corp. Intel(R) RealSense(TM) 515

Bus 002 Device 002: ID 2109:0822 VIA Labs, Inc. USB3.1 Hub             
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 003: ID 0bda:c822 Realtek Semiconductor Corp. Bluetooth Radio 
Bus 001 Device 002: ID 2109:2822 VIA Labs, Inc. USB2.0 Hub             
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub


V2.50.0
realsense-viewer

 24/02 19:20:41,822 WARNING [281472733304896] (messenger-libusb.cpp:42) control_transfer returned error, index: 300, error: Resource temporarily unavailable, number: b


rs-depth

## type art depth images...
## WORK! 

rs-fw-update -l

Connected devices:
1) Name: Intel RealSense L515, serial number: f0211758, update serial number: 0003aa95b255, firmware version: 01.05.08.01, USB type: 3.2


rs-fw-update -l

Connected devices:
1) Name: Intel RealSense T265, serial number: 905312111138, update serial number: unknown, firmware version: 0.2.0.951, USB type: 3.1


rs-fw-update --version

rs-fw-update  version: 2.50.0



$ rs-enumerate-devices
Device info: 
    Name                          : 	Intel RealSense L515
    Serial Number                 : 	f0211758
    Firmware Version              : 	01.05.08.01
    Recommended Firmware Version  : 	01.05.08.01
    Physical Port                 : 	2-1.1-6
    Debug Op Code                 : 	15
    Product Id                    : 	0B64
    Camera Locked                 : 	YES
    Usb Type Descriptor           : 	3.2
    Product Line                  : 	L500
    Asic Serial Number            : 	0003aa95b255
    Firmware Update Id            : 	0003aa95b255

Stream Profiles supported by L500 Depth Sensor
 Supported modes:
    stream       resolution      fps       format   
    Confidence	  1024x768	@ 30Hz	   RAW8
    Confidence	  640x480	@ 30Hz	   RAW8
    Confidence	  320x240	@ 30Hz	   RAW8
    Infrared	  1024x768	@ 30Hz	   Y8
    Infrared	  640x480	@ 30Hz	   Y8
    Infrared	  320x240	@ 30Hz	   Y8
    Depth	  1024x768	@ 30Hz	   Z16
    Depth	  640x480	@ 30Hz	   Z16
    Depth	  320x240	@ 30Hz	   Z16

Stream Profiles supported by RGB Camera
 Supported modes:
    stream       resolution      fps       format   
    Color	  1920x1080	@ 30Hz	   RGB8
    Color	  1920x1080	@ 30Hz	   Y16
    Color	  1920x1080	@ 30Hz	   BGRA8
    Color	  1920x1080	@ 30Hz	   RGBA8
    Color	  1920x1080	@ 30Hz	   BGR8
    Color	  1920x1080	@ 30Hz	   YUYV
    Color	  1920x1080	@ 15Hz	   RGB8
    Color	  1920x1080	@ 15Hz	   Y16
    Color	  1920x1080	@ 15Hz	   BGRA8
    Color	  1920x1080	@ 15Hz	   RGBA8
    Color	  1920x1080	@ 15Hz	   BGR8
    Color	  1920x1080	@ 15Hz	   YUYV
    Color	  1920x1080	@ 6Hz	   RGB8
    Color	  1920x1080	@ 6Hz	   Y16
    Color	  1920x1080	@ 6Hz	   BGRA8
    Color	  1920x1080	@ 6Hz	   RGBA8
    Color	  1920x1080	@ 6Hz	   BGR8
    Color	  1920x1080	@ 6Hz	   YUYV
    Color	  1280x720	@ 60Hz	   RGB8
    Color	  1280x720	@ 60Hz	   Y16
    Color	  1280x720	@ 60Hz	   BGRA8
    Color	  1280x720	@ 60Hz	   RGBA8
    Color	  1280x720	@ 60Hz	   BGR8
    Color	  1280x720	@ 60Hz	   YUYV
    Color	  1280x720	@ 30Hz	   RGB8
    Color	  1280x720	@ 30Hz	   Y16
    Color	  1280x720	@ 30Hz	   BGRA8
    Color	  1280x720	@ 30Hz	   RGBA8
    Color	  1280x720	@ 30Hz	   BGR8
    Color	  1280x720	@ 30Hz	   YUYV
    Color	  1280x720	@ 15Hz	   RGB8
    Color	  1280x720	@ 15Hz	   Y16
    Color	  1280x720	@ 15Hz	   BGRA8
    Color	  1280x720	@ 15Hz	   RGBA8
    Color	  1280x720	@ 15Hz	   BGR8
    Color	  1280x720	@ 15Hz	   YUYV
    Color	  1280x720	@ 6Hz	   RGB8
    Color	  1280x720	@ 6Hz	   Y16
    Color	  1280x720	@ 6Hz	   BGRA8
    Color	  1280x720	@ 6Hz	   RGBA8
    Color	  1280x720	@ 6Hz	   BGR8
    Color	  1280x720	@ 6Hz	   YUYV
    Color	  960x540	@ 60Hz	   RGB8
    Color	  960x540	@ 60Hz	   Y16
    Color	  960x540	@ 60Hz	   BGRA8
    Color	  960x540	@ 60Hz	   RGBA8
    Color	  960x540	@ 60Hz	   BGR8
    Color	  960x540	@ 60Hz	   YUYV
    Color	  960x540	@ 30Hz	   RGB8
    Color	  960x540	@ 30Hz	   Y16
    Color	  960x540	@ 30Hz	   BGRA8
    Color	  960x540	@ 30Hz	   RGBA8
    Color	  960x540	@ 30Hz	   BGR8
    Color	  960x540	@ 30Hz	   YUYV
    Color	  960x540	@ 15Hz	   RGB8
    Color	  960x540	@ 15Hz	   Y16
    Color	  960x540	@ 15Hz	   BGRA8
    Color	  960x540	@ 15Hz	   RGBA8
    Color	  960x540	@ 15Hz	   BGR8
    Color	  960x540	@ 15Hz	   YUYV
    Color	  960x540	@ 6Hz	   RGB8
    Color	  960x540	@ 6Hz	   Y16
    Color	  960x540	@ 6Hz	   BGRA8
    Color	  960x540	@ 6Hz	   RGBA8
    Color	  960x540	@ 6Hz	   BGR8
    Color	  960x540	@ 6Hz	   YUYV
    Color	  640x480	@ 60Hz	   RGB8
    Color	  640x480	@ 60Hz	   Y16
    Color	  640x480	@ 60Hz	   BGRA8
    Color	  640x480	@ 60Hz	   RGBA8
    Color	  640x480	@ 60Hz	   BGR8
    Color	  640x480	@ 60Hz	   YUYV
    Color	  640x480	@ 30Hz	   RGB8
    Color	  640x480	@ 30Hz	   Y16
    Color	  640x480	@ 30Hz	   BGRA8
    Color	  640x480	@ 30Hz	   RGBA8
    Color	  640x480	@ 30Hz	   BGR8
    Color	  640x480	@ 30Hz	   YUYV
    Color	  640x480	@ 15Hz	   RGB8
    Color	  640x480	@ 15Hz	   Y16
    Color	  640x480	@ 15Hz	   BGRA8
    Color	  640x480	@ 15Hz	   RGBA8
    Color	  640x480	@ 15Hz	   BGR8
    Color	  640x480	@ 15Hz	   YUYV
    Color	  640x480	@ 6Hz	   RGB8
    Color	  640x480	@ 6Hz	   Y16
    Color	  640x480	@ 6Hz	   BGRA8
    Color	  640x480	@ 6Hz	   RGBA8
    Color	  640x480	@ 6Hz	   BGR8
    Color	  640x480	@ 6Hz	   YUYV
    Color	  640x360	@ 60Hz	   RGB8
    Color	  640x360	@ 60Hz	   Y16
    Color	  640x360	@ 60Hz	   BGRA8
    Color	  640x360	@ 60Hz	   RGBA8
    Color	  640x360	@ 60Hz	   BGR8
    Color	  640x360	@ 60Hz	   YUYV
    Color	  640x360	@ 30Hz	   RGB8
    Color	  640x360	@ 30Hz	   Y16
    Color	  640x360	@ 30Hz	   BGRA8
    Color	  640x360	@ 30Hz	   RGBA8
    Color	  640x360	@ 30Hz	   BGR8
    Color	  640x360	@ 30Hz	   YUYV
    Color	  640x360	@ 15Hz	   RGB8
    Color	  640x360	@ 15Hz	   Y16
    Color	  640x360	@ 15Hz	   BGRA8
    Color	  640x360	@ 15Hz	   RGBA8
    Color	  640x360	@ 15Hz	   BGR8
    Color	  640x360	@ 15Hz	   YUYV
    Color	  640x360	@ 6Hz	   RGB8
    Color	  640x360	@ 6Hz	   Y16
    Color	  640x360	@ 6Hz	   BGRA8
    Color	  640x360	@ 6Hz	   RGBA8
    Color	  640x360	@ 6Hz	   BGR8
    Color	  640x360	@ 6Hz	   YUYV

Stream Profiles supported by Motion Module
 Supported modes:
    stream       resolution      fps       format   
    Accel	 N/A		@ 400Hz	   MOTION_XYZ32F
    Accel	 N/A		@ 200Hz	   MOTION_XYZ32F
    Accel	 N/A		@ 100Hz	   MOTION_XYZ32F
    Gyro	 N/A		@ 400Hz	   MOTION_XYZ32F
    Gyro	 N/A		@ 200Hz	   MOTION_XYZ32F
    Gyro	 N/A		@ 100Hz	   MOTION_XYZ32F



## Linux Distribution
## https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md#uninstalling-the-packages


Uninstalling the Packages:
Important Removing Debian package is allowed only when no other installed packages directly refer to it. For example removing librealsense2-udev-rules requires librealsense2 to be removed first.

Remove a single package with:
sudo apt-get purge <package-name>

Remove all RealSense™ SDK-related packages with:
dpkg -l | grep "realsense" | cut -d " " -f 3 | xargs sudo dpkg --purge


Name	Content	Depends on
librealsense2-udev-rules	Configures RealSense device permissions on kernel level	-
librealsense2-dkms	DKMS package for Depth cameras-specific kernel extensions	librealsense2-udev-rules
librealsense2	RealSense™ SDK runtime (.so) and configuration files	librealsense2-udev-rules
librealsense2-utils	Demos and tools available as a part of RealSense™ SDK	librealsense2
librealsense2-dev	Header files and symbolic link for developers	librealsense2
librealsense2-dbg	Debug symbols for developers	librealsense2
librealsense2-gl	GLSL extension module runtime and configuration file	librealsense2
librealsense2-gl-dev	GLSL development header files and symbolic link	librealsense2
librealsense2-gl-dbg	GLSL debug symbols required for debugging purposes	librealsense2



## https://github.com/IntelRealSense/realsense_mipi_platform_driver
## Intel® RealSense™ camera driver for GMSL* interface D457 MIPI on Jetson AGX Xavier



## https://stackoverflow.com/questions/71951959/how-to-record-depth-stream-from-realsense-l515

## How to record depth stream from realsense L515 with CV2

import cv2
import numpy as np
import pyrealsense2 as rs
import time

pipeline = rs.pipeline()
config = rs.config()

"""
# Depth Mode
"""
# Resolution
res = [(1024, 768), (640, 480), (320, 240)]
resolution = res[0]
print("RealSense Resolution:{}\n".format(resolution))

# # initialize video writer
fourcc = cv2.VideoWriter_fourcc('F','F','V','1')
fps = 30
video_filename = 'output.avi'
out = cv2.VideoWriter(video_filename, fourcc, fps, resolution, False)


config.enable_stream(rs.stream.depth, resolution[0], resolution[1], rs.format.z16, 30)
profile = config.resolve(pipeline)
# Start streaming
pipeline.start(config)

# Declare sensor object and set options
depth_sensor = profile.get_device().first_depth_sensor()
depth_sensor.set_option(rs.option.visual_preset, 5) # 5 is short range, 3 is low ambient light
depth_sensor.set_option(rs.option.receiver_gain, 8)
depth_sensor.set_option(rs.option.pre_processing_sharpening, 0.0)
depth_sensor.set_option(rs.option.post_processing_sharpening, 3.0)
depth_sensor.set_option(rs.option.laser_power, 100)
depth_sensor.set_option(rs.option.confidence_threshold, 2)
# Get the sensor once at the beginning. (Sensor index: 1)

# # Filters
threshold_filter = rs.threshold_filter(min_dist=1.2, max_dist=1.4)
temporal_filter = rs.temporal_filter(smooth_alpha=0.1, smooth_delta = 9.0,persistence_control=7)

try:
    # # Filters
    threshold_filter = rs.threshold_filter(min_dist=1.2, max_dist=1.4)
    temporal_filter = rs.temporal_filter(smooth_alpha=0.1, smooth_delta = 75.0,persistence_control=0)

    tic = time.time()

    while True:
        # Wait for depth frames:
        frames = pipeline.wait_for_frames()
        depth_frame = frames.get_depth_frame()
        if not depth_frame:
            continue

        #------------
        # # FILTERS |
        #------------

        depth_frame = threshold_filter.process(depth_frame)
        depth_frame = temporal_filter.process(depth_frame)

        # Convert images to numpy arrays
        depth_array = np.asanyarray(depth_frame.get_data())
        # depth_array = np.asanyarray(colorizer.colorize(depth_frame).get_data())

        out.write(depth_array)
        toc = time.time()
        if(round(toc  - tic) > 30):
            break

finally:
    out.release()
    pipeline.stop()

And getting this error:

out.write(depth_array) cv2.error: OpenCV(4.5.4) /tmp/pip-req-build-kneyjnox/opencv/modules/videoio/src/cap_ffmpeg.cpp:186: error: (-215:Assertion failed) image.depth() == CV_8U in function 'write'

Can you please tell me how can I record the depth from my camera? thanks in advance.

@A________

I don't know if you can specify pix_fmt with the opencv's ffmpeg submodule, but here is an alternative using my ffmpegio package (GitHub)

pip install ffmpegio

import ffmpegio
import numpy as np

fps = 30
video_filename = "sandbox/output.avi"
shape = (640, 480)
with ffmpegio.open(
    video_filename,
    "wv", # mode of operation: video write 
    fps,
    c="ffv1", # c is sufficient for video-only, o.w. `**{'c:v': 'ffv1'}`
    overwrite=True, # False (or remove) to error out if output file exists
    show_log=True, # False (or remove) to stop showing FFmpeg log on console
) as out:

    # ...

    while True:

        # ...

        out.write(depth_array) # first write will configure video format:
        # dtype=np.uint16 -> pix_fmt='gray16le'
        # shape=(h,w) -> s=f'{w}x{h}

        # ...


Note: ffmpegio requires ffmpeg binary to be available on the system and discoverable (unlike opencv).

You can also achieve the same with plain python subprocess with additional info up front:


import subprocess as sp

ffmpeg_path = 'ffmpeg'

fps = 30
video_filename = 'output.avi'
width = 640
height = 480

out = sp.Popen([ffmpeg_path, '-y',
               '-f','rawvideo','-r',str(fps),'-pix_fmt','gray16le','-s',f'{width}x{height}','-',
               '-f','avi','-c:v','ffv1',video_filename],stdin=sp.PIPE):

try:
    ...
    while True:
        ...
        depth_array = np.asanyarray(depth_frame.get_data())

        out.stdin.write(depth_array) # you may need to wrap with memory

        ...

finally:
    out.stdin.close()
    out.wait()
    ...


____


## Intel l515 support on XavierNX
## https://forums.developer.nvidia.com/t/intel-l515-support-on-xaviernx/154127/18

#update cmake
sudo apt-get install curl 
sudo apt-get install libssl-dev libcurl4-openssl-dev #curl dependencies
wget http://www.cmake.org/files/v3.13/cmake-3.13.0.tar.gz
tar xpvf cmake-3.13.0.tar.gz cmake-3.13.0/
cd cmake-3.13.0/
./bootstrap --system-curl
make -j6
echo 'export PATH=/home/nvidia/cmake-3.13.0/bin/:$PATH' >> ~/.bashrc  #replace /home/nvidia with your instalation directory
source ~/.bashrc

#copy pyrealsense2 packages outside the folder
sudo cp -r /usr/lib/python3/dist-packages/pyrealsense2/* /usr/lib/python3/dist-packages/

#build Librealsense
wget https://github.com/IntelRealSense/librealsense/archive/v2.38.0.tar.gz && tar -xvf v2.38.0.tar.gz && cd librealsense-2.38.0/ && mkdir build && cd build &&  cmake ../ -DFORCE_RSUSB_BACKEND=true -DBUILD_PYTHON_BINDINGS=true -DPYTHON_EXECUTABLE=/usr/bin/python3 -DCMAKE_BUILD_TYPE=release -DBUILD_EXAMPLES=true -DBUILD_WITH_CUDA=true -DBUILD_GRAPHICAL_EXAMPLES=true && make -j6 && sudo make install



## Multi-Camera Programming:
## https://dev.intelrealsense.com/docs/lidar-camera-l515-multi-camera-setup





------------------------------------------------------------------------------------------
## JETSON NX UBUNTU INSTALL PYTORCH with GPU
------------------------------------------------------------------------------------------
## https://forums.developer.nvidia.com/t/unable-to-install-pytorch-and-torchvision-on-jetson-orin/324073/8

For a Jetson with JetPack 6.2 please install the packages at jp6/cu126 index

wget https://pypi.jetson-ai-lab.dev/jp6/cu126/+f/a86/1895294d90440/torch-2.6.0rc1-cp310-cp310-linux_aarch64.whl#sha256=a861895294d90440f2cdbd863d3fd5407fcc346f819665f3a63d90dfcf41a5b0

--2025-02-21 08:17:23--  https://pypi.jetson-ai-lab.dev/jp6/cu126/+f/a86/1895294d90440/torch-2.6.0rc1-cp310-cp310-linux_aarch64.whl

Resolving pypi.jetson-ai-lab.dev (pypi.jetson-ai-lab.dev)... 108.39.248.12
Connecting to pypi.jetson-ai-lab.dev (pypi.jetson-ai-lab.dev)|108.39.248.12|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 240763395 (230M) [None]
Saving to: ‘torch-2.6.0rc1-cp310-cp310-linux_aarch64.whl’

torch-2.6.0rc1-cp310-cp310-li 100%[===============================================>] 229,61M  6,33MB/s    in 32s     

2025-02-21 08:17:55 (7,18 MB/s) - ‘torch-2.6.0rc1-cp310-cp310-linux_aarch64.whl’ saved [240763395/240763395]

nvidia@ubuntu:~$ pip3 install torch-2.6.0rc1-cp310-cp310-linux_aarch64.whl 

Defaulting to user installation because normal site-packages is not writeable
Processing ./torch-2.6.0rc1-cp310-cp310-linux_aarch64.whl
Collecting filelock (from torch==2.6.0rc1)
  Downloading filelock-3.17.0-py3-none-any.whl.metadata (2.9 kB)
Requirement already satisfied: typing-extensions>=4.10.0 in /home/silenzio/.local/lib/python3.10/site-packages (from torch==2.6.0rc1) (4.12.2)
Collecting sympy==1.13.1 (from torch==2.6.0rc1)
  Downloading sympy-1.13.1-py3-none-any.whl.metadata (12 kB)
Collecting networkx (from torch==2.6.0rc1)
  Downloading networkx-3.4.2-py3-none-any.whl.metadata (6.3 kB)
Requirement already satisfied: jinja2 in /home/silenzio/.local/lib/python3.10/site-packages (from torch==2.6.0rc1) (3.1.5)
Collecting fsspec (from torch==2.6.0rc1)
  Downloading fsspec-2025.2.0-py3-none-any.whl.metadata (11 kB)
Collecting mpmath<1.4,>=1.1.0 (from sympy==1.13.1->torch==2.6.0rc1)
  Downloading mpmath-1.3.0-py3-none-any.whl.metadata (8.6 kB)
Requirement already satisfied: MarkupSafe>=2.0 in /home/silenzio/.local/lib/python3.10/site-packages (from jinja2->torch==2.6.0rc1) (3.0.2)
Downloading sympy-1.13.1-py3-none-any.whl (6.2 MB)

...

Installing collected packages: mpmath, sympy, networkx, fsspec, filelock, torch
Successfully installed filelock-3.17.0 fsspec-2025.2.0 mpmath-1.3.0 networkx-3.4.2 sympy-1.13.1 torch-2.6.0rc1

$ python3
Python 3.10.12 (main, Jan 17 2025, 14:35:34) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import torch
>>> print(f"torch version: {torch.__version__}")
torch version: 2.6.0-rc1


JETPACK_6.2
python3
Python 3.10.12 (main, Jan 17 2025, 14:35:34) [GCC 11.4.0] on linux

python3 -c 'import cv2; print(cv2.__version__)' 
4.10.0

print(f"torch version: {torch.__version__}")
torch version: 2.6.0-rc1


## BUT ERROR:


import torch; print('cuDNN version: ' + str(torch.backends.cudnn.version()))

>>> import torch
>>> print('cuDNN version: ' + str(torch.backends.cudnn.version()))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/silenzio/.local/lib/python3.10/site-packages/torch/backends/cudnn/__init__.py", line 85, in version
    if not _init():
  File "/home/silenzio/.local/lib/python3.10/site-packages/torch/backends/cudnn/__init__.py", line 67, in _init
    raise RuntimeError(
RuntimeError: cuDNN version incompatibility: PyTorch was compiled  against (9, 4, 0) but found runtime version (9, 3, 0). PyTorch already comes bundled with cuDNN. One option to resolving this error is to ensure PyTorch can find the bundled cuDNN. one possibility is that there is a conflicting cuDNN in LD_LIBRARY_PATH.

...

## FIX:

unset LD_LIBRARY_PATH

## NOT WORK

....




$ echo $LD_LIBRARY_PATH
/usr/local/lib:


>>> import torch;print(torch.nn.Conv2d(3, 3, 3).cuda()(torch.rand(1, 3, 6, 6, device='cuda')))
tensor([[[[-0.2572, -0.0060,  0.1577, -0.0320],
          [-0.1082, -0.2446, -0.3487,  0.1069],
          [-0.0890, -0.0883, -0.4657,  0.0656],
          [-0.0506, -0.1357, -0.3638, -0.0473]],

         [[ 0.0994,  0.0396, -0.3789,  0.0627],
          [-0.0467, -0.2004, -0.1238, -0.1911],
          [ 0.1810, -0.3340, -0.0046, -0.0970],
          [-0.0161,  0.0794, -0.2581, -0.2041]],

         [[ 0.4361,  0.2481,  0.4557,  0.5007],
          [ 0.5203,  0.4005,  0.3074,  0.3174],
          [ 0.6272,  0.2629,  0.6306,  0.1178],
          [ 0.5762,  0.2979,  0.6931,  0.6126]]]], device='cuda:0',
       grad_fn=<ConvolutionBackward0>)

cd /usr/local/cuda-12.6/bin/
./nvcc --version

nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2024 NVIDIA Corporation
Built on Wed_Aug_14_10:14:07_PDT_2024
Cuda compilation tools, release 12.6, V12.6.68
Build cuda_12.6.r12.6/compiler.34714021_0


!nvidia-smi
print( 'Torch',torch.__version__ 'CUDA', torch.version.cuda )
print( 'Device:',  torch.device( 'cuda:0'))

# https://docs.nvidia.com/deploy/nvidia-smi/index.html
$ nvidia-smi

Sun Feb 23 19:39:21 2025       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 540.4.0                Driver Version: 540.4.0      CUDA Version: 12.6     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  Orin (nvgpu)                  N/A  | N/A              N/A |                  N/A |
| N/A   N/A  N/A               N/A /  N/A | Not Supported        |     N/A          N/A |
|                                         |                      |                  N/A |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
|  No running processes found                                                           |
+---------------------------------------------------------------------------------------+


nvidia-smi -q

==============NVSMI LOG==============

Timestamp                                 : Sun Feb 23 19:41:29 2025
Driver Version                            : 540.4.0
CUDA Version                              : 12.6

Attached GPUs                             : 1
GPU 00000000:00:00.0
    Product Name                          : Orin (nvgpu)
    Product Brand                         : Unknown Error
    Product Architecture                  : Ampere
    Display Mode                          : N/A


....
    Serial Number                         : N/A
    GPU UUID                              : e0e9d974-cdce-51cf-b801-0a85fddc39f0
    Minor Number                          : N/A



____

Either create a shell script or copy, paste and run the entire below into a terminal window

#!/usr/bin/env bash

sudo apt update

if [ -d “/usr/local/cuda-12.6” ]; then
sudo apt install -y cuda-cupti-12-6

pip install -U https://pypi.jetson-ai-lab.dev/jp6/cu126/+f/a86/1895294d90440/torch-2.6.0rc1-cp310-cp310-linux_aarch64.whl

pip install -U https://pypi.jetson-ai-lab.dev/jp6/cu126/+f/5f9/67f920de3953f/torchvision-0.20.0-cp310-cp310-linux_aarch64.whl
elif [ -d “/usr/local/cuda-12.8” ]; then
sudo apt install -y cuda-cupti-12-8

pip install -U https://pypi.jetson-ai-lab.dev/jp6/cu128/+f/406/faef6ad009ac1/torch-2.6.0-cp310-cp310-linux_aarch64.whl

pip install -U https://pypi.jetson-ai-lab.dev/jp6/cu128/+f/0d9/ebbd08083f971/torchvision-0.21.0-cp310-cp310-linux_aarch64.whl
else
echo “No recognized CUDA directory. Exiting.”
fi


==========================================================================================
------------------------------------------------------------------------------------------
## JETSON UBUNTU 
------------------------------------------------------------------------------------------
==========================================================================================
## https://www.jetson-ai-lab.com/tips_ram-optimization.html



Disabling the Desktop GUI
If you use your Jetson remotely through SSH, you can disable the Ubuntu desktop GUI.
This will free up extra memory that the window manager and desktop uses (around ~800MB for Unity/GNOME).

You can disable the desktop temporarily, run commands in the console, and then re-start the desktop when desired:


$ sudo init 3     # stop the desktop

# log your user back into the console (Ctrl+Alt+F1, F2, ect)

$ sudo init 5     # restart the desktop


If you wish to make this persistent across reboots, you can use the following commands to change the boot-up behavior:

To disable desktop on boot

sudo systemctl set-default multi-user.target
To enable desktop on boot


sudo systemctl set-default graphical.target



Disabling misc services

sudo systemctl disable nvargus-daemon.service

Mounting Swap
If you're building containers or working with large models, it's advisable to mount SWAP (typically correlated with the amount of memory in the board). Run these commands to disable ZRAM and create a swap file:

If you have NVMe SSD storage available, it's preferred to allocate the swap file on the NVMe SSD.


sudo systemctl disable nvzramconfig
sudo fallocate -l 16G /ssd/16GB.swap
sudo mkswap /ssd/16GB.swap
sudo swapon /ssd/16GB.swap
Then add the following line to the end of /etc/fstab to make the change persistent:


/ssd/16GB.swap  none  swap  sw 0  0










==========================================================================================






## https://nvidia-jetson.piveral.com/tag/can/
## Help Docs for Errors/Issues on Nvidia Jetson Dev Boards



## https://matom.ai/insights/slam/
## 2022-01-10
## Introduction and application of ORB-SLAM3


Building ORB-SLAM3 library and examples via Docker
Docker containers are units of software that isolate applications from their environment, therefore, making it runnable virtually anywhere. That’s why you can use a docker container that would have dependencies and the library inside it and could also be used without any constraints in an environment of your choice. Below you can see our docker file that was used for setting up the ORB-SLAM3 library in the ROS Melodic base-environment.

FROM ros:melodic-perception
# install the required packages
RUN apt update && apt install -y build-essential
RUN apt update && apt install -y cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
RUN apt update && apt install -y python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev
RUN apt update && apt install -y python3 python3-pip
RUN apt update && apt install -y git
RUN apt update && apt install -y libboost-all-dev
RUN apt update && apt install -y libomp-dev
RUN apt update && apt install -y libeigen3-dev
RUN apt update && apt install -y libgl1-mesa-dev
RUN apt update && apt install -y libglew-dev
RUN apt update && apt install -y pkg-config
RUN apt update && apt install -y libegl1-mesa-dev libwayland-dev libxkbcommon-dev wayland-protocols
RUN apt update && apt install -y libssl-dev
RUN apt update && apt install -y libcanberra-gtk-module libcanberra-gtk3-module
RUN apt update && apt install -y libgnutls28-dev

RUN apt update && apt install -y ros-melodic-usb-cam
RUN apt update && apt install -y ros-melodic-realsense2-camera
RUN apt update && apt install -y ros-melodic-sophus

# build pangolin
WORKDIR /
RUN mkdir pangolin
RUN git clone https://github.com/stevenlovegrove/Pangolin.git /pangolin
WORKDIR /pangolin
RUN git checkout v0.6
RUN mkdir build
WORKDIR /pangolin/build
RUN cmake ..
RUN cmake –build .

# install and build ORB_SLAM3
ADD . /ORB_SLAM3/
RUN git clone https://github.com/UZ-SLAMLab/ORB_SLAM3.git ORB_SLAM3
WORKDIR /ORB_SLAM3

RUN chmod +x build.sh
RUN ./build.sh

# extract vocabulary
WORKDIR /ORB_SLAM3/Vocabulary
RUN tar -xf ORBvoc.txt.tar.gz

## Once you’ve created a Docker file inside the ORB_SLAM3 directory, you can run those commands below to build the container:

bash:
cd ORB_SLAM3
docker build --tag orb-slam:1.0 .
docker create --name orb-slam orb-slam:1.0


Now you should be able to use this orb-slam container by setting the base image to be taken from it in a new one, e.g., your ROS wrapper. To do so, you need to add this mandatory line of code to any new containers that would need to use the ORB-SLAM3 library:

docker:
FROM orb-slam:1.0

By doing this, you initialize a new build stage and set the base orb-slam image for subsequent instructions. Since the ORB-SLAM3 library is not likely to ever change, it’s a good option to have it as a separate container for its portability.


....




## https://sigmoidal.ai/en/orb-slam-3-a-tool-for-3d-mapping-and-localization/
## ORB-SLAM 3: A Tool for 3D Mapping and Localization
## Carlos Melo by Carlos Melo  April 10, 2023

## Setting up a virtual machine with ORB-SLAM 3
...


## https://www.cnblogs.com/ZhaoqunZhong/p/16691371.html
## SLAM development on M1 Mac 

Test a SLAM algorithm#
Here I chose TUM's DSO algorithm. To make it work on M1 macbook, I also had to make some adjustments to the original head of master branch. I put the final workable version here.

https://github.com/ZhaoqunZhong/dso
...

------------------------------------------------------------------------------------------
## Debian/Ubuntu Packages syncthing
------------------------------------------------------------------------------------------
https://apt.syncthing.net/





To allow the system to check the packages authenticity, you need to provide the release key.

# Add the release PGP keys:
sudo mkdir -p /etc/apt/keyrings
sudo curl -L -o /etc/apt/keyrings/syncthing-archive-keyring.gpg https://syncthing.net/release-key.gpg

The stable channel is updated with stable release builds, usually every first Tuesday of the month.

# Add the "stable" channel to your APT sources:
echo "deb [signed-by=/etc/apt/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list

The candidate channel is updated with release candidate builds, usually every second Tuesday of the month. These predate the corresponding stable builds by about three weeks.

# Add the "candidate" channel to your APT sources:
echo "deb [signed-by=/etc/apt/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing candidate" | sudo tee /etc/apt/sources.list.d/syncthing.list

And finally.

# Update and install syncthing:
sudo apt-get update
sudo apt-get install syncthing






------------------------------------------------------------------------------------------
## Astra Pro SETUP
------------------------------------------------------------------------------------------
# http://www.yahboom.net/public/upload/upload-html/1713171469/1.%20How%20to%20use%20the%20Astra%20camera.html
# http://www.yahboom.net/study/Orin-NX-SUPER
# 05.Docker interaction >> 3.3, Depth Camera



ls /dev/video*
$ v4l2-ctl -d /dev/video0 --list-formats-ext
ioctl: VIDIOC_ENUM_FMT
	Type: Video Capture

	[0]: 'RG10' (10-bit Bayer RGRG/GBGB)
		Size: Discrete 3280x2464
			Interval: Discrete 0.048s (21.000 fps)
		Size: Discrete 3280x1848
			Interval: Discrete 0.036s (28.000 fps)
		Size: Discrete 1920x1080
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 1640x1232
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 1280x720
			Interval: Discrete 0.017s (60.000 fps)

silenzio@jetsonnx:~/foxy/catkin_ws/src$ v4l2-ctl -d /dev/video1 --list-formats-ext
ioctl: VIDIOC_ENUM_FMT
	Type: Video Capture

	[0]: 'YUYV' (YUYV 4:2:2)
		Size: Discrete 1280x720
			Interval: Discrete 0.111s (9.000 fps)
		Size: Discrete 640x480
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 352x288
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 320x240
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 176x144
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 160x120
			Interval: Discrete 0.033s (30.000 fps)
	[1]: 'MJPG' (Motion-JPEG, compressed)
		Size: Discrete 1280x720
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 640x480
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 352x288
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 320x240
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 176x144
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 160x120
			Interval: Discrete 0.033s (30.000 fps)



lsusb
Bus 002 Device 002: ID 2109:0822 VIA Labs, Inc. USB3.1 Hub             
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 003: ID 0bda:c822 Realtek Semiconductor Corp. Bluetooth Radio 

Bus 001 Device 013: ID 2bc5:0403 Orbbec 3D Technology International, Inc Astra Pro
Bus 001 Device 012: ID 2bc5:0501 Orbbec 3D Technology International, Inc Astra Pro HD Camera

Bus 001 Device 011: ID 05e3:0608 Genesys Logic, Inc. Hub
Bus 001 Device 002: ID 2109:2822 VIA Labs, Inc. USB2.0 Hub             
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub

ls /dev/bus/usb/001/013
Bus 001 Device 013:

ls /dev/bus/usb/001/012
Bus 001 Device 012:


Sample Script:


3.1. Shared graphical interface

xhost +
​
docker run -it \
--net=host \
-e DISPLAY=$DISPLAY \
-e "QT_X11_NO_MITSHM=1" \
-v /tmp/.X11-unix:/tmp/.X11-unix \
-v /home/yahboom/share:/share \
ros_melodic:1.0 /bin/bash

...


3.3, Depth Camera

#!/bin/bash
​
xhost +
​
docker run -it \
--net=host \
-e DISPLAY=$DISPLAY \
-e "QT_X11_NO_MITSHM=1" \
-v /tmp/.X11-unix:/tmp/.X11-unix \
-v /home/yahboom/share:/share \
-v /dev/bus/usb/003/005:/dev/bus/usb/003/005 \
-v /dev/bus/usb/003/006:/dev/bus/usb/003/006 \
--device=/dev/astra_pro \
--device=/dev/astrauvc \
--device=/dev/video0 \
--device=/dev/video1 \
ros_melodic:1.0 /bin/bash



## RUN:
docker run -it \
--net=host \
-e DISPLAY=$DISPLAY \
-e "QT_X11_NO_MITSHM=1" \
-v /tmp/.X11-unix:/tmp/.X11-unix \
-v /home/silenzio/share:/share \
-v /dev/bus/usb/001/013:/dev/bus/usb/001/013 \
-v /dev/bus/usb/001/012:/dev/bus/usb/001/012 \
--device=/dev/video0 \
--device=/dev/video1 \
yahboomtechnology/ros2-foxy:2.0.1  /bin/bash

## WORK


## RUN in container:

root@jetson:/# cd ~/yahboomcar_ros2_ws/software/library_ws

root@jetson:~/yahboomcar_ros2_ws/software/library_ws# source install/setup.bash

root@jetson:~/yahboomcar_ros2_ws/software/library_ws# ros2 launch astra_camera astro_pro_plus.launch.xml

[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-19-22-37-39-259133-jetson-176
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [astra_camera_node-1]: process started with pid [178]
[astra_camera_node-1] Warning: class_loader.impl: SEVERE WARNING!!! A namespace collision has occurred with plugin factory for class rclcpp_components::NodeFactoryTemplate<astra_camera::OBCameraNodeFactory>. New factory will OVERWRITE existing one. This situation occurs when libraries containing plugins are directly linked against an executable (the one running right now generating this message). Please separate plugins out into their own library or just don't link against the library and use either class_loader::ClassLoader/MultiLibraryClassLoader to open.

[astra_camera_node-1]          at line 253 in /opt/ros/foxy/include/class_loader/class_loader_core.hpp
[astra_camera_node-1] [INFO] [1740004659.759781948] [camera.camera]: init done.
[astra_camera_node-1] [INFO] [1740004659.759905504] [camera.camera]: Waiting for device connection...
[astra_camera_node-1] [INFO] [1740004659.760273900] [device_listener]: Found 1 devices 			 <<<<<<-------

[astra_camera_node-1] [INFO] [1740004659.760319117] [camera.camera]: Trying to open device: 2bc5/0403@1/13
[astra_camera_node-1] [INFO] [1740004659.864651287] [camera.camera]: Failed to open device: 2bc5/0403@1/13 error: 	Could not open "2bc5/0403@1/13": Input/output error!
[astra_camera_node-1] 
[astra_camera_node-1] [INFO] [1740004659.864787739] [camera.camera]: Device: 2bc5/0403@1/13 is not co




## https://answers.ros.org/question/362546/

## ROS+Astra camera: Failed to open the USB device!

I have a astra camera and ros melodic.

I catkin_make the workspace and followed the tutorial of ASTRA CAMERA ROS TUTORIAL

I sourced my workspace and also ran roslaunch astra_camera astra.launch

But i get the below error

  6023131 INFO       Setting Device.UsbInterface to 2...
  6023140 INFO       Device.UsbInterface value did not change.
  6023968 INFO       Module 'Device' configuration was loaded from file.
  6023985 VERBOSE    Connecting to USB device...
  6023991 VERBOSE    Trying to open sensor '2bc5/0401@1/6'...
  6024032 VERBOSE    Shutting down USB depth read thread...
  6024042 VERBOSE    Shutting down USB image read thread...
  6024048 VERBOSE    Device closed successfully
  6024062 VERBOSE    Shutting down Scheduler thread..

No matching device found.... waiting for devices. Reason: astra_wrapper::AstraDevice::AstraDevice(const string&) @ /home/varun-flox/camera_ws/src/ros_astra_camera/src/astra_device.cpp @ 79 : 

Device open failed Could not open "2bc5/0401@1/6": Failed to open the USB device!
Please help me in this issue

thanks in advance

Asked by Varun on 2020-09-29 15:38:34 UTC

Comments
Are you sure that this packages is compatible with melodic? At wiki there is only kinetic (http://wiki.ros.org/astra_camera)

Asked by Solrac3589 on 2020-10-01 02:33:47 UTC

Answers
I solved it issue myself using the following commands

in src/ros_astra_camera

$ sudo cp 56-orbbec-usb.rules /etc/udev/rules.d/

$ sudo touch /etc/udev/rules.d/orbbec-usb.rules

$ sudo udevadm control  --reload -rules
unplug and replug the camera to the usb port of the pi

$ source devel/setup.bash

$ roslaunch astra_camera astra.launch
The udev rules of the astra camera has to be in the /etc/udev/rules.d/ folder with chmod +x permission

Asked by Varun on 2020-10-01 10:56:58 UTC













------------------------------------------------------------------------------------------
## Astra Pro with Skanect
------------------------------------------------------------------------------------------

# https://3dclub.orbbec3d.com/t/astra-pro-with-skanect/216/3

dercncplaner

May 2019
it worked:

Only with 32 version of Skanect
Only after copying orbbec.ini and orbbec.dll in the Skanect 1.7\bin\OpenNI2\Drivers or just in Skanect 1.7\bin\OpenNI2
I did for both
I got the both files after installing touchlesstouch in \Touchless Touch\OpenNI2\Drivers

BUT …
Oh no!! the color camera doesn’t work. Maybe because these files are from touchlesstouch and they don’t need colors. But now with Skanect I can make just colorless scan.

Anyone has a solution? better files to replace?



На сайте orbbec подсказка. 
Только после копирования orbbec.ini и orbbec.dll в Skanect 1.7\bin\OpenNI2\Drivers или просто в Skanect 1.7\bin\OpenNI2
Я сделал для обоих

Я получил оба файла после установки touchlesstouch в \Touchless Touch\OpenNI2\Drivers

OpenNI2.dll
OpenNI2.lib
orbbec.dll
orbbec.ini


https://www.touchlesstouch.com/download.php
Orbbec Astra/Pro >>> Windows 7/8/8.1/10 (32/64 Bit)



_________

https://askubuntu.com/questions/1310000/make-a-script-that-open-two-terminal-and-start-projects
https://www.ubuntumint.com/konsole-terminal-emulator/

install konsole and create 3 scripts:

to run 1 job:

#!/bin/bash
# 1 script
cd Repository/project1/ && npm run start:debug
to run 2 job:

#!/bin/bash
# 2 script
cd Repository/project2/local && chmod -x already_made_script.sh
and to run two terminal with 2 jobs:

#!/bin/bash
# 3 script
konsole --noclose  -e /bin/bash /path/to/my/script1 &
konsole --noclose  -e /bin/bash /path/to/my/script2


## WORK



___________________________

https://www.cyberciti.biz/faq/how-to-check-running-process-in-ubuntu-linux-using-command-line/
Type the 
ps aux
 or 
ps -e

 to see all running process in Ubuntu Linux


ps -aux
sudo ps -a
sudo ps -U vivek
ps -U tom




Want to kill a process? Try kill command. The syntax is:
kill pid
kill -signal pid

Find PID using ps, pgrep or top command. Say you want to kill a PID # 3932, run:
kill 3932

For some reason if the process can not be killed, try forceful killing:
kill -9 3932

OR
kill -KILL 3932


_________________________

$ rs-sensor-control 

======================================================

Found the following devices:

  0 : Intel RealSense T265 #905312111138

Select a device by index: 0

Device information: 
  Name                 : Intel RealSense T265
  Serial Number        : 905312111138
  Firmware Version     : 0.2.0.951
  Recommended Firmware Version : N/A
  Physical Port        : 2-1.1-5
  Debug Op Code        : N/A
  Advanced Mode        : N/A
  Product Id           : 0B37
  Camera Locked        : N/A
  Usb Type Descriptor  : 3.1
  Product Line         : T200
  Asic Serial Number   : N/A
  Firmware Update Id   : N/A
  Ip Address           : N/A

======================================================

Device consists of 1 sensors:

  0 : Tracking Module

Select a sensor by index: 0


======================================================

What would you like to do with the sensor?

0 : Control sensor's options
1 : Control sensor's streams
2 : Show stream intrinsics
3 : Display extrinsics

Select an action: 3


======================================================

Please choose a sensor and then a stream that will be used as the origin of extrinsic transformation:

Device consists of 1 sensors:

  0 : Tracking Module

Select a sensor by index: 0

Sensor consists of 5 streams: 
  - Fisheye #1
  - Fisheye #2
  - Gyro #0
  - Accel #0
  - Pose #0
Sensor provides the following stream profiles:
0  : Fisheye #1 (Video Stream: Y8 848x800@ 30Hz)
1  : Fisheye #2 (Video Stream: Y8 848x800@ 30Hz)
2  : Gyro #0
3  : Accel #0
4  : Pose #0


















# Paste in Uppercase/Lowercase using Alfred App Workflows on macOS
# https://zackeryfretty.com/notes/alfred-app-convert-case-hotkey/




# https://docs.docker.com/compose/install/linux/#install-using-the-repository
# For Ubuntu and Debian, run:

 sudo apt-get update
 sudo apt-get install docker-compose-plugin






_______



sudo apt install mesa-utils


glxdemo

glxgears

glxheads

glxinfo

glxinfo | grep render






------------------------------------------------------------------------------------------
## XTTS Voice generation model 
------------------------------------------------------------------------------------------
# https://github.com/coqui-ai/TTS
# https://huggingface.co/coqui/XTTS-v2


XTTS is a Voice generation model that lets you clone voices into different languages by using just a quick 6-second audio clip. There is no need for an excessive amount of training data that spans countless hours.

This is the same or similar model to what powers Coqui Studio and Coqui API.



----------------





dpkg --search nvargus-daemon


sudo systemctl enable nvargus-daemon.service
sudo systemctl stop nvargus-daemon.service
sudo systemctl disable nvargus-daemon.service
sudo systemctl enable nvargus-daemon.service. <<<----
sudo systemctl status nvargus-daemon.service

------------------------------------------------------------------------------------------
## INSTALL ROS1 noetic for Ubuntu 22.04
------------------------------------------------------------------------------------------

# https://github.com/lucasw/ros_from_src?files=1


Build ROS! noetic with default Ubuntu 22.04 version:


docker build . -t ros2204


______

Hi, I recently also had to switch to Ubuntu 22.04 and ended up with building ROS Noetic completely from sources. I summarized my journey at the following post Building ROS Noetic on Ubuntu 22.04

Asked by reilu on 2023-08-03 14:10:36 UTC


-----------------------------------------------------------------------------------------
## Building ROS Noetic on Ubuntu 22.04 in Docker 
-----------------------------------------------------------------------------------------
## https://medium.com/@lukas_reisinger/building-ros-noetic-on-ubuntu-22-04-b3ca676c63e7

Dockerfile

FROM ubuntu:22.04

RUN apt-get update && \
        apt-get install -y \
        cmake \
        build-essential

RUN apt-get install -y \
        libboost-thread-dev \
        libboost-system-dev \
        libboost-filesystem-dev \
        libboost-regex-dev \
        libboost-program-options-dev \
        libconsole-bridge-dev \
        libpoco-dev \
        libtinyxml2-dev \
        liblz4-dev \
        libbz2-dev \
        uuid-dev \
        liblog4cxx-dev \
        libgpgme-dev \
        libgtest-dev

RUN apt-get install -y \
        python3 \
        python3-pip \
        python3-setuptools \
        python3-empy \
        python3-nose \
        python3-pycryptodome \
        python3-defusedxml \
        python3-mock \
        python3-netifaces \
        python3-gnupg \
        python3-numpy \
        python3-psutil \
        python3-pyyaml \
        python3-rospkg



pip3 install pyyaml


Cloning the repositories

......

# Execute within the native terminal

## BUILD:
docker build -t ros_noetic_base_2204 .

## RUN:
#docker run -it --rm -v .:/ros_noetic_base_2204 ros_noetic_base_2204 bash
sudo docker run -it --rm -v .:/noetic noetic bash


# Execute inside the docker image <<<<<<<<<<----
cd /noetic/catkin_pkg && python3 setup.py install
cd /noetic/rospkg && python3 setup.py install
cd /noetic/catkin_ws
./src/catkin/bin/catkin_make install \
      -DCMAKE_BUILD_TYPE=Release \
      -DPYTHON_EXECUTABLE=/usr/bin/python3


cd /noetic/catkin_ws 
./src/catkin/bin/catkin_make install \
      -DCMAKE_BUILD_TYPE=Release \
      -DPYTHON_EXECUTABLE=/usr/bin/python3 \
      run_tests


Congratulations, you managed to build ROS Noetic base from sources!

Since everything is building now, we are ready to start a roscore. Therefore we need to source, the ROS setup file and run the command roscore.

# Execute inside the docker image <<<<<<<<<<----
source /noetic/catkin_ws/devel/setup.bash
roscore

## WORK !!11



------------------------------------------------------------------------------------------
## jetson-containers
------------------------------------------------------------------------------------------
Machine Learning Containers for Jetson and JetPack

https://github.com/dusty-nv/jetson-containers


# INSTALL:
Getting Started
Refer to the System Setup page for tips about setting up your Docker daemon and memory/storage tuning.

# install the container tools
git clone https://github.com/dusty-nv/jetson-containers
bash jetson-containers/install.sh

## BUIL OK


## RUN:

# automatically pull & run any container
jetson-containers run $(autotag l4t-pytorch)



------------------------------------------------------------------------------------------
## DOCKER INSTALL
------------------------------------------------------------------------------------------
# https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/1.13.5/install-guide.html?highlight=get%20docker#setting-up-docker


curl https://get.docker.com | sh && sudo systemctl --now enable docker


distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
      && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
      && curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \
            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list

sudo apt-get update

sudo apt-get install -y nvidia-container-toolkit

sudo nvidia-ctk runtime configure --runtime=docker

sudo systemctl restart docker

## TEST RUN
## sudo docker run --rm --runtime=nvidia --gpus all nvidia/cuda:11.6.2-base-ubuntu20.04 nvidia-smi

This should result in a console output shown below:

+-----------------------------------------------------------------------------+
| NVIDIA-SMI 450.51.06    Driver Version: 450.51.06    CUDA Version: 11.0     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |
| N/A   34C    P8     9W /  70W |      0MiB / 15109MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+

+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+

## DOC:
https://developer.nvidia.com/embedded/learn/tutorials/jetson-container#h.mp7p5vs35spn


------------------------------------------------------------------------------------------
## CREATE DOCKER FILE AND RUN
------------------------------------------------------------------------------------------

# https://answers.ros.org/question/353983/

# https://wiki.ros.org/docker/Tutorials/GUI



## CREATE DOCKER FILE

The dockerfile goes as follows

 # Use the official image as a parent image.
FROM ros:melodic-robot

RUN rm -rf /var/lib/apt/lists/

# Set up Conan for Kinova Kortex
RUN apt-get update \
    && apt-get install -y python3 python3-pip \
    && python3 -m pip install conan \
    && conan config set general.revisions_enabled=1 \
    && conan profile new default --detect > /dev/null \
    && conan profile update settings.compiler.libcxx=libstdc++11 default\
    && rm -rf /var/lib/apt/lists/

# Acquire ROS dependencies
RUN mkdir -p catkin_ws/src \
    && cd catkin_ws/src \
    && apt-get update \
    && apt-get install -y ros-melodic-rqt ros-melodic-rqt-common-plugins\
    && apt-get install -y ros-melodic-realsense2-camera \
    && apt-get install -y ros-melodic-rosmon \
    && git clone https://github.com/Kinovarobotics/ros_kortex.git \
#    && git clone https://github.com/ros/dynamic_reconfigure.git \
#    && git clone https://github.com/pal-robotics/ddynamic_reconfigure.git \
    && git clone https://github.com/tue-robotics/wire.git\
    && git clone https://github.com/ros-drivers/joystick_drivers.git\
    && cd .. \
    && rosdep install --from-paths src --ignore-src -y\
    && rm -rf /var/lib/apt/lists/

# Add tools
RUN apt-get update \
    && apt-get install -y iputils-ping \
    && apt-get install -y net-tools \
    && rm -rf /var/lib/apt/lists/

# Replace the kinova CMakeList.txt with the adjusted version for ARM processors
#RUN rm catkin_ws/src/ros_kortex/kortex_driver/CMakeLists.txt
#COPY CMakeLists.txt catkin_ws/src/ros_kortex/kortex_driver/ 

# Custom package
# COPY <host dir> to <container dir>
COPY /autonomous-apple-picker /catkin_ws/src/autonomous-apple-picker

# Build ROS
RUN apt-get update \
    && apt-get upgrade -y \
    && rosdep update \
    && rosdep install --from-paths catkin_ws/src --ignore-src -y \
    && /bin/bash -c '. /opt/ros/melodic/setup.bash; cd catkin_ws/; catkin_make_isolated;' \
    && rm -rf /var/lib/apt/lists/

RUN  /bin/bash -c "echo 'source /catkin_ws/devel_isolated/setup.bash' >>~/.bashrc"

RUN apt install python3.7 \
    && apt install python3-pip 


RUN pip3 install --upgrade pip

RUN pip3 install torch numpy torchvision Cython==0.29.15 opencv-python matplotlib \
    && pip3 install pycocotools

## COMMENT:

First thing I would recommend: start with the minimal image to test whether you can start UI applications inside a container on your Tegra.

So don't build anything else: get rid of the Kinova stuff, building your autonomous-apple-picker packages, Torch, etc.

Try to run Rviz from a osrf/ros:melodic-desktop-full image.

If that already doesn't work, none of the other stuff will matter at this time.

And to echo @ruffsl's comment: I would suggest to look at how "other people" start Docker containers with UI applications on Tegra systems.

There's nothing really ROS-specific about this. RViz is "just a Qt application" which happens to have an embedded OGRE/OpenGL window.

Asked by gvdhoorn on 2020-06-04 07:31:39 UTC




## RUN:

# https://wiki.ros.org/docker/Tutorials/GUI
Login as yourself
Log in with your uid:gid and add some shared volumes to be able to really use your local account in the container

The run command I use is

docker run -it \
    --user=$(id -u $USER):$(id -g $USER) \
    --env="DISPLAY" \
    --workdir="/home/$USER" \
    --volume="/home/$USER:/home/$USER" \
    --volume="/etc/group:/etc/group:ro" \
    --volume="/etc/passwd:/etc/passwd:ro" \
    --volume="/etc/shadow:/etc/shadow:ro" \
    --volume="/etc/sudoers.d:/etc/sudoers.d:ro" \
    --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw"
    --net=host [MyDockerImage]



------------
# Where are Docker images stored on the host machine?
------------

# https://stackoverflow.com/questions/19234831/where-are-docker-images-stored-on-the-host-machine

The contents of the /var/lib/docker directory vary depending on the driver Docker is using for storage.

By default this will be aufs but can fall back to overlay, overlay2, btrfs, devicemapper or zfs depending on your kernel support. In most places this will be aufs but the RedHats went with devicemapper.

You can manually set the storage driver with the -s or --storage-driver= option to the Docker daemon.

/var/lib/docker/{driver-name} will contain the driver specific storage for contents of the images. <<<<<<------
/var/lib/docker/graph/<id> now only contains metadata about the image, in the json and layersize files.
In the case of aufs:

/var/lib/docker/aufs/diff/<id> has the file contents of the images.
/var/lib/docker/repositories-aufs is a JSON file containing local image information. This can be viewed with the command docker images.
In the case of devicemapper:

/var/lib/docker/devicemapper/devicemapper/data stores the images
/var/lib/docker/devicemapper/devicemapper/metadata the metadata
Note these files are thin provisioned "sparse" files so aren't as big as they seem.

------------
# Where are Docker Images Stored? Docker Container Paths Explained
------------
#https://www.freecodecamp.org/news/where-are-docker-images-stored-docker-container-paths-explained/


# https://kodekloud.com/blog/where-docker-images-are-stored/
To find out what storage driver you’re using, you can run the docker info command and look for a field named Storage Driver as shown 
below:

~$ sudo docker info
Client: Docker Engine - Community
 Version:    27.5.1
 Context:    default
 Debug Mode: false
 Plugins:
  buildx: Docker Buildx (Docker Inc.)
    Version:  v0.20.0
    Path:     /usr/libexec/docker/cli-plugins/docker-buildx
  compose: Docker Compose (Docker Inc.)
    Version:  v2.32.4
    Path:     /usr/libexec/docker/cli-plugins/docker-compose

Server:
 Containers: 1
  Running: 1
  Paused: 0
  Stopped: 0
 Images: 39
 Server Version: 27.5.1
 Storage Driver: overlay2 <<<<<<<<<---------------
  Backing Filesystem: extfs
  Supports d_type: true
  Using metacopy: false
  Native Overlay Diff: true
  userxattr: false
 Logging Driver: json-file
 Cgroup Driver: systemd
 Cgroup Version: 2
 Plugins:
  Volume: local
  Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog
 Swarm: inactive
 Runtimes: runc io.containerd.runc.v2 nvidia
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: bcc810d6b9066471b0b6fa75f557a15a1cbf31bb
 runc version: v1.2.4-0-g6c52b3f
 init version: de40ad0
 Security Options:
  seccomp
   Profile: builtin
  cgroupns
 Kernel Version: 5.15.148-tegra
 Operating System: Ubuntu 22.04.5 LTS
 OSType: linux
 Architecture: aarch64
 CPUs: 8
 Total Memory: 15.29GiB
 Name: jetson
 ID: abcb21c7-ce49-4ac7-b919-eff07b13b65b
 Docker Root Dir: /var/lib/docker
 Debug Mode: false
 Experimental: false
 Insecure Registries:
  127.0.0.0/8
 Live Restore Enabled: false



freetonik
20 сен 2016 в 11:37
Полное практическое руководство по Docker: с нуля до кластера на AWS
## https://habr.com/ru/articles/310460/

Команда run с флагом -it подключает интерактивный tty в контейнер. 
Теперь можно запускать сколько угодно много команд внутри. Попробуйте.

$ docker run -it busybox sh
/ # ls
bin   dev   etc   home  proc  root  sys   tmp   usr   var
/ # uptime
 05:45:21 up  5:58,  0 users,  load average: 0.00, 0.01, 0.04

Опасно!: Если хочется острых ощущений, то можете попробовать rm -rf bin в контейнере. Но удостоверьтесь, что запускаете ее внутри контейнера, а не снаружи. Если сделаете это снаружи, на своем компьютере, то будет очень плохо, и команды вроде ls, echo перестанут работать. Когда внутри контейнера все перестанет работать, просто выйдете и запустите его заново командой docker run -it busybox sh. Докер создает новый контейнер при запуске, поэтому все заработает снова.


Перед тем, как продолжать, давайте вкратце рассмотрим удаление контейнеров. Мы видели выше, что с помощью команды docker ps -a все еще можно увидеть остатки завершенных контейнеров. На протяжении этого пособия, вы будете запускать docker run несколько раз, и оставшиеся, бездомные контейнеры будут съедать дисковое пространство. Так что я взял за правило удалять контейнеры после завершения работы с ними. Для этого используется команда docker rm. Просто скопируйте ID (можно несколько) из вывода выше и передайте параметрами в команду.


$ docker rm 305297d7a235 ff0a5c3750b9
305297d7a235
ff0a5c3750b9


## INSTALL APP
git clone https://github.com/prakhar1989/docker-curriculum.git
cd flask-app

pip3 install -r requirements.txt
pip3 install Flask==3.1.0

## TEST APP
python3 app.py


file "Dockerfile":

'''
FROM python:3.8

# set a directory for the app
WORKDIR /usr/src/app

# copy all the files to the container
COPY . .

# install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# tell the port number the container should expose
EXPOSE 5000

# run the command
CMD ["python", "./app.py"]
'''



$ docker build -t silenzio/catnip .
ERROR: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Head "http://%2Fvar%2Frun%2Fdocker.sock/_ping": dial unix /var/run/docker.sock: connect: permission denied
silenzio@jetson:~/lib/docker-curriculum/flask-app$ sudo docker build -t silenzio/catnip .
[+] Building 54.6s (9/9) FINISHED                                                                                                                       docker:default
 => [internal] load build definition from Dockerfile                                                                                                              0.1s
 => => transferring dockerfile: 340B                                                                                                                              0.0s
 => [internal] load metadata for docker.io/library/python:3.8                                                                                                     2.0s
 => [internal] load .dockerignore                                                                                                                        

         ....

 => exporting to image                                                                                                                                            0.2s 
 => => exporting layers                                                                                                                                           0.2s 
 => => writing image sha256:3a93d1d7177226bf5634b4f8521c9cb72e93172480d8f4b514daf4074ec87ffb                                                                      0.0s 
 => => naming to docker.io/silenzio/catnip      

## BUILD OK


## RUN:
$ sudo docker run -p 8888:5000 silenzio/catnip
 * Serving Flask app 'app'
 * Debug mode: off
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://172.17.0.2:5000
Press CTRL+C to quit
172.17.0.1 - - [16/Feb/2025 12:34:03] "GET / HTTP/1.1" 200 -
172.17.0.1 - - [16/Feb/2025 12:34:04] "GET /favicon.ico HTTP/1.1" 404 -

## WORK! 

____________


silenzio@jetsonnx:~$ docker system df 		<<<<<<<<<<----------
TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE
Images          13        5         48.02GB   16.46GB (34%)
Containers      26        1         77.84MB   77.24MB (99%)
Local Volumes   4         2         0B        0B
Build Cache     266       0         14.59GB   14.59GB


____
# https://forums.docker.com/t/how-to-delete-cache/5753/20
To delete the docker build cache, you can use this command [mod update: remove spam link]:

docker builder prune <<<<<<<<<<----------

This command will prompt you to confirm the deletion of the cache. If you wanna delete the cache without any prompts, you can use:

docker builder prune -f
For more options and details, check the docker documentation on builder prune
____

To run docker command without sudo:

sudo usermod -aG docker $USER

Unix

To delete all containers including its volumes use,

docker rm -vf $(docker ps -aq)
To delete all the images,

docker rmi -f $(docker images -aq)
Remember, you should remove all the containers before removing all the images from which those containers were created.

Use this to delete everything:

docker system prune -a --volumes
Remove all unused containers, volumes, networks and images

WARNING! This will remove:
    - all stopped containers
    - all networks not used by at least one container
    - all volumes not used by at least one container
    - all images without at least one container associated to them
    - all build cache

____________

docker ps

CONTAINER ID   IMAGE                  COMMAND                  CREATED             STATUS             PORTS     NAMES
5377f324f2ba   noetic_rs2_ssl_slam2   "/ros_entrypoint.sh"     9 minutes ago       Up 9 minutes                 zen_blackwell
fd91d1873a7c   noetic_slam_toolbox    "/ros_entrypoint.sh"   About an hour ago   Up About an hour             compassionate_rhodes



[Terminal 1] First, open a terminal to monitor the disk usage while pulling a Docker image.

watch -n1 df <<<<<<<<<<<--------


sudo docker ps -a

CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS                      PORTS     NAMES
b976c1814c68   silenzio/catnip   "python ./app.py"        2 minutes ago    Exited (0) 2 minutes ago              thirsty_heyrovsky
0c05bc37557c   busybox           "sh"                     23 minutes ago   Exited (0) 23 minutes ago             gracious_curie


sudo docker images
REPOSITORY                TAG                       IMAGE ID       CREATED             SIZE
silenzio/catnip           latest                    3a93d1d71772   3 minutes ago       1.01GB
<none>                    <none>                    4ffd1820eee6   47 minutes ago      11.2GB


If you have a case of redundant tags as described here, 
instead of 

docker rmi <image_id> 
use docker rmi <repo:tag>  <<<<<<<<<-------

on the redundant tag you wish to remove. 

___

silenzio@jetsonnx:~$ sudo blkid | grep nvme
/dev/nvme0n1p9: PARTLABEL="recovery-dtb" PARTUUID="257c6ba8-0423-4a3b-9c55-09640248406a"
/dev/nvme0n1p11: PARTLABEL="recovery_alt" PARTUUID="25a3ffba-54b3-42f1-bc52-f738a7266431"
/dev/nvme0n1p7: PARTLABEL="B_reserved_on_user" PARTUUID="4e708bad-2c30-4f04-97cd-f814c9c63f45"
/dev/nvme0n1p5: PARTLABEL="B_kernel" PARTUUID="0f3295e5-cb14-48f6-b747-ab746d06bd62"
/dev/nvme0n1p3: PARTLABEL="A_kernel-dtb" PARTUUID="34e57172-5361-4f84-9009-6037e08b2d6a"
/dev/nvme0n1p1: UUID="4cc211ea-455a-42d5-9e2d-d03c2c39c4cd" BLOCK_SIZE="4096" TYPE="ext4" PARTLABEL="APP" PARTUUID="587bd0a8-8355-4891-b4db-f136847f3577"
/dev/nvme0n1p14: PARTLABEL="UDA" PARTUUID="404b589d-1688-4293-b57a-05504ae4bb0e"
/dev/nvme0n1p12: PARTLABEL="recovery-dtb_alt" PARTUUID="50f9f2ad-d7ab-4fc5-b921-1e4092882c60"
/dev/nvme0n1p8: PARTLABEL="recovery" PARTUUID="61b9676e-53e8-40de-aef4-206204947572"
/dev/nvme0n1p10: UUID="F114-DB54" BLOCK_SIZE="512" TYPE="vfat" PARTLABEL="esp" PARTUUID="19e454e9-ac59-461f-a34a-916b5cc6c94e"
/dev/nvme0n1p6: PARTLABEL="B_kernel-dtb" PARTUUID="6911709c-ef2c-4b81-8887-a91f1967373e"
/dev/nvme0n1p4: PARTLABEL="A_reserved_on_user" PARTUUID="0bc026ec-9dfa-4e08-ae85-ce4652fbb90e"
/dev/nvme0n1p2: PARTLABEL="A_kernel" PARTUUID="44c3dc59-50c6-4fa9-bd56-1652e1025101"
/dev/nvme0n1p15: PARTLABEL="reserved" PARTUUID="019742b9-47cc-44fe-93ab-fb5327aa5063"
/dev/nvme0n1p13: PARTLABEL="esp_alt" PARTUUID="28bca2bf-6970-44c9-808f-e9425c13ce11"

silenzio@jetsonnx:~$ df -h
Filesystem       Size  Used Avail Use% Mounted on
/dev/nvme0n1p1   233G  132G   89G  60% /
tmpfs            7.7G   39M  7.7G   1% /dev/shm
tmpfs            3.1G   27M  3.1G   1% /run
tmpfs            5.0M  4.0K  5.0M   1% /run/lock
/dev/nvme0n1p10   63M  110K   63M   1% /boot/efi
tmpfs            1.6G  160K  1.6G   1% /run/user/1000

silenzio@jetsonnx:~$ docker info | grep Root
 Docker Root Dir: /var/lib/docker

silenzio@jetsonnx:~$ sudo ls -l /var/lib/docker/
total 80
drwx--x--x   5 root root  4096 Feb 16 15:33 buildkit
drwx--x---  27 root root  4096 Feb 23 12:17 containers
-rw-------   1 root root    36 Feb 16 13:47 engine-id
drwx------   3 root root  4096 Feb 16 13:47 image
drwxr-x---   3 root root  4096 Feb 16 13:47 network
drwx--x--- 395 root root 36864 Feb 23 12:34 overlay2
drwx------   3 root root  4096 Feb 16 13:47 plugins
drwx------   2 root root  4096 Feb 22 20:03 runtimes
drwx------   2 root root  4096 Feb 16 13:47 swarm
drwx------   3 root root  4096 Feb 23 12:43 tmp
drwx-----x   6 root root  4096 Feb 22 20:03 volumes

silenzio@jetsonnx:~$ sudo du -chs /var/lib/docker/
69G	/var/lib/docker/
69G	total

silenzio@jetsonnx:~$ docker info | grep -e "Runtime" -e "Root"
 Runtimes: io.containerd.runc.v2 nvidia runc
 Default Runtime: runc
 Docker Root Dir: /var/lib/docker

silenzio@jetsonnx:~$ docker images
REPOSITORY                TAG                         IMAGE ID       CREATED         SIZE
ros_foxy_librealsense2    latest                      4e62365ed449   5 days ago      11.2GB
librealsense2             latest                      dc8869f55413   5 days ago      289MB
librealsense              latest                      a0b45b78e3c4   5 days ago      292MB
noetic                    latest                      eae5190bf8c7   6 days ago      875MB
silenzio/catnip           latest                      3a93d1d71772   6 days ago      1.01GB
ubuntu                    22.04                       560582227a09   4 weeks ago     69.2MB
hello-world               latest                      f1f77a0f96b7   4 weeks ago     5.2kB
introlab3it/rtabmap_ros   humble-latest               6e19b23e4805   2 months ago    3.68GB
busybox                   latest                      fc0179a204e2   4 months ago    4.04MB
dustynv/ros               foxy-ros-core-l4t-r35.4.1   1671f9250223   14 months ago   11.1GB
nvidia/cuda               11.6.2-base-ubuntu20.04     ca86ee401ec1   15 months ago   84.5MB
prakhar1989/static-site   latest                      f01030e1dcf3   9 years ago     134MB





------------------------------------------------------------------------------------------
## how to github clone for certain branch
------------------------------------------------------------------------------------------
# https://stackoverflow.com/questions/1911109/how-do-i-clone-a-specific-git-branch&ved=2ahUKEwiQsM7busaLAxWAJxAIHWXWB5wQFnoECCUQAQ&usg=AOvVaw2gZObCG36zesDRNaVb3rsN

git clone -b <branch> <remote_repo>

Example:

git clone -b my-branch git@github.com:user/myproject.git



------------------------------------------------------------------------------------------
## How can I Git clone a specific release?
------------------------------------------------------------------------------------------
# https://stackoverflow.com/questions/45241502/how-can-i-git-clone-a-specific-release

You can do this with the --branch flag, which will also accept a tag.

git clone  git@github.com:mygitname/theproject.git --branch 1.0.2

In most cases, you will just want to checkout the tag as described in Exprator's answer (now deleted).



git clone https://github.com/IntelRealSense/librealsense
Cloning into 'librealsense'...

cd librealsense/
git checkout r/256
branch 'r/256' set up to track 'origin/r/256'.
Switched to a new branch 'r/256'

git pull
remote: Enumerating objects: 15, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 7 (delta 5), reused 5 (delta 4), pack-reused 0 (from 0)
Unpacking objects: 100% (7/7), 1.48 KiB | 216.00 KiB/s, done.
From https://github.com/IntelRealSense/librealsense
   f87bc1426..b52bdd08e  development -> origin/development
Already up to date.

...



git checkout -b origin/r/256
Switched to a new branch 'origin/r/256'


git clone --depth 1 --branch v2.50.0 https://github.com/IntelRealSense/librealsense

## WORK!!##!!!!!111




head -n 1 /etc/nv_tegra_release

# R36 (release), REVISION: 4.3, GCID: 38968081, BOARD: generic, EABI: aarch64, DATE: Wed Jan  8 01:49:37 UTC 2025

-------

# ROS2 Humble (Desktop) for Jetson Nano
https://docs.nvidia.com/jetson/archives/l4t-archived/l4t-3261/index.html#page/Tegra%20Linux%20Driver%20Package%20Development%20Guide/updating_jetson_and_host.html#


------------------------------------------------------------------------------------------
## INSTALL CSI camera driver
------------------------------------------------------------------------------------------
# http://www.yahboom.net/study/Orin-NX-SUPER
>> 05.Vision basic course >> CSI camera preview


1. Configure CSI camera pins
sudo /opt/nvidia/jetson-io/jetson-io.py


Press the arrow keys to select Configure Jetson 24pin CSI Connector. Then press Enter to go to the next option


Select Configure for compatible hardware and press Enter.


Press the arrow keys to select Camera IMX219 Dual, and then press Enter.


Select Save pin changes, and then press Enter.


Press the arrow keys to select Save and reboot to reconfigure pins, and then press Enter.


When the following interface appears, press Enter directly and the motherboard will restart.


2. Check the video device
ls /dev/video*
The result of the picture is the result of connecting two CSI cameras: generally one CSI camera displays one video device


3. Preview the camera screen
Enter the following command in the terminal, and the system will automatically pop up the camera screen window: open the /dev/video0 device by default

nvgstcapture-1.0


3.1. Specify the camera
If there are multiple cameras, you can specify the camera ID:

nvgstcapture-1.0 --sensor-id=1


3.2. Specify the preview resolution
If there is only one CSI camera, you can change --sensor-id=1 to --sensor-id=0:

nvgstcapture-1.0 --sensor-id=1 --cus-prev-res=1280x720



$ ls /dev/video*
/dev/video0

## RUN:

$ nvgstcapture-1.0
Encoder null, cannot set bitrate!
Encoder Profile = High
Supported resolutions in case of ARGUS Camera
  (2) : 640x480
  (3) : 1280x720
  (4) : 1920x1080
  (5) : 2104x1560
  (6) : 2592x1944
  (7) : 2616x1472
  (8) : 3840x2160
  (9) : 3896x2192
  (10): 4208x3120
  (11): 5632x3168
  (12): 5632x4224

Runtime ARGUS Camera Commands:


$ v4l2-ctl -d /dev/video0 --list-formats-ext
ioctl: VIDIOC_ENUM_FMT
	Type: Video Capture

	[0]: 'RG10' (10-bit Bayer RGRG/GBGB)
		Size: Discrete 3280x2464
			Interval: Discrete 0.048s (21.000 fps)
		Size: Discrete 3280x1848
			Interval: Discrete 0.036s (28.000 fps)
		Size: Discrete 1920x1080
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 1640x1232
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 1280x720
			Interval: Discrete 0.017s (60.000 fps)
silenzio@jetsonnx:~/foxy/catkin_ws/src$ ls /dev/video* 
/dev/video0  /dev/video1  /dev/video


...

------------------------------------------------------------------------------------------
## FIREFOX for UBUNTU 22
------------------------------------------------------------------------------------------
# https://losst.pro/ustanovka-firefox-ubuntu-16-04

# INSTALL:
sudo add-apt-repository ppa:mozillateam/ppa

sudo nano /etc/apt/sources.list.d/mozillateam.list
## ADD TEXT:
deb [signed-by=/etc/apt/keyrings/mozillateam.gpg] https://ppa.launchpadcontent.net/mozillateam/ppa/ubuntu jammy main deb-src [signed-by=/etc/apt/keyrings/mozillateam.gpg] https://ppa.launchpadcontent.net/mozillateam/ppa/ubuntu jammy main

sudo nano /etc/apt/preferences.d/mozilla-firefox
## ADD TEXT:
Package: * 
Pin: release o=LP-PPA-mozillateam 
Pin-Priority: 1001

sudo apt update
apt-cache policy firefox
sudo apt install firefox

# Please note that this PPA contains stable ESR (Extended Support Release) versions of Firefox. This means that you will receive updates slightly slower than using snap packages. You can check the current version with the command:

firefox --version


------------------------------------------------------------------------------------------
## GParted is a free partition editor for graphically managing your disk partitions.
------------------------------------------------------------------------------------------
# https://gparted.org/download.php

sudo apt-get install gparted








## RESET SSH key
nano /Users/silenzio/.ssh/known_hosts
delete line with ...192.168.2.34



export SETUPTOOLS_USE_DISTUTILS=stdlib


------------------------------------------------------------------------------------------
## VINO INSTALL
------------------------------------------------------------------------------------------
# https://redos.red-soft.ru/base/redos-7_3/7_3-remote-access/7_3-vino/?nocache=1739389433387
sudo apt update
sudo apt install vino

# Set vino's password through terminal
gsettings set org.gnome.Vino vnc-password $(echo -n 'mypasswd'|base64)

gsettings set org.gnome.Vino authentication-methods "['vnc']"
gsettings set org.gnome.Vino require-encryption false
gsettings set org.gnome.Vino prompt-enabled false

## WORK !!
## RUN:
/usr/lib/vino/vino-server

-------------------------------------------------------------------------
## Install OpenCV 4.8.0 on Jetson Nano
-------------------------------------------------------------------------
## https://qengineering.eu/install-opencv-on-jetson-nano.html

cd ~
wget -O opencv.zip https://github.com/opencv/opencv/archive/4.8.0.zip
wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.8.0.zip

# unpack
unzip opencv.zip
unzip opencv_contrib.zip

# some administration to make live easier later on
mv opencv-4.8.0 opencv
mv opencv_contrib-4.8.0 opencv_contrib

# clean up the zip files
rm opencv.zip
rm opencv_contrib.zip

cd ~/opencv
mkdir build
cd build

cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr \
-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
-D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
-D WITH_OPENCL=OFF \
-D WITH_CUDA=ON \
-D CUDA_ARCH_BIN=5.3 \
-D CUDA_ARCH_PTX="" \
-D WITH_CUDNN=ON \
-D WITH_CUBLAS=ON \
-D ENABLE_FAST_MATH=ON \
-D CUDA_FAST_MATH=ON \
-D OPENCV_DNN_CUDA=ON \
-D ENABLE_NEON=ON \
-D WITH_QT=OFF \
-D WITH_OPENMP=ON \
-D BUILD_TIFF=ON \
-D WITH_FFMPEG=ON \
-D WITH_GSTREAMER=ON \
-D WITH_TBB=ON \
-D BUILD_TBB=ON \
-D BUILD_TESTS=OFF \
-D WITH_EIGEN=ON \
-D WITH_V4L=ON \
-D WITH_LIBV4L=ON \
-D WITH_PROTOBUF=ON \
-D OPENCV_ENABLE_NONFREE=ON \
-D INSTALL_C_EXAMPLES=OFF \
-D INSTALL_PYTHON_EXAMPLES=OFF \
-D PYTHON3_PACKAGES_PATH=/usr/lib/python3/dist-packages \
-D OPENCV_GENERATE_PKGCONFIG=ON \
-D BUILD_EXAMPLES=OFF ..

make -j4


sudo rm -r /usr/include/opencv4/opencv2
sudo make install
sudo ldconfig
# cleaning (frees 300 MB)

make clean
sudo apt-get update

# Checking.
Now it is time to check your installation. It can be done in a fast way by using Python. Use the commands shown in the screen dump below. It all speaks for itself.


python3
import cv2
cv2.__version__
cv2.cuda.printCudaDeviceInfo(0)


OpenCV will be installed to the /usr directory, all files will be copied to following locations:

    /usr/bin - executable files
    /usr/lib/aarch64-linux-gnu - libraries (.so)
    /usr/lib/aarch64-linux-gnu/cmake/opencv4 - cmake package
    /usr/include/opencv4 - headers
    /usr/share/opencv4 - other files (e.g. trained cascades in XML format)


### NOT WORK ON NX...

-------------------------------------------------------------------------
## Install OpenCV 4.10.0 on Jetson Orin NX
-------------------------------------------------------------------------
## https://github.com/AastaNV/JEP/blob/master/script/install_opencv4.10.0_Jetpack6.1.sh
## https://forums.developer.nvidia.com/t/opencv-4-9-0-build-with-cuda-failed-on-agx-orin-jetpack-6-1-with-previously-provided-script/313080/4

#!/bin/bash
#

version="4.10.0"
folder="workspace"

set -e

for (( ; ; ))
do
    echo "Do you want to remove the default OpenCV (yes/no)?"
    read rm_old

    if [ "$rm_old" = "yes" ]; then
        echo "** Remove other OpenCV first"
        sudo apt -y purge *libopencv*
	break
    elif [ "$rm_old" = "no" ]; then
	break
    fi
done


echo "------------------------------------"
echo "** Install requirement (1/4)"
echo "------------------------------------"
sudo apt-get update
sudo apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev python3.10-dev python3-numpy
sudo apt-get install -y libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libv4l-dev v4l-utils qv4l2
sudo apt-get install -y curl


echo "------------------------------------"
echo "** Download opencv "${version}" (2/4)"
echo "------------------------------------"
mkdir $folder
cd ${folder}
curl -L https://github.com/opencv/opencv/archive/${version}.zip -o opencv-${version}.zip
curl -L https://github.com/opencv/opencv_contrib/archive/${version}.zip -o opencv_contrib-${version}.zip
unzip opencv-${version}.zip
unzip opencv_contrib-${version}.zip
rm opencv-${version}.zip opencv_contrib-${version}.zip
cd opencv-${version}/


echo "------------------------------------"
echo "** Build opencv "${version}" (3/4)"
echo "------------------------------------"
mkdir release
cd release/
cmake -D WITH_CUDA=ON -D WITH_CUDNN=ON -D CUDA_ARCH_BIN="8.7" -D CUDA_ARCH_PTX="" -D OPENCV_GENERATE_PKGCONFIG=ON -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${version}/modules -D WITH_GSTREAMER=ON -D WITH_LIBV4L=ON -D BUILD_opencv_python3=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_EXAMPLES=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..
make -j$(nproc)


echo "------------------------------------"
echo "** Install opencv "${version}" (4/4)"
echo "------------------------------------"
sudo make install
echo 'export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH' >> ~/.bashrc
echo 'export PYTHONPATH=/usr/local/lib/python3.10/site-packages/:$PYTHONPATH' >> ~/.bashrc
source ~/.bashrc


echo "** Install opencv "${version}" successfully"
echo "** Bye :)"

## BUILD OK


$ python3
Python 3.10.12 (main, Jan 17 2025, 14:35:34) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import cv2
>>> cv2.__version__
'4.10.0'
>>> cv2.cuda.printCudaDeviceInfo(0)
*** CUDA Device Query (Runtime API) version (CUDART static linking) *** 

Device count: 1

Device 0: "Orin"
  CUDA Driver Version / Runtime Version          12.60 / 12.60
  CUDA Capability Major/Minor version number:    8.7
  Total amount of global memory:                 15655 MBytes (16415559680 bytes)
  GPU Clock Speed:                               1.17 GHz
  Max Texture Dimension Size (x,y,z)             1D=(131072), 2D=(131072,65536), 3D=(16384,16384,16384)
  Max Layered Texture Size (dim) x layers        1D=(32768) x 2048, 2D=(32768,32768) x 2048
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 65536
  Warp size:                                     32
  Maximum number of threads per block:           1024
  Maximum sizes of each dimension of a block:    1024 x 1024 x 64
  Maximum sizes of each dimension of a grid:     2147483647 x 65535 x 65535
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and execution:                 Yes with 2 copy engine(s)
  Run time limit on kernels:                     No
  Integrated GPU sharing Host Memory:            Yes
  Support host page-locked memory mapping:       Yes
  Concurrent kernel execution:                   Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support enabled:                No
  Device is using TCC driver mode:               No
  Device supports Unified Addressing (UVA):      Yes
  Device PCI Bus ID / PCI location ID:           0 / 0
  Compute Mode:
      Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) 

deviceQuery, CUDA Driver = CUDART, CUDA Driver Version  = 12.60, CUDA Runtime Version = 12.60, NumDevs = 1

>>> 


## WORK !!


-------------------------------------------------------------------------
## How To Install CMake 3.22 Ubuntu 22.04
-------------------------------------------------------------------------
## https://gist.github.com/UbuntuEvangelist/afd13e6fba7ffc5dbf7c5da31b55dff6#file-how-to-install-cmake-3-22-ubuntu-22-04-L3


sudo apt update
sudo apt install build-essential 
sudo apt install libssl-dev
export OPENSSL_ROOT_DIR=/usr/include/openssl
wget https://cmake.org/files/v3.29/cmake-3.29.2.tar.gz
tar -xzvf cmake-3.29.2.tar.gz
cd cmake-3.29.2
./bootstrap
make -j$(nproc)
sudo make install
# Update PATH Environment Variable
which cmake
/usr/local/bin/cmake
export PATH=/usr/local/bin/cmake:$PATH
source ~/.bashrc
cmake --version



gsettings set org.gnome.desktop.background picture-uri ""
gsettings set org.gnome.desktop.background picture-uri-dark ""
gsettings set org.gnome.desktop.background primary-color '#101010' 



------------------------------------------------------------------------------------------
## INSTALL  sublime-text
------------------------------------------------------------------------------------------

sudo wget -O- https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/sublimehq.gpg


echo 'deb [signed-by=/usr/share/keyrings/sublimehq.gpg] https://download.sublimetext.com/ apt/stable/' | sudo tee /etc/apt/sources.list.d/sublime-text.list

sudo apt update

sudo apt install sublime-text

## WORK

## RUN:
subl






------------------------------------------------------------------------------------------
## UBUNTU 22.04 LIVE CD CLEAN INSTALL 
------------------------------------------------------------------------------------------

lsusb

sudo apt install nano

sudo add-apt-repository universe

mkdir usbhdd

# find name of usb hdd disk partition (/dev/sdb4 for example)
sudo nano /etc/fstab

# add line at the end
/dev/sdb4 usbhdd ext4 defaults 0 0

sudo mount usbhdd

ls -l
...
drwxr-xr-x 4 root   root   4096 Feb 13 09:59 usbhdd

sudo chown ubuntu:ubuntu usbhdd

ls -l
drwxr-xr-x 4 ubuntu ubuntu 4096 Feb 13 09:59 usbhdd

ls usbhdd/
install-logs-2025-02-13.0  lost+found




------------------------------------------------------------------------------------------
## Enable MAX power mode
------------------------------------------------------------------------------------------

# http://www.yahboom.net/study/Orin-NX-SUPER


1. --->>> 06.Upgrade to SUPER version
2. --->>> 03.Installing Jetson environment


https://developer.nvidia.com/embedded/jetson-linux-r3643


It should be something like this:


tar xf Jetson_Linux_R36.4.3_aarch64.tbz2 

sudo tar xpf Tegra_Linux_Sample-Root-Filesystem_R36.4.3_aarch64.tbz2 -C Linux_for_Tegra/rootfs/ 

cd Linux_for_Tegra/

sudo ./tools/l4t_flash_prerequisites.sh 

sudo ./apply_binaries.sh


2. --->>> 03.Installing Jetson environment
__________________________________________

Step 2. Why you recommend install through Virtual Machine and use SDK Manager?
Why not just "sudo apt install nvidia-jetpack"?


If you prefer not to use SDKmanager:
You should be able to install most of the libs/tools using 

sudo apt install nvidia-jetpack

and for dev libraries run 
sudo apt install nvidia-jetpack-dev


There are a couple additional libraries such as DeepStream, that are not part of jetpack, so you will need to down and install them manually.

I know it.
Question is, why you recommend install through Virtual Machine and use SDK Manager?
Why not just "sudo apt install nvidia-jetpack"?


Now I have installed Jetpack 6.2 with "sudo apt install nvidia-jetpack" and "sudo apt install nvidia-jetpack-dev". 
Everything ok. 



Can you please spare me 5 minutes of your time and answer my questions?

1. I have already upgraded my board.

LAT version: 36.4.3, Jetpack: 6.2. Linux Ubuntu 22.04.
Here is a picture of jtop. Everything works except Power mode - 0: MAXN SUPER.

2. What is the difference between the commands you sent above and what I did? I did the same thing through sdk-manager.





...


sudo nvpmodel -m 0

Enable Jetson clocks: CPU and GPU cores run at maximum frequency

# run jetson_clocks without any option to set static max frequency to CPU, GPU and EMC clocks.
sudo jetson_clocks

udo jetson_clocks --show
SOC family:tegra234  Machine:NVIDIA Jetson Orin NX Engineering Reference Developer Kit Super
Online CPUs: 0-7
cpu0:  Online=1 Governor=schedutil MinFreq=729600 MaxFreq=1497600 CurrentFreq=1420800 IdleStates: WFI=0 c7=0 
cpu1:  Online=1 Governor=schedutil MinFreq=729600 MaxFreq=1497600 CurrentFreq=883200 IdleStates: WFI=0 c7=0 
cpu2:  Online=1 Governor=schedutil MinFreq=729600 MaxFreq=1497600 CurrentFreq=1344000 IdleStates: WFI=0 c7=0 
cpu3:  Online=1 Governor=schedutil MinFreq=729600 MaxFreq=1497600 CurrentFreq=1344000 IdleStates: WFI=0 c7=0 
cpu4:  Online=1 Governor=schedutil MinFreq=729600 MaxFreq=1497600 CurrentFreq=960000 IdleStates: WFI=0 c7=0 
cpu5:  Online=1 Governor=schedutil MinFreq=729600 MaxFreq=1497600 CurrentFreq=1190400 IdleStates: WFI=0 c7=0 
cpu6:  Online=1 Governor=schedutil MinFreq=729600 MaxFreq=1497600 CurrentFreq=1420800 IdleStates: WFI=0 c7=0 
cpu7:  Online=1 Governor=schedutil MinFreq=729600 MaxFreq=1497600 CurrentFreq=1497600 IdleStates: WFI=0 c7=0 
GPU MinFreq=306000000 MaxFreq=408000000 CurrentFreq=408000000
Active GPU TPCs: 4
EMC MinFreq=204000000 MaxFreq=3199000000 CurrentFreq=3199000000 FreqOverride=1
DLA0_CORE:   Online=1 MinFreq=0 MaxFreq=614400000 CurrentFreq=614400000
DLA0_FALCON: Online=1 MinFreq=0 MaxFreq=294400000 CurrentFreq=294400000
DLA1_CORE:   Online=1 MinFreq=0 MaxFreq=614400000 CurrentFreq=614400000
DLA1_FALCON: Online=1 MinFreq=0 MaxFreq=294400000 CurrentFreq=294400000
PVA0_VPS0: Online=1 MinFreq=0 MaxFreq=512000000 CurrentFreq=512000000
PVA0_AXI:  Online=1 MinFreq=0 MaxFreq=358400000 CurrentFreq=358400000
FAN Dynamic Speed Control=nvfancontrol hwmon0_pwm1=105
NV Power Mode: 25W






------------------------------------------------------------------------------------------
## Installing JTOP to check CPU usage
------------------------------------------------------------------------------------------


sudo apt-get update
sudo apt-get full-upgrade
sudo apt install curl
sudo apt install nano
sudo apt install terminator -y
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py 
sudo python3 get-pip.py 

sudo pip3 install jetson-stats

## ERROR smith with setuptool...

## FIX:
sudo pip3 uninstall setuptools
sudo pip uninstall setuptools

sudo pip3 install jetson-stats

jtop
## WORK! 







------------------------------------------------------------------------------------------
## INSTALL tensorflow with GPU support
------------------------------------------------------------------------------------------
# https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html

1. Install JetPack on your Jetson device.
2. Install system packages required by TensorFlow:

$ sudo apt-get update
$ sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran

3. Install and upgrade pip3

$ sudo apt-get install python3-pip
$ sudo python3 -m pip install --upgrade pip
$ sudo pip3 install -U testresources setuptools==65.5.0

4. Install the Python package dependencies.
$ sudo pip3 install -U numpy==1.22 future==0.18.2 mock==3.0.5 keras_preprocessing==1.1.2 keras_applications==1.0.8 gast==0.4.0 protobuf pybind11 cython pkgconfig packaging h5py==3.7.0


II. Installing TensorFlow

Note:
As of the 20.02 TensorFlow release, the package name has changed from tensorflow-gpu to tensorflow. See the section on Upgrading TensorFlow for more information.

Install TensorFlow using pip3. 
This command will install the latest version of TensorFlow compatible with JetPack 5.1.2. <<<<<<<<<-------------


$ sudo pip3 install --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v512 tensorflow==2.12.0+nv23.06


I have a question:
How to install TensorFlow with GPU support for JetPack 6.2?

Now TensorFlow with GPU only for JetPack 5.1.2

According to this doc - https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform-release-notes/tf-jetson-rel.html






------------------------------------------------------------------------------------------
## INSTALL Drivers for Intel® RealSense™ Devices
------------------------------------------------------------------------------------------

lsusb
>Bus 003 Device 006: ID 03e7:2150 Intel Myriad VPU [Movidius 19:25 Neural Compute Stick]


sudo apt install python3.8-dev
sudo apt update



python -c 'from distutils.sysconfig import get_makefile_filename as m; print (m())'
/usr/lib/python3.8/config-3.8-aarch64-linux-gnu/Makefile

export PYTHON_EXECUTABLE=/usr/bin/python3


mkdir librealsense
cd librealsense

git clone https://github.com/JetsonHacksNano/installLibrealsense

cd installLibrealsense

./buildLibrealsense.sh -v v2.50.0

## NOT WORK !@!1

realsense-viewer







------------------------------------------------------------------------------------------
## CHANGE DIR AND FILE PERMISSIONS
------------------------------------------------------------------------------------------
# https://askubuntu.com/questions/6723/change-folder-permissions-and-ownership

First, check demo.txt permissions:

# ls -l demo.txt
Out:

-rw-r--r-- 1 root root 0 Aug 31 05:48 demo.txt
In this example change file ownership to vivek user and list the permissions:

# chown vivek demo.txt
# ls -l demo.txt
Out:

-rw-r--r-- 1 vivek root 0 Aug 31 05:48 demo.txt
In this next example, the owner is set to vivek followed by a colon and group ownership is also set to vivek group, run:

# chown vivek:vivek demo.txt <<<<<<<<<<-----------------
# ls -l demo.txt
Out:

-rw-r--r-- 1 vivek vivek 0 Aug 31 05:48 demo.txt



------------------------------------------------------------------------------------------
## RUN sudo apt install on CLEAR UBUNTU SYSTEM 
------------------------------------------------------------------------------------------

## RUN:
sudo add-apt-repository universe

## AFTER INSTALL rep atom apt...
sudo apt install mc


sudo apt install terminator -y




------------------------------------------------------------------------------------------
## how to install ubuntu on mac INTEL with Dual Boot
------------------------------------------------------------------------------------------

# https://www.makeuseof.com/tag/install-linux-macbook-pro/
# https://askubuntu.com/questions/1358468/installing-ubuntu-on-macbook-pro-2019-with-macos-big-sur
# https://github.com/marcosfad/mbp-ubuntu


## https://ubuntu.com/tutorials/create-a-usb-stick-on-macos#7-boot-your-mac



5. Etcher configuration
Etcher will configure and write to your USB device in three stages, each of which needs to be selected in turn:

Select image will open a file requester from which should navigate to and select the ISO file downloaded previously. By default, the ISO file will be in your Downloads folder.

Select drive, replaced by the name of your USB device if one is already attached, lets you select your target device. You will be warned if the storage space is too small for your selected ISO.

Flash! will activate when both the image and the drive have been selected. As with Disk Utility, Etcher needs low-level access to your storage hardware and will ask for your password after selection.

6. Write to device
After entering your password, Etcher will start writing the ISO file to your USB device.

The Flash stage of the process will show progress, writing speed and an estimated duration until completion. This will be followed by a validation stage that will ensure the contents of the USB device are identical to the source image.

When everything has finished, Etcher will declare the process a success.

Congratulations! You now have Ubuntu on a USB stick, bootable and ready to go.

7. Boot your Mac
If you want to use your USB stick with an Apple Mac, you will need to restart or power-on the Mac with the USB stick inserted while the Option/alt (⌥) key is pressed.

This will launch Apple’s ‘Startup Manager’ which shows bootable devices connected to the machine. Your USB stick should appear as gold/yellow and labelled ‘EFI Boot’. Selecting this will lead you to the standard Ubuntu boot menu.





------------------------------------------------------------------------------------------
## NVIDIA sdk-manager INSTALL
------------------------------------------------------------------------------------------
## https://developer.nvidia.com/sdk-manager

############ ON HOST MACHINE #######

sudo apt install ./sdkmanager_2.2.0-12028_amd64.deb

############ ON HOST MACHINE #######

sudo dpkg --configure -a
sudo apt-get install -f
sudo apt-get clean && sudo apt-get update
sudo apt-get upgrade


!!!!!!!!!!!!!!
https://forums.developer.nvidia.com/t/error-with-installing-nvidia-sdk-manager-you-have-held-broken-packages/72856/6

SDKManager is to be run on host (a Ubuntu PC), not on Jetson.

sudo apt --fix-broken install
sudo dpkg -i sdkmanagerNAME.deb

!!!!!!!!!!!!!!


Victor Belov, [27 Jan 2025, 22:10:58]:
Без серийной консоли надо после перезагрузки подождать минут 10-15 чтоб наверняка

Ну это всё надо оттуда сбэкапить

Потому что 6.х надо будет с нового имиджа начинать


------------------------------------------------------------------------------------------
## Initial Setup Guide for Jetson Orin NX Developer Kit -  JetPack 6.2 
------------------------------------------------------------------------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
###### https://www.jetson-ai-lab.com/initial_setup_jon_sdkm.html
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

https://www.jetson-ai-lab.com/initial_setup_jon_sdkm.html#__tabbed_3_1

# https://www.jetson-ai-lab.com/initial_setup_jon.html
# https://forums.developer.nvidia.com/t/blog-boot-from-nvme-without-using-sdkmanager-or-external-ubuntu-pc-a-solution-that-works/252757


Victor Belov, [27 Jan 2025, 15:45:43]:
Есть опыт установки на Jetson Orin Nano

Проблема в общем то в том что у 5.x и 6.x разный bootloader

Для того чтобы загрузиться с 6.x нужно его проапгрейдить до правильной версии, но надо понимать что 5.x после этого уже будет не загрузить на Orin

Я делал следующим образом. Сделал SD с последней версией 5.1.3, в ней есть специальный пакетик nvidia-l4t-jetson-orin-nano-qspi-updater

Вот здесь внятная весьма инструкция как это делать

https://www.jetson-ai-lab.com/initial_setup_jon.html


Заодно уж вот тут элементарные действия как поставиться на NVMe

https://forums.developer.nvidia.com/t/blog-boot-from-nvme-without-using-sdkmanager-or-external-ubuntu-pc-a-solution-that-works/252757


Victor Belov, [27 Jan 2025, 16:32:48]:
Там главное пошагово его довести до последней версии от jetpack 5.x, и потом уже в 6.x

И не надо пытаться делать это из какой нибудь существующей инсталляции 5.x, просто сразу делайте чистую sd карту 5.1.3 и вперед




У меня Jetson Orin NX 16 Gb там сейчас стоит Jetpack_5.1.3.
Версия UEFI 5.0. Как я понимаю на него можно накатить Jetpack_6.2?
Всмысле если бы была версия UEFI 3.0 то нужно сначала было бы прошивать ее до 5.0, так?

Ок. Можно. 

И второй вопрос:
По ссылке которую вы кинули, где расписано сначала как на SD card установить,
а потом все закинуть на SSD.

Но у меня нет SD, вообще((



sudo nvbootctrl dump-slots-info что говорит?

a g, [27 Jan 2025, 22:08:30]:
Current version: 35.5.0
Capsule update status: 0
Current bootloader slot: A
Active bootloader slot: A
num_slots: 2
slot: 0,             status: normal
slot: 1,             status: normal

Блин, другая цифра...

Victor Belov, [27 Jan 2025, 22:09:07]:
Всё правильно, 35.5.0

a g, [27 Jan 2025, 22:09:25]:
Это значит можно накатить?

Victor Belov, [27 Jan 2025, 22:09:34]:
Это последняя версия 5.х

a g, [27 Jan 2025, 22:11:30]:
А данные что есть сохранятся?

Я понимаю что операционка другая будет

Victor Belov, [27 Jan 2025, 22:11:51]:
Нет, не так

Вы с 5.1.3 сапгрейдите uefi


Victor Belov, [27 Jan 2025, 22:12:53]:
На большом orin это наверное по другому работает потому что на nano после этого надо вставлять новую sd карту с 6.х

Эта статья про нано - «Initial Setup Guide for Jetson Orin Nano Developer Kit
«

Там должна быть такая же для NX


http://www.yahboom.net/study/Jetson-Orin-NX



https://www.edge-ai-vision.com/2025/01/nvidia-jetpack-6-2-brings-super-mode-to-nvidia-jetson-orin-nano-and-jetson-orin-nx-modules/

https://docs.nvidia.com/sdk-manager/install-with-sdkm-jetson/index.html





------------------------------------------------------------------------------------------
## BACKUP SYSTEM TO EXT USB HDD
------------------------------------------------------------------------------------------

# https://askubuntu.com/questions/963021/how-to-take-whole-ubuntu-16-04-system-backup-into-external-hard-disk
# https://www.reddit.com/r/linuxquestions/comments/oi5d8o/best_easy_way_to_make_a_full_backup_on_a_external/

$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/nvme0n1p1  234G  175G   50G  78% /
none            7.5G     0  7.5G   0% /dev
tmpfs           7.6G  108K  7.6G   1% /dev/shm
tmpfs           1.6G   35M  1.5G   3% /run
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           7.6G     0  7.6G   0% /sys/fs/cgroup
/dev/sda1       229G   28K  217G   1% /hdd
tmpfs           1.6G   28K  1.6G   1% /run/user/1000

$ sudo lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL
NAME         FSTYPE   SIZE MOUNTPOINT LABEL
loop0        vfat      16M            L4T-README
sda                 232.9G            
+-sda1       ext4   232.9G /hdd       
zram0                 969M [SWAP]     
zram1                 969M [SWAP]     
zram2                 969M [SWAP]     
zram3                 969M [SWAP]     
zram4                 969M [SWAP]     
zram5                 969M [SWAP]     
zram6                 969M [SWAP]     
zram7                 969M [SWAP]     
nvme0n1             238.5G            
+-nvme0n1p1  ext4   237.7G /          
+-nvme0n1p2            64M            
...

sudo dd if=/dev/sda of=/dev/sdb status=progress

if=FILE         read from FILE instead of stdin
of=FILE         write to FILE instead of stdout


## RUN:
sudo dd if=/dev/nvme0n1 of=/dev/sda bs=1M status=progress

## DONE:
$ sudo dd if=/dev/nvme0n1 of=/dev/sda bs=1M status=progress

250040287232 bytes (250 GB, 233 GiB) copied, 5648 s, 44.3 MB/s
dd: error writing '/dev/sda': No space left on device
238476+0 records in
238475+0 records out
250059350016 bytes (250 GB, 233 GiB) copied, 5648.64 s, 44.3 MB/s



sudo dmesg

 2262.296223] cpufreq: cpu4,cur:1051000,set:806400,set ndiv:63
[ 2273.308999] cpufreq: cpu4,cur:1053000,set:729600,set ndiv:57
[ 2280.507137] usb 2-1.1: new SuperSpeed Gen 1 USB device number 5 using tegra-xusb
[ 2280.533660] usb 2-1.1: New USB device found, idVendor=1f75, idProduct=0611, bcdDevice= 0.06
[ 2280.533667] usb 2-1.1: New USB device strings: Mfr=4, Product=5, SerialNumber=6
[ 2280.533670] usb 2-1.1: SerialNumber: 20170731
[ 2280.548380] usb-storage 2-1.1:1.0: USB Mass Storage device detected
[ 2280.548762] scsi host0: usb-storage 2-1.1:1.0
[ 2281.579719] scsi host0: scsi scan: INQUIRY result too short (5), using 36
[ 2281.579729] scsi 0:0:0:0: Direct-Access     MAXTOR S TM3250820AS           PQ: 0 ANSI: 0
[ 2281.588739] sd 0:0:0:0: [sda] 488397168 512-byte logical blocks: (250 GB/233 GiB)
[ 2281.597695] sd 0:0:0:0: [sda] Write Protect is off
[ 2281.602693] sd 0:0:0:0: [sda] Mode Sense: 3b 00 00 00
[ 2281.604540] sd 0:0:0:0: [sda] No Caching mode page found
[ 2281.610085] sd 0:0:0:0: [sda] Assuming drive cache: write through
[ 2281.657536] sd 0:0:0:0: [sda] Attached SCSI disk

############ DO NOT WORK!!  


$ mount
...
/dev/fuse on /run/user/1000/doc type fuse (rw,nosuid,nodev,relatime,user_id=1000,group_id=1000)
/dev/sda1 on /hdd type ext4 (rw,relatime) <<<<<<<------ /hdd --------


## RUN THIS:

sudo cp -a / /mnt/usb

/mnt/usb - PATH TO MOUNT HDD USB DRIVE

sudo cp -a / /hdd

## NOT WORK!! 


sudo cp -a /home/jetson /hdd



------------------------------------------------------------------------------------------
## MOUNT NEW USB HDD 
------------------------------------------------------------------------------------------
# https://askubuntu.com/questions/125257/how-do-i-add-an-additional-hard-drive

sudo fdisk -l

Disk /dev/sda: 232.91 GiB, 250059350016 bytes, 488397168 sectors
Disk model: TM3250820AS     
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: AC243013-F3C2-4244-9B66-D10D60D626B2

Device     Start       End   Sectors   Size Type
/dev/sda1   2048 488396799 488394752 232.9G Linux filesystem


2.1 Create a mount point
sudo mkdir /hdd  <<<<<<<------ NAME OF YOUR DEV "backup" (for example)

2.2 Edit /etc/fstab
Open /etc/fstab file with root permissions:

sudo nano /etc/fstab
And add following to the end of the file:

/dev/sda1    /hdd    ext4    defaults    0    0

2.3 Mount partition
Last step and you're done!

sudo mount /hdd

## WORK




==========================================================================================
# PHOTOGRANOMETRY
==========================================================================================


------------------------------------------------------------------------------------------
## Master the 3D Mapping Basics With A 3-Minute Tutorial
------------------------------------------------------------------------------------------
# https://www.cupixvista.com/tutorial
# https://www.cupixvista.com/






------------------------------------------------------------------------------------------
==========================================================================================
# SYSTEM
==========================================================================================
------------------------------------------------------------------------------------------

mkdir со скобками одним махом создаёт несколько папок.
mkdir -p {dev,test,prod}/{backend,frontend}

"cd -" быстро возвращается в предыдущий каталог вместо cd .. cd .. cd ..

touch с диапазоном чисел создаёт несколько файлов одновременно
touch test{1..100}.txt

tail -f позволяет в реальном времени отслеживать изменения в логах.

history 5 вызывает последние команды для повторного выполнения.
123  ls
124  cd src/
125  mkdir newdir
126  touch newfile.txt
127  history 5

!125
mkdir newdir
________
#!/bin/bash
# Пример, который сработает во многих шеллах
[ $b -eq 1 ] && a=0 || a=1
# ------------  ^-- операция целиком
if [ $b -eq 1 ]
then
  a=0
else
  a=1
fi
# --- второй пример
[ $b -eq 1 ]
result=$?


if [ -z $1 ] || [ -z $2 ]; then echo -e "Usage: $0 <IP> <long-mask>\nExample: $0 192.168.1.14 255.255.255.0"; exit 1; fi
________

## APT REMOVE POACKAGES

Removing packages with 
sudo apt purge 
... or 
sudo apt --purge remove ...


sudo add-apt-repository <repository_name>
sudo apt update
sudo apt install <application_name>


# This will resolve the problem of dpkg having been interrupted.

sudo apt-get update && sudo apt-get upgrade
sudo dpkg --configure -a
sudo apt-get clean && sudo apt-get autoremove
sudo reboot


sudo shutdown -P now

=======
J_NX

nano ~/.bashrc
source ~/.bashrc


=======
# FREE SPACE
## https://opensource.com/article/18/7/how-check-free-disk-space-linux

$ df -h 
Filesystem      Size  Used Avail Use% Mounted on
/dev/nvme0n1p1  234G  179G   46G  80% /
none            7.5G     0  7.5G   0% /dev
tmpfs           7.6G   52K  7.6G   1% /dev/shm
tmpfs           1.6G   19M  1.5G   2% /run
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           7.6G     0  7.6G   0% /sys/fs/cgroup
tmpfs           1.6G   16K  1.6G   1% /run/user/1000

# ls -l /var/log -h
-rw-r--r-- 1 root   root  67K Feb  3 23:38 alternatives.log
-rw-r----- 1 root   adm  187K Feb  4 17:06 apport.log
drwxr-xr-x 2 root   root 4.0K Feb  4 17:06 apt
-rw-r----- 1 syslog adm  1.5M Feb  4 17:15 auth.log

journalctl

_______

# https://github.com/pythops/jetson-image
# Nvidia Jetson Minimalist Images
Motivation: The need for the minimalist images came from the official jetson images being large in size and containing pre-installed packages that are not necessary, resulting in the consumption of valuable disk space and memory.
It can generate Ubuntu builds of any version for most jetson boards, works quite well in my experience.



## Initial Setup Guide for Jetson Orin Nano Developer Kit

# software update ( JetPack 6.1 (rev.1) )
# https://www.jetson-ai-lab.com/initial_setup_jon.html
## IMAGE JetPack 6.x SD card
https://developer.nvidia.com/downloads/embedded/L4T/r36_Release_v4.0/jp61-rev1-orin-nano-sd-card-image.zip



sudo sh -c 'echo "deb [arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2.list'

$jetson@ubuntu:~$ dpkg --print-architecture
arm64




------------------------------------------------------------------------------------------
## START STOP service
------------------------------------------------------------------------------------------
## https://askubuntu.com/questions/1350666/how-to-enable-start-stop-restart-for-a-newly-added-service-in-ubuntu

Here is how you create a service:

0. Open Terminal (if it's not already open)
1. Create a new file for the service. I will call mine query_db.service:
sudo vi /etc/systemd/system/query_db.service
Note: Feel free to use any text editor you wish. The use of vi in this example is neither a suggestion nor an endorsement. It's just a force of habit.
2. Paste the following into the new file, editing the relevant values where appropriate:
[Unit]
Description=Do Some Query

[Service]
User=dheeraj
WorkingDirectory=/home/dheeraj/scripts
ExecStart=/home/dheeraj/scripts/query_db.sh
Type=simple
TimeoutStopSec=10
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
Note: Be sure to change the User, WorkingDirectory, and ExecStart values to something correct. The other items can remain untouched if you are unsure of how to configure them.

3. Verify that the script file is executable:
sudo chmod +x /home/dheeraj/scripts/query_db.sh

4. Reload the systemd daemons:
sudo systemctl daemon-reload

5. Enable your daemon:
sudo systemctl enable query_db

6. Start your daemon:
sudo systemctl start query_db

7. That's all there is to it. You can now check the status of your service with:
sudo systemctl status query_db

8. And, of course, you can stop your service with:
sudo systemctl stop query_db

If you prefer to use the shorter commands, swap the action with the service name:

sudo service query_db status
sudo service query_db stop
That's really all there is to it.



## EXAMPLE:
## file "yahboom_oled.service"

"
[Unit]
Description=yahboom_oled start service
After=multi-user.target

[Service]
Type=idle
User=jetson
ExecStart=/bin/sh -c "python3 /home/jetson/software/oled_yahboom/yahboom_oled.py"
WorkingDirectory=/home/jetson

[Install]
WantedBy=multi-user.target
"

sudo nano /etc/systemd/system/yahboom_oled.service 

sudo systemctl start yahboom_oled.service
sudo systemctl stop yahboom_oled.service

Run 'systemctl daemon-reload' to reload units.



------------------------------------------------------------------------------------------
# Check memory
------------------------------------------------------------------------------------------

echo "Checking if you have enough  memory for OpenCV build"

# Get memory information
memory_info=$(free -m)

# Extract total memory using awk
mem=$(echo "$memory_info" | awk 'NR==2 {print $2}')

# Extract swap information using awk
swap=$(echo "$memory_info" | awk '/Swap:/ {print $2}')

# Perform addition
total_memory=$((mem + swap))

# Display the total memory and swap
echo "Total Memory: $total_memory MB"

if [ "$total_memory" -lt 10000 ]; then
	echo "Not enough memory, need at least 10000 MB, you have $total_memory MB"
	exit 1
else
	echo "Yay! You have enough memory for OpenCV-4-5-0, proceed."
fi


------------------------------------------------------------------------------------------
# Check system
------------------------------------------------------------------------------------------

for all information regarding the kernel version,
uname -a 

uname -r for the exact kernel version

lsb_release -afor all information related to the Ubuntu version,

lsb_release -r for the exact version

sudo fdisk -l for partition information with all details.


------------------------------------------------------------------------------------------
## NASA ROSA 
------------------------------------------------------------------------------------------
# https://github.com/nasa-jpl/rosa
ROSA is your AI-powered assistant for ROS1 and ROS2 systems. Built on the Langchain framework, ROSA helps you interact with robots using natural language, making robotics development more accessible and efficient.

## INSTALL:


cd /home/jetson/ros_ws/src

git clone https://github.com/nasa-jpl/rosa.git

_________
python3.9 -m pip install python-dotenv pyinputplus catkin_tools rich jpl-rosa
+++++++++

source /home/jetson/ros_ws/devel/setup.bash
roslaunch turtle_agent agent.launch

## WORK:

ROSA is your AI-powered assistant for ROS1 and ROS2 systems. Built on the Langchain framework, ROSA helps you interact with robots using natural language, making robotics development more accessible and efficient.


## RUN:

source /home/jetson/ros_ws/devel/setup.bash

roslaunch turtle_agent agent.launch



## RUN WITH LOCAL OLLAMA MODEL
## https://github.com/nasa-jpl/rosa/issues/18

pdate: ROSA is working with Llama 3.1 8b!

Not sure why I didn't catch this the first time around, but the default behavior for Ollama with llama3.1:8b is to set
the context size to 2K. Well, the number of tokens for base ROSA is closer to 4K.

It turns out that you can set the context size like so:

llm = ChatOllama(
    model="llama3.1:8b",
    num_ctx=8192,
    temperature=0.0,
)
Doing it this way, we do not need to remove any of the tools or make any modifications to the agent whatsoever. In
addition, I tested Llama 3.1 70b, and it also works for ROSA. That said, inference time is significantly higher.



Query: Reset the sim

Query: Give me a list of nodes

Query: Give me a list of nodes, topics, services, params, and log files



Notes
The 70b model is significantly slower than the 8b model, but it does work.
The 8b model works well with ROSA, but may not be sufficient for more complex tools.
The 70b model is likely to be more accurate, but is not practical for real-time applications unless you have a very
powerful GPU.

Both models can handle queries that require multiple tool calls.
Time to 1st tool call is usually higher than time to subsequent tool calls for the same query.
Streaming does not work with ChatOllama when using it for agents. This is a LangChain limitation.

Conclusion
For most applications (especially using only the core ROSA class without custom tools), the 8b model is likely to be
sufficient. If you need higher accuracy, you can use the 70b model,
but be prepared for significantly higher latency. If you need to use the 70b model, you may need to consider a more
powerful GPU (A6000 or higher) or a dedicated device with global memory (e.g. Jetson AGX Orin).

Important

Make sure you set temperature=0.0 and num_ctx >= 8192 for both models.



------------------------------------------------------------------------------------------
# What version of Python do I have?
------------------------------------------------------------------------------------------
# https://askubuntu.com/questions/505081/what-version-of-python-do-i-have


$ readlink -f $(which python) | xargs -I % sh -c 'echo -n "%: "; % -V'
/usr/bin/python3.8: Python 3.8.10

But this is still only telling us what our current python resolution is. 
If we were in a Virtualenv (a common Python stack management system) python might resolve to a different version:

$ readlink -f $(which python) | xargs -I % sh -c 'echo -n "%: "; % -V'
/home/jetson/archiconda3/bin/python3.7: Python 3.7.1


$ sudo find / -type f -executable -iname 'python*' -exec file -i '{}' \; | awk -F: '/x-executable; charset=binary/ {print $1}' | xargs readlink -f | sort -u | xargs -I % sh -c 'echo -n "%: "; % -V'

...
/usr/bin/python3.8: Python 3.8.10
/usr/bin/python3.9: Python 3.9.5


$ ls -alith /usr/bin/python3
13369 lrwxrwxrwx 1 root root 9 Mar 13  2020 /usr/bin/python3 -> python3.8

python3 -V
Python 3.8.10

$ pip3 -V
pip 25.0 from /home/jetson/.local/lib/python3.8/site-packages/pip (python 3.8)



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Change the Python3 default version in Ubuntu
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\
# https://unix.stackexchange.com/questions/410579/change-the-python3-default-version-in-ubuntu


sudo update-alternatives --config python
update-alternatives: error: no alternatives for python


sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1
update-alternatives: using /usr/bin/python3.8 to provide /usr/bin/python (python) in auto mode

sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.9 2
update-alternatives: using /usr/bin/python3.9 to provide /usr/bin/python (python) in auto mode


$ sudo update-alternatives --config python
There are 2 choices for the alternative python (providing /usr/bin/python).

  Selection    Path                Priority   Status
------------------------------------------------------------
* 0            /usr/bin/python3.9   2         auto mode
  1            /usr/bin/python3.8   1         manual mode
  2            /usr/bin/python3.9   2         manual mode

Press <enter> to keep the current choice[*], or type selection number: 1       
update-alternatives: using /usr/bin/python3.8 to provide /usr/bin/python (python) in manual mode


sudo update-alternatives --config python
There are 2 choices for the alternative python (providing /usr/bin/python).

  Selection    Path                Priority   Status
------------------------------------------------------------
  0            /usr/bin/python3.9   2         auto mode
* 1            /usr/bin/python3.8   1         manual mode
  2            /usr/bin/python3.9   2         manual mode

Press <enter> to keep the current choice[*], or type selection number: 1


From the comment:

sudo update-alternatives --config python
Will show you an error:

update-alternatives: error: no alternatives for python3 
You need to update your update-alternatives , then you will be able to set your default python version.

sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.4 1
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 10
Then run :

sudo update-alternatives --config python
Set python3.8 as default.

Or use the following command to set python3.8 as default:

sudo update-alternatives  --set python /usr/bin/python3.8










------------------------------------------------------------------------------------------
## I2C install 
------------------------------------------------------------------------------------------
## http://www.yahboom.net/study/Jetson-Orin-NX

sudo apt-get install -y i2c-tools

apt-cache policy i2c-tools
i2c-tools:
  Installed: 4.1-2build2
  Candidate: 4.1-2build2
  Version table:
 *** 4.1-2build2 500
        500 http://ports.ubuntu.com/ubuntu-ports focal/universe arm64 Packages
        100 /var/lib/dpkg/status

sudo i2cdetect -y -r -a 7
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- 3c -- -- -- 
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
70: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

sudo apt-get update
sudo apt-get install -y python3-smbus

wire:

Jetson Orin NX  pin 3（SDA）→oled SDA 

Jetson Orin NX  pin 5（SCL）→oled SCL 

Jetson Orin NX  pin 2（5V）→oled VCC

Jetson Orin NX  pin 6（GND）→oled GND

Import Adafruit_ SSD1306 library This is the OLED library, and you need to download this library when using your own image


pip install Adafruit_SSD1306



/home/jetson/GPIO_test/test_i2c_oled.py
cd /home/jetson/GPIO_test/

cd ~/GPIO_test
sudo python3 test_i2c_oled.py

------------------------------------------------------------------------------------------


Can you help me with upgrade my board to Jetpock 6.2?
You are tech support, right?

I need tech support with upgrade my board to Jetpack 6.2
I want to byu SSD M2 256 Gb from Yahboom, with preinstalled Jetpack 6.2 system.

And I don't solve the problem with Review.
I want to write on AliExpress a Review but I can't, because my order not exist any more. 


Thank you! I will wait!

------------------------------------------------------------------------------------------
## ollama
------------------------------------------------------------------------------------------
# https://github.com/ollama/ollama


## INSTALL:

curl -fsSL https://ollama.com/install.sh | sh

>>> Installing ollama to /usr/local
[sudo] password for silenzio: 
>>> Downloading Linux arm64 bundle
######################################################################## 100,0%
>>> Downloading JetPack 6 components
######################################################################## 100,0%
>>> Creating ollama user...
>>> Adding ollama user to render group...
>>> Adding ollama user to video group...
>>> Adding current user to ollama group...
>>> Creating ollama systemd service...
>>> Enabling and starting ollama service...
Created symlink /etc/systemd/system/default.target.wants/ollama.service -> /etc/systemd/system/ollama.service.
>>> NVIDIA JetPack ready.
>>> The Ollama API is now available at 127.0.0.1:11434.
>>> Install complete. Run "ollama" from the command line.



ollama list

NAME                   ID              SIZE      MODIFIED
       
deepseek-coder:6.7b    ce298d984115    3.8 GB    11 minutes ago    
llava-phi3:3.8b        c7edd7b87593    2.9 GB    3 weeks ago
starcoder2:7b          0679cedc1189    4.0 GB    7 months ago      
tinyllama:1.1b         2644915ede35    637 MB    7 months ago      
orca-mini:3b           2dbd9f439647    2.0 GB    7 months ago      
llava:7b               8dd30f6b0cb1    4.7 GB    7 months ago      
wizardlm2:7b           c9b1aff820f2    4.1 GB    7 months ago      
codellama:7b           8fdf8f752f6e    3.8 GB    7 months ago      
gemma:7b               a72c7f4d0a15    5.0 GB    7 months ago      
phi3:3.8b              d184c916657e    2.2 GB    7 months ago      
qwen2:7b               e0d4e1163c58    4.4 GB    7 months ago      
llama3:8b              365c0bd3c000    4.7 GB    7 months ago 

ollama pull deepseek-coder:6.7b

ollama pull deepseek-r1
ollama pull llava:7b

ollama run deepseek-coder:6.7b


## PRUNE THE MODEL FROM MEM
$ ollama ps
NAME                   ID              SIZE      PROCESSOR    UNTIL                   
deepseek-coder:6.7b    ce298d984115    9.4 GB    100% GPU     About a minute from now  
  
jetson@ubuntu:~$ ollama stop deepseek-coder:6.7b

jetson@ubuntu:~$ ollama ps
NAME    ID    SIZE    PROCESSOR    UNTIL 





J_NX

nano ~/.bashrc
source ~/.bashrc


------------------------------------------------------------------------------------------
## MIPI CSI cameras
------------------------------------------------------------------------------------------
## https://github.com/dusty-nv/jetson-inference/blob/master/docs/aux-streaming.md#mipi-csi-cameras


#MIPI CSI cameras are compact sensors that are acquired directly by the Jetson's hardware CSI/ISP interface. Supported CSI cameras include:

Raspberry Pi Camera Module v2 (IMX219) for Jetson Nano and Jetson Xavier NX
OV5693 camera module from the Jetson TX1/TX2 devkits.
See the Jetson Partner Supported Cameras page for more sensors supported by the ecosystem.

Here's a few examples of launching with a MIPI CSI camera. If you have multiple CSI cameras attached, subsitute the camera number for 0:

$ video-viewer csi://0                        # MIPI CSI camera 0 (substitue other camera numbers)
$ video-viewer csi://0 output.mp4             # save output stream to MP4 file (H.264 by default)
$ video-viewer csi://0 rtp://<remote-ip>:1234 # broadcast output stream over RTP to <remote-ip>
By default, CSI cameras will be created with a 1280x720 resolution. To specify a different resolution, use the --input-width and input-height options. Note that the specified resolution must match one of the formats supported by the camera.

$ video-viewer --input-width=1920 --input-height=1080 csi://0

video-viewer --input-width=640 --input-height=480 csi://0




sudo ldconfig

# How do I clone a specific Git branch?
git clone -b <branch> <remote_repo>
git clone -b ros2 https://github.com/ros/urdf_tutorial.git




















------------------------------------------------------------------------------------------
## OpenCV Python with Gstreamer Backend
------------------------------------------------------------------------------------------
# CONTEXT

import cv2
import re
print('GStreamer support: %s' % re.search(r'GStreamer\:\s+(.*)', cv2.getBuildInformation()).group(1))


$ python3 simple_camera.py
GStreamer support: NO

nvarguscamerasrc sensor-id=0 ! video/x-raw(memory:NVMM), width=(int)1920, height=(int)1080, framerate=(fraction)30/1 ! nvvidconv flip-method=0 ! video/x-raw, width=(int)960, height=(int)540, format=(string)BGRx ! videoconvert ! video/x-raw, format=(string)BGR ! appsink
Error: Unable to open camera

FIX:
# https://docs.nvidia.com/jetson/archives/r35.4.1/DeveloperGuide/text/SD/Multimedia/AcceleratedGstreamer.html


GStreamer-1.0 Installation and Set up
This section explains how to install and configure GStreamer.

Installing GStreamer-1.0
Enter the commands:

$ sudo apt-get update
$ sudo apt-get install gstreamer1.0-tools gstreamer1.0-alsa \
     gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
     gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
     gstreamer1.0-libav
$ sudo apt-get install libgstreamer1.0-dev \
     libgstreamer-plugins-base1.0-dev \
     libgstreamer-plugins-good1.0-dev \
     libgstreamer-plugins-bad1.0-dev
Checking the GStreamer-1.0 Version
Enter the command:

$ gst-inspect-1.0 --version

$ gst-launch-1.0 nvarguscamerasrc sensor_id =0 ! 'video/x-raw(memory:NVMM), width=1280 ,height=720 , format=(string)NV12' ! nvvidconv ! nvegltransform ! nveglglessink

## WORK !


gst-launch-1.0 nvarguscamerasrc sensor_id =0 ! 'video/x-raw(memory:NVMM), width=(int) 1280, height=(int) 720, format=(string)NV12, framerate=(fraction)30/1' ! nvdrmvideosink -e


## INTSALL OpenCV DWITH_GSTREAMER=ON

# https://forums.developer.nvidia.com/t/raspberry-pi-hq-camera-with-jetson-nano/273565/6
# https://discuss.bluerobotics.com/t/opencv-python-with-gstreamer-backend/8842

# <navigate to where you want the opencv-python repo to be stored>

git clone --recursive https://github.com/skvark/opencv-python.git

cd opencv-python
export CMAKE_ARGS="-DWITH_GSTREAMER=ON"

pip install --upgrade pip wheel

# this is the build step - the repo estimates it can take from 5 
#   mins to > 2 hrs depending on your computer hardware

pip wheel . --verbose
pip install opencv_python*.whl

# note, wheel may be generated in dist/ directory, so may have to cd first


## WORK !

print(cv2.getBuildInformation())

Video I/O:
    FFMPEG:                      YES
      avcodec:                   YES (58.54.100)
      avformat:                  YES (58.29.100)
      avutil:                    YES (56.31.100)
      swscale:                   YES (5.5.100)
      avresample:                NO
    GStreamer:                   YES (1.16.3)
    v4l/v4l2:                    YES (linux/videodev2.h)


https://docs.arducam.com/Nvidia-Jetson-Camera/Jetvariety-Camera/Quick-Start-Guide/#1check-and-validate-the-camera-connection

$ v4l2-ctl --list-formats-ext
ioctl: VIDIOC_ENUM_FMT
	Type: Video Capture

	[0]: 'RG10' (10-bit Bayer RGRG/GBGB)
		Size: Discrete 3280x2464
			Interval: Discrete 0.048s (21.000 fps)
		Size: Discrete 3280x1848
			Interval: Discrete 0.036s (28.000 fps)
		Size: Discrete 1920x1080
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 1640x1232
			Interval: Discrete 0.033s (30.000 fps)
		Size: Discrete 1280x720
			Interval: Discrete 0.017s (60.000 fps)


------------------------------------------------------------------------------------------




------------------------------------------------------------------------------------------
## Faster Whisper transcription with CTranslate2
------------------------------------------------------------------------------------------
# for python 3.11 !

conda activate py311

pip install faster-whisper

THEN:
------------------------------------------------------------------------------------------
## CTranslate2 for CUDA support install 
------------------------------------------------------------------------------------------

mkdir build && cd build

#cmake ..
#cmake .. -DWITH_CUDA=ON -DWITH_CUDNN=ON -DWITH_MKL=OFF -DCMAKE_CXX_COMPILER=/tmp/gcc-11/usr/bin/g++-gcc-11.2.0 -DCMAKE_C_COMPILER=/tmp/gcc-11/usr/bin/gcc-11.2.0

cmake .. -DWITH_CUDA=ON -DWITH_CUDNN=ON -DWITH_MKL=OFF 

make -j4
sudo make install
sudo ldconfig


#Compile the Python wrapper
Once the C++ library is installed, you can compile the Python wrapper which uses pybind11. This step requires the Python development libraries to be installed on the system.

cd python
pip3 install -r install_requirements.txt
python3 setup.py bdist_wheel
pip3 install dist/*.whl

#### WORK ! !!
from faster_whisper import WhisperModel
------------------------------------------------------------------------------------------




------------------------------------------------------------------------------------------
## WHISPER
------------------------------------------------------------------------------------------
# https://github.com/openai/whisper
# too sloow


# https://github.com/EtienneAb3d/Whisper4LQR
# Whisper for Low-Quality Recordings

# https://github.com/SYSTRAN/faster-whisper
#Faster-whisper




Convert to ONNX model
https://github.com/openai/whisper/discussions/134
__________









------------------------------------------------------------------------------------------
# INSTALL TORCH
------------------------------------------------------------------------------------------
#export TORCH_INSTALL=https://developer.download.nvidia.com/compute/redist/jp/v50/pytorch/2.1.0a
#export TORCH_INSTALL=https://developer.download.nvidia.cn/compute/redist/jp/v510/pytorch/torch-2.0.0+nv23.05-cp38-cp38-linux_aarch64.whl
export TORCH_INSTALL=https://developer.download.nvidia.cn/compute/redist/jp/v510/pytorch/torch-2.0.0+nv23.05-cp311-cp311-linux_aarch64.whl

export TORCH_INSTALL=https://developer.download.nvidia.cn/compute/redist/jp/v510/pytorch/torch-2.0.0+nv23.05-cp38-cp38-linux_aarch64.whl



## python3 -m pip install --upgrade pip; python3 -m pip install numpy==’1.26.1’; python3 -m pip install --no-cache $TORCH_INSTALL

python3 -m pip install --no-cache $TORCH_INSTALL





pip3 install numpy==1.26.4 ffmpeg-python==0.2.0 transformers==4.41.2 opencv-python-headless >=4.0.1 
pip3 install onnxruntime-gpu >=1.16.0; sys_platform != 'aarch_64'
pip3 install onnx==1.13.1 pillow >=10.1.0 ftfy >=6.0.3 
pip3 install tqdm
pip3 install regex >= 2024.5.15 gdown==5.2.0 sounddevice==0.4.7 sshkeyboard==2.3.1 setuptools-git



------------------------------------------------------------------------------------------
## https://github.com/jkjung-avt/jetson_nano/tree/master
## This repository is a collection of scripts/programs I use to set up the software development environment on my Jetson Nano, TX2, and Xavier NX.
install_tensorflow-2.3.0.sh
install_protobuf-3.9.2.sh
install_opencv-4.5.5.sh
install_bazel-3.7.2.sh
------------------------------------------------------------------------------------------





------------------------------------------------------------------------------------------
# OperationSquirrel
------------------------------------------------------------------------------------------
#### https://github.com/crose72/OperationSquirrel


echo "Checking for updates"
sudo apt-get update
sudo apt-get upgrade


# Reset linker cache
	sudo ldconfig #-v

# To upgrade your GCC version to one that supports C++17 on the Jetson Nano, you can follow these steps. 
# These instructions will guide you through installing GCC 9, which includes full support for C++17 features, 
# including the filesystem library.

Step 1: Add the Toolchain PPA Repository (First, you need to add the repository that contains the newer versions of GCC)
	sudo add-apt-repository ppa:ubuntu-toolchain-r/test
	sudo apt-get update
Step 2: Install CC 9 and G++ 9:
	sudo apt-get install gcc-9 g++-9
Step 3: Set GCC 9 as the Default Compiler
	sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9
	sudo update-alternatives --config gcc
	Select GCC 9 from the list that appears.
Step 4: Verify the GCC Version
	gcc --version
	
# Remove old version of cmake and install a newer one
	sudo apt-get remove cmake  # or your package manager's equivalent command

# Replace <version> with the version number you downloaded
	wget https://cmake.org/files/v3.28/cmake-3.28.0-linux-aarch64.sh
	chmod +x cmake-3.28.0-linux-aarch64.sh
	sudo ./cmake-3.28.0-linux-aarch64.sh --prefix=/usr/local --exclude-subdir

# After an issue with installing vcpkg I upgraded from GCC 7.5 to 8.4
# Error
	vcpkg error [138/212] Building CXX object CMakeFil...glib.dir/src/vcpkg/export.prefab.cpp.o ninja: build stopped: subcommand failed.

#Solution found at https://github.com/microsoft/vcpkg/issues/22533 comment by MarcelNehring
	sudo apt-get install gcc-8 g++-8 # install GCC 8

	sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 # set the version of gcc (or add it to alternatives?)
	sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100 # set the version of g++

# Check available gcc or g++ versions
	update-alternatives --list gcc
	update-alternatives --list g++

# This will make the list appear and the prompt will ask you to choose which one you want
	sudo update-alternatives --config gcc
	sudo update-alternatives --config g++

# Message at end of vcpkg build
	Environment variable VCPKG_FORCE_SYSTEM_BINARIES must be set on arm, s390x, ppc64le and riscv platforms.

# Maybe resolved with
	export VCPKG_FORCE_SYSTEM_BINARIES=1

# Or if you want to make it persistent for the session:
	echo 'export VCPKG_FORCE_SYSTEM_BINARIES=1' >> ~/.bashrc
	source ~/.bashrc

# This should resolve the message you are seeing during the Vcpkg build process. If you face any further issues or have additional questions, feel free to ask!

# Have to install python version later than 3.7
	sudo apt-get install python3.8
	which python3.8
	sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1
	sudo update-alternatives --config python

# OR

# Add configuration for python3 command as opposed to just python
	sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1
	sudo update-alternatives --config python3
	python --version

# PR by Cheney-W might help with installation of pangol using vcpkg
	https://github.com/microsoft/vcpkg/issues/33052




___________________________
Installing SquirrelDefender depenencies
___________________________

Description
This folder contains scripts to automatically install certain dependencies needed for the project, including OpenCV, ORB SLAM3, Jetson Inference, and more on the Jetson Nano and the Jetson Orin Nano. It should also work for other jetson platforms but has not been tested on any other ones.

Installation instructions for Jetson Nano B01, A01, A02
First manually install some swap (try 8GB or more to get you to 14GB)

sudo fallocate -l 4G /mnt/4GB.swap
sudo mkswap /mnt/4GB.swap
sudo swapon /mnt/4GB.swap
        
Then add the following line to the end of /etc/fstab to make the change persistent:
    /mnt/4GB.swap  none  swap  sw 0  0
(Optional if you already have enough ram) Run sudo ./setup-swap.sh

OpenCV 4.5.0 needs about 10 GB (takes about 2 hours) and ORB SLAM3 needs about 14 GB Unless you are on Jetson AGX Xavier, you should mount 4GB of swap space, as training uses up a lot of extra memory.
When prompted, edit the /sbin/dphys-swapfile so that CONF_MAXSWAP=4096 and CONF_SWAPFACTOR=2
When prompted, edit the /etc/dphys-swapfile so that CONF_SWAPSIZE=4096 and CONF_SWAPFACTOR=2
Copy ./Jetson-Nano-Install.sh to your favorite code folder (if you run it in here then everything will download in here, I have a Git or GitHub folder that I use for code stuff)

Reboot the Jetson Nano (included in the script)

Uninstall default OpenCV version sudo apt-get remove --purge *libopencv*

Run chmod +x ./Jetson-Nano-Install.sh

Run sudo ./Jetson-Nano-Install.sh

Unzip and copy the contents of jetson/usr-b01-nano from this repository to 'the respective folders in usr/local

sudo cp -r ./usr-b01-nano/local/include/* /usr/local/include/
sudo cp ./usr-b01-nano/local/lib/* /usr/local/lib/
What this does is move the library and header files to a location where they can be accessed by the whole computer. You are only copying the files for Pangolin and ORB_SLAM3 because they do not have a make install recipe which automatically installs them to these locations. I also had to manually move the header files for SLAM to make sure that code compiled when written outside of the ORB_SLAM3 folder.
Run sudo ldconfig

Installation instructions for Jetson Orin Nano 8GB with Jetpack 5 and Ubuntu-20.04
First manually install some swap

sudo fallocate -l 8G /mnt/8GB.swap
sudo mkswap /mnt/8GB.swap
sudo swapon /mnt/8GB.swap
        
Then add the following line to the end of /etc/fstab to make the change persistent:
    /mnt/8GB.swap  none  swap  sw 0  0
(Optional if you already have enough ram) Run sudo ./setup-swap.sh

OpenCV 4.6.0 needs about 10 GB (takes about 2 hours) and ORB SLAM3 needs about 14 GB Unless you are on Jetson AGX Xavier, you should mount 4GB of swap space, as training uses up a lot of extra memory.
When prompted, edit the /sbin/dphys-swapfile so that CONF_MAXSWAP=4096 and CONF_SWAPFACTOR=2
When prompted, edit the /etc/dphys-swapfile so that CONF_SWAPSIZE=4096 and CONF_SWAPFACTOR=2
Copy ./Jetson-Orin-Install.sh to your favorite code folder (if you run it in here then everything will download in here, I have a Git or GitHub folder that I use for code stuff)

Reboot the Jetson Nano (included in the script)

Uninstall default OpenCV version sudo apt-get remove --purge *libopencv*

Run chmod +x ./Jetson-Orin-Install.sh

Run sudo ./Jetson-Orin-Install.sh

Unzip and copy the contents of jetson/usr-orin-nano from this repository to the respective folders in usr/local

sudo cp -r ./usr-orin-nano/local/include/* /usr/local/include/
sudo cp ./usr-orin-nano/local/lib/* /usr/local/lib/
What this does is move the library and header files to a location where they can be accessed by the whole computer. You are only copying the files for Pangolin and ORB_SLAM3 because they do not have a make install recipe which automatically installs them to these locations. I also had to manually move the header files for SLAM to make sure that code compiled when written outside of the ORB_SLAM3 folder.
Run sudo ldconfig

***If you use a different version of OpenCV then you will need to manually copy your ORB_SLAM3 headers to the usr/local/lib path from where they were created instead of the jetson folder in this repository. This is because they will be linked to different versions of OpenCV

Remove swap
Run sudo ./remove-swap.sh

Removing manually added swap

sudo vim /etc/fstab
    Locate the line that you added for the swap file (/mnt/4GB.swap none swap sw 0 0) and delete that line.
    Save the changes and exit the text editor.

sudo swapoff /mnt/4GB.swap
sudo rm /mnt/4GB.swap





------------------------------------------------------------------------------------------
DOCKER instructions
------------------------------------------------------------------------------------------

## create container 

docker pull <name>

## run

udo docker run -it --name $NAME 


## remove all container or image

sudo docker rm -f $(sudo docker ps -a -q)

sudo docker image remove -f $(sudo docker images -a -q)


docker container prune

------------------------------------------------------------------------------------------
CMake update instructions
------------------------------------------------------------------------------------------

First you will want to update CMake to 3.28, the version we are currently using. The Jetson Nano is arm64 or aarch64 so the appropriate file has been selected. You only need to do this once.

# Remove old version of cmake and install a newer one
	sudo apt-get remove cmake  # or your package manager's equivalent command

# Replace <version> with the version number you downloaded
	wget https://cmake.org/files/v3.28/cmake-3.28.0-linux-aarch64.sh
	chmod +x cmake-3.28.0-linux-aarch64.sh
	sudo ./cmake-3.28.0-linux-aarch64.sh --prefix=/usr/local --exclude-subdir





------------------------------------------------------------------------------------------
# Set vino's password through terminal
gsettings set org.gnome.Vino vnc-password $(echo -n 'mypasswd'|base64)
------------------------------------------------------------------------------------------



==========================================================================================
# GCC MAKE CMAKE INC LIB
==========================================================================================

# https://stackoverflow.com/questions/480764/linux-error-while-loading-shared-libraries-cannot-open-shared-object-file-no-s
Your library is a dynamic library. You need to tell the operating system where it can locate it at runtime.
To do so, we will need to do those easy steps:

Find where the library is placed if you don't know it.

sudo find / -name the_name_of_the_file.so
Check for the existence of the dynamic library path environment variable(LD_LIBRARY_PATH)

echo $LD_LIBRARY_PATH
If there is nothing to be displayed, add a default path value (or not if you wish to)

LD_LIBRARY_PATH=/usr/local/lib
We add the desired path, export it and try the application.

Note that the path should be the directory where the path.so.something is. So if path.so.something is in /my_library/path.so.something, it should be:

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/my_library/



==========================================================================================
# PANGOLIN
==========================================================================================




https://stella-cv.readthedocs.io/en/latest/installation.html#chapter-installation

------------------------------------------------------------------------------------------
# Pangolin Viewer 
------------------------------------------------------------------------------------------

cd /tmp
git clone https://github.com/stevenlovegrove/Pangolin.git
cd Pangolin
git checkout eab3d3449a33a042b1ee7225e1b8b593b1b21e3e
mkdir build && cd build
cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_PANGOLIN_DEPTHSENSE=OFF \
    -DBUILD_PANGOLIN_FFMPEG=OFF \
    -DBUILD_PANGOLIN_LIBDC1394=OFF \
    -DBUILD_PANGOLIN_LIBJPEG=OFF \
    -DBUILD_PANGOLIN_LIBOPENEXR=OFF \
    -DBUILD_PANGOLIN_LIBPNG=OFF \
    -DBUILD_PANGOLIN_LIBTIFF=OFF \
    -DBUILD_PANGOLIN_LIBUVC=OFF \
    -DBUILD_PANGOLIN_LZ4=OFF \
    -DBUILD_PANGOLIN_OPENNI=OFF \
    -DBUILD_PANGOLIN_OPENNI2=OFF \
    -DBUILD_PANGOLIN_PLEORA=OFF \
    -DBUILD_PANGOLIN_PYTHON=OFF \
    -DBUILD_PANGOLIN_TELICAM=OFF \
    -DBUILD_PANGOLIN_UVC_MEDIAFOUNDATION=OFF \
    -DBUILD_PANGOLIN_V4L=OFF \
    -DBUILD_PANGOLIN_ZSTD=OFF \
    ..
make -j4 && sudo make install

...

Install the project...
-- Install configuration: "Release"
-- Up-to-date: /usr/local/include
-- Installing: /usr/local/include/pangolin
-- Installing: /usr/local/include/pangolin/pangolin.h
-- Installing: /usr/local/include/pangolin/platform.h
-- Installing: /usr/local/include/pangolin/compat
........
-- Installing: /usr/local/include/tinyobj
-- Installing: /usr/local/include/tinyobj/tiny_obj_loader.h
-- Installing: /usr/local/lib/libpango_core.so
-- Installing: /usr/local/lib/libpango_display.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_display.so" to ""
-- Installing: /usr/local/lib/libpango_geometry.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_geometry.so" to ""
-- Installing: /usr/local/lib/libpango_glgeometry.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_glgeometry.so" to ""
-- Installing: /usr/local/lib/libpango_image.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_image.so" to ""
-- Installing: /usr/local/lib/libpango_opengl.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_opengl.so" to ""
-- Installing: /usr/local/lib/libpango_packetstream.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_packetstream.so" to ""
-- Installing: /usr/local/lib/libpango_plot.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_plot.so" to ""
-- Installing: /usr/local/lib/libpango_python.so
-- Installing: /usr/local/lib/libpango_scene.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_scene.so" to ""
-- Installing: /usr/local/lib/libpango_tools.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_tools.so" to ""
-- Installing: /usr/local/lib/libpango_vars.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_vars.so" to ""
-- Installing: /usr/local/lib/libpango_video.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_video.so" to ""
-- Installing: /usr/local/lib/libpango_windowing.so
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libpango_windowing.so" to ""
-- Installing: /usr/local/lib/libtinyobj.so

-- Installing: /usr/local/lib/cmake/Pangolin/PangolinConfig.cmake
-- Installing: /usr/local/lib/cmake/Pangolin/PangolinConfigVersion.cmake
-- Installing: /usr/local/lib/cmake/Pangolin/PangolinTargets.cmake
-- Installing: /usr/local/lib/cmake/Pangolin/PangolinTargets-release.cmake

-- Installing: /usr/local/bin/VideoViewer
-- Set non-toolchain portion of runtime path of "/usr/local/bin/VideoViewer" to ""
-- Installing: /usr/local/bin/VideoConvert
-- Set non-toolchain portion of runtime path of "/usr/local/bin/VideoConvert" to ""
-- Installing: /usr/local/bin/VideoJsonPrint
-- Set non-toolchain portion of runtime path of "/usr/local/bin/VideoJsonPrint" to ""
-- Installing: /usr/local/bin/VideoJsonTransform
-- Set non-toolchain portion of runtime path of "/usr/local/bin/VideoJsonTransform" to ""
-- Installing: /usr/local/bin/Plotter
-- Set non-toolchain portion of runtime path of "/usr/local/bin/Plotter" to ""




------------------------------------------------------------------------------------------
# Pangolin build V1 ___WOKR___ON_Jetson_NX_____
------------------------------------------------------------------------------------------

#Install Catch2 on Ubuntu 20.04
#https://www.cyberithub.com/how-to-install-catch2-on-ubuntu-20-04-lts-focal-fossa/
sudo apt update
git clone https://github.com/catchorg/Catch2.git
cd Catch2/
sudo cmake --build build/ --target install


# Get Pangolin
cd '/home/jetson/_packages' 
git clone --recursive https://github.com/stevenlovegrove/Pangolin.git
cd Pangolin

# Install dependencies (as described above, or your preferred method)
## ./scripts/install_prerequisites.sh recommended

cmake -B build
cmake --build build

# with Ninja for faster builds (sudo apt install ninja-build)
## cmake -B build -GNinja
## cmake --build build


Scanning dependencies of target Plotter
[ 97%] Building CXX object tools/Plotter/CMakeFiles/Plotter.dir/main.cpp.o
[ 97%] Linking CXX executable Plotter
[ 97%] Built target Plotter
Scanning dependencies of target VideoViewer
[ 97%] Building CXX object tools/VideoViewer/CMakeFiles/VideoViewer.dir/main.cpp.o
[ 98%] Linking CXX executable VideoViewer
[ 98%] Built target VideoViewer
Scanning dependencies of target ModelViewer
[100%] Building CXX object tools/ModelViewer/CMakeFiles/ModelViewer.dir/main.cpp.o
[100%] Linking CXX executable ModelViewer
[100%] Built target ModelViewer


-- Found PythonInterp: /home/jetson/.cache/pypoetry/virtualenvs/slampy-l4ytyPmJ-py3.9/bin/python3 (found suitable version "3.9.5", minimum required is "3") 
-- Found PythonLibs: /usr/lib/aarch64-linux-gnu/libpython3.8.so (found version "3.8.10") 
-- Found NumPy: /home/jetson/.cache/pypoetry/virtualenvs/slampy-l4ytyPmJ-py3.9/lib/python3.9/site-packages/numpy/_core/include (found version "2.0.2") 
-- Found Boost: /usr/lib/aarch64-linux-gnu/cmake/Boost-1.71.0/BoostConfig.cmake (found version "1.71.0")  
-- Found OpenCV: /home/jetson/opencv4 (found version "4.2.0") 
-- Found OpenGL: /usr/lib/aarch64-linux-gnu/libOpenGL.so  found components: OpenGL 


cd '/home/jetson/_packages/Pangolin/build/examples/SimpleDisplay/' 
./SimpleDisplay
WORK!!


???? 
python3 SimpleDisplay.py
ModuleNotFoundError: No module named 'pypangolin'


<<<<<<<<<<<<<<<<+++++++++++++++++++++++++++++++++++++++

export Pangolin_DIR=/home/jetson/_packages/Pangolin/build

### export OpenCV_DIR=/Users/silenzio/opencv/build_opencv
export OpenCV_DIR=/home/jetson/opencv4

export ORB_SLAM3_DIR=/home/jetson/_packages/ORB_SLAM3/build



JUST REPLACE this:
#find_package(Pangolin REQUIRED)

TO this:
set(Pangolin_DIR /home/jetson/_packages/Pangolin )
set(Pangolin_INCLUDE_DIRS "/home/jetson/_packages/Pangolin/include")
set(Pangolin_LIBRARIES "/home/jetson/_packages/Pangolin/build")


JUST REPLACE this:
#find_package(ORB_SLAM3 REQUIRED)

TO this:
set(ORB_SLAM3_INCLUDE_DIR "/home/jetson/_packages/ORB_SLAM3/include")
set(ORB_SLAM3_LIBRARIES "/home/jetson/_packages/ORB_SLAM3/lib")

then:
sudo cp -r /home/jetson/_packages/ORB_SLAM3/include /usr/include/ORB_SLAM3
sudo ls /usr/include/ORB*

sudo cp -r /home/jetson/_packages/ORB_SLAM3/Thirdparty /usr/include

sudo cp -r /home/jetson/_packages/ORB_SLAM3/Thirdparty/Sophus/sophus /usr/include

sudo cp -r /home/jetson/_packages/ORB_SLAM3/include/CameraModels/* /usr/include





<<<<<<<<<<<<<<<<++++++++++++++++++++++++++++++++


###https://medium.com/@smilesajid14/orbslam3-ros-0f05ee9895d4

####git clone https://github.com/UZ-SLAMLab/ORB_SLAM3.git

https://github.com/thien94/ORB_SLAM3
git clone https://github.com/thien94/ORB_SLAM3.git ORB_SLAM3

# Build
cd ORB_SLAM3
chmod +x build.sh
./build.sh


------------------------------------------------------------------------------------------
# https://github.com/stevenlovegrove/Pangolin/issues/185
# Pangolin build 
------------------------------------------------------------------------------------------

Even after compiling Pangolin I still had the error.
I solved with:
export CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}/path/to/Pangolin/build/src

In /path/to/Pangolin/build/src I had the PangolinConfig.cmake file.

--
git clone https://github.com/stevenlovegrove/Pangolin.git
cd Pangolin
mkdir build
cd build
cmake ..
cmake --build .

Then when I tried to build ORB_SLAM2 once more with:

cd ORB_SLAM2
chmod +x build.sh
./build.sh



------------------------------------------------------------------------------------------
# Pangolin build V2
------------------------------------------------------------------------------------------

echo "Installing Pangolin"

sudo apt install ninja-build

# Building Pangolin https://github.com/stevenlovegrove/Pangolin
git clone --recursive https://github.com/stevenlovegrove/Pangolin.git
cd Pangolin

# Install Pangolin dependencies
./scripts/install_prerequisites.sh -m brew all

# Would like to find a way to install it if possible though
echo "If catch2 isn't found it's OKAY"

# Configure and build
mkdir build
cd build
cmake -gNinja ..
make

cd ../..

echo "Pangolin installed, SUCCESS!"

# Additional libraries (I had to do this manually because of compile errors)
sudo apt-get install libssl-dev
sudo apt-get install libboost-all-dev


------------------------------------------------------------------------------------------
# Pangolin build V3
------------------------------------------------------------------------------------------
git clone https://github.com/stevenlovegrove/Pangolin.git
# pybind11
cd Pangolin && git submodule init && git submodule update && cd ../

sudo apt install cmake pkg-config libeigen3-dev \
                 libgl1-mesa-dev libglew-dev libegl1-mesa-dev \
                 libwayland-dev libxkbcommon-dev wayland-protocols \
                 ffmpeg libavcodec-dev libavutil-dev libavformat-dev \
                 libswscale-dev libavdevice-dev libdc1394-22-dev \
                 libraw1394-dev libjpeg-dev libpng12-dev \
                 libtiff5-dev libopenexr-dev
# python dep
sudo python3 -m pip install numpy pyopengl Pillow pybind11


------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
#ERROR: py:module_ has not been declared #869


sudo git submodule update --init

I solved the problem by replacing the version of Pangolin. The initial version I had was 0.8, and I replaced it with version 0.6, which didn't have this issue.

you should update your pybind11 to v2.11 or before, i just use v2.11 to work good.

___



I solve it. I found Pangolin has a upgrade to version 0.6 and the author make it to 
comply with c++ 17 or something. but orbslam2 reconment to c++ 11.

A higher version Pangolin is not suitble even it is installed.
1st, check the /usr/local/include. is there a signals derectory? if yes, delete it.
2ed, remove Pangolin files and clone 0.5 version codes.
3rd, rebuild it and install it.
to end, build orbslam2 (I was using build.sh).
hope it can help.


---
# Pangolin could not be found because dependency Eigen3 could not be found #1015

I found that changing 
find_package(Eigen3 3.1.0 REQUIRED)
to 
find_package(Eigen3 3.1.0 REQUIRED NO_MODULE)
in CmakeLists.txt
 on my mac solves the problem.
Because Pangolin 0.5 has problems compiling on my laptop, I can only use 0.6. If you use version 0.6 like I do, this might help.

------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------
# Build Pangolin Examples


cd examples/HelloPangolin

mkdir build && cd build && cmake .. && make

./HelloPangolin
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
# Uninstall Pangolin

cd build
sudo make uninstall
------------------------------------------------------------------------------------------


==========================================================================================
# ORB_SLAM3 INSTALL
==========================================================================================


## Linking error in building #904

[ 47%] Linking CXX shared library ../lib/libORB_SLAM3.so
/usr/bin/ld: cannot find -lepoxy::epoxy: No such file or directory
/usr/bin/ld: cannot find -lOpenGL::EGL: No such file or directory
collect2: error: ld returned 1 exit status
make[2]: *** [CMakeFiles/ORB_SLAM3.dir/build.make:600: ../lib/libORB_SLAM3.so] Error 1
make[1]: *** [CMakeFiles/Makefile2:148: CMakeFiles/ORB_SLAM3.dir/all] Error 2
make: *** [Makefile:91: all] Error 2


All dependencies listed in ReadMe are installed. Target C++ version changed to 14, otherwise there were errors connected to Pangoline

cmake_minimum_required(VERSION 3.1)
project(Example)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
# ... Define targets, etc. as usual


--

Solution found. To solve this problem it's need to download file from Pangolin repository and put it in project dir, after that in CMakeList.txt add:

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake_modules/)

...

find_package(OpenGL)
find_package(epoxy REQUIRED)

include_directories(
${PROJECT_SOURCE_DIR}
${PROJECT_SOURCE_DIR}/include
${PROJECT_SOURCE_DIR}/include/CameraModels
${PROJECT_SOURCE_DIR}/Thirdparty/Sophus
${EIGEN3_INCLUDE_DIR}
${Pangolin_INCLUDE_DIRS}
${epoxy_INCLUDE_DIRS}
)

...

target_link_libraries(${PROJECT_NAME}
${OpenCV_LIBS}
${EIGEN3_LIBS}
${Pangolin_LIBRARIES}
${PROJECT_SOURCE_DIR}/Thirdparty/DBoW2/lib/libDBoW2.so
${PROJECT_SOURCE_DIR}/Thirdparty/g2o/lib/libg2o.so
-lboost_serialization
-lcrypto
${epoxy_LIBRARIES}
)
Well done, it works. By the way, the file should be added to the ORB_SLAM3/cmake_modules dir.

Yes, sure, forgot to mention. Fixed this, thank you!






==========================================================================================
# MEDIAPIPE
==========================================================================================


## MediaPipe Python on aarch64 Ubuntu 20.04
https://github.com/jiuqiant/mediapipe_python_aarch64

[Experimental] Only tested on Raspberry Pi 4 and Jeton Xavier NX.

--
... mediapipe-0.8.7.3-cp37-cp37m-macosx_10_15_x86_64.whl 
https://download.csdn.net/download/qq_38161040/77220180?utm_medium=distribute.pc_relevant_download.none-task-download-2~default~OPENSEARCH~Rate-1-77220180-download-89630086.257%5Ev16%5Epc_dl_relevant_base1_b&depth_1-utm_source=distribute.pc_relevant_download.none-task-download-2~default~OPENSEARCH~Rate-1-77220180-download-89630086.257%5Ev16%5Epc_dl_relevant_base1_b&spm=1003.2020.3001.6616.1

... .whl 
https://dashboard.stablebuild.com/pypi-deleted-packages/pkg/mediapipe/0.8.9.1

--
MediaPipe does not offer any official support, library, module build into NVIDIA Jetson as such. there are plugin from the community is quite up-to-date which might help in this context But We don't have a plan to support Jeston and does not provide support in how to use them.

However, We are working towards support of Raspberry Pi and will be part of the upcoming release. Thank you!

https://github.com/anion0278/mediapipe-jetson


---
https://github.com/Melvinsajith/How-to-Install-Mediapipe-in-Jetson-Nano

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
## Enabling the Omnivision OV5647 Linux driver
------------------------------------------------------------------------------------------
# CONTEXT
OV5647 Camera Module connect to Jetson orin NX

https://forums.developer.nvidia.com/t/does-jetson-nano-support-csi-camera-with-sensor-ov5647/74911/6

https://developer.ridgerun.com/wiki/index.php?title=OmniVision_OV5647_Linux_driver_for_Jetson_Nano

## NOT WORK


------------------------------------------------------------------------------------------
## install outline
------------------------------------------------------------------------------------------

##sudo apt-get install outline

https://s3.amazonaws.com/outline-releases/client/linux/stable/Outline-Client.AppImage

chmod u+x Outline-Client.AppImage

./Outline-Client.AppImage
bash: ./Outline-Client.AppImage: cannot execute binary file: Exec format error

## NOT WORK

sudo ln -s /usr/lib/libpango_core.so /usr/lib/libpango_core.so.0	
sudo ln -s /usr/lib/libpango_glgeometry.so  /usr/lib/libpango_glgeometry.so.0  
sudo ln -s /usr/lib/libpango_packetstream.so  /usr/lib/libpango_packetstream.so.0  
sudo ln -s /usr/lib/libpango_tools.so /usr/lib/libpango_tools.so.0
sudo ln -s /usr/lib/libpango_display.so	/usr/lib/libpango_display.so.0
sudo ln -s /usr/lib/libpango_image.so /usr/lib/libpango_image.so.0
sudo ln -s /usr/lib/libpango_plot.so /usr/lib/libpango_plot.so.0
sudo ln -s /usr/lib/libpango_display.so.0 /usr/lib/libpango_display.so.0.0
sudo ln -s /usr/lib/libpangolin.so /usr/lib/libpangolin.so.0		 
sudo ln -s /usr/lib/libpango_python.so /usr/lib/libpango_python.so.0   
sudo ln -s /usr/lib/libpango_video.so /usr/lib/libpango_video.so.0
sudo ln -s /usr/lib/libpango_geometry.so /usr/lib/libpango_geometry.so.0	
sudo ln -s /usr/lib/libpango_opengl.so /usr/lib/libpango_opengl.so.0
sudo ln -s /usr/lib/libpango_scene.so /usr/lib/libpango_scene.so.0
sudo ln -s /usr/lib/libpango_windowing.so /usr/lib/libpango_windowing.so.0


------------------------------------------------------------------------------------------
## JETSON NOT START GUI - "Oh no something went wrong!", but can connect to SSH
------------------------------------------------------------------------------------------

# https://askubuntu.com/questions/1239025/after-upgrade-to-ubuntu-20-04-oh-no-something-went-wrong


# FIX V1:
This will go a long way toward making that "Oh no something went wrong!" sign go away. First, press Ctrl+Alt+F3 to trigger the CLI, and login. Execute the command:

sudo apt-get update && sudo apt-get dist-upgrade 
to continue upgrading. Your machine will install the missing resources, and finish upgrading, and then you just have to clean up and reboot:

sudo apt-get clean && sudo apt-get autoremove && sudo reboot
Best of luck!


X


# FIX V2:

I had the same issue while upgrading my Ubuntu 18.04 to Ubuntu 20.04. some of the packages got crashed up. Mainly it is showing due to interruption of dpkg operations while booting the system.

Here's what I did to resolve this problem.

Firstly, press Ctrl+Alt+F3 together in order to open the terminal, then enter your login credentials and execute these following commands given below:-

sudo apt-get update && sudo apt-get upgrade
sudo dpkg --configure -a
sudo apt-get clean && sudo apt-get autoremove
sudo reboot

This will resolve the problem of dpkg having been interrupted.




sudo reboot 

shutdown

sudo shutdown -P now


sudo find / -name gnome-shell-x11* 2>/dev/null

ps aux --forest 


grep gnome shell 

X11 work 

gnome not start shell...

gnome component fail...




gnome-session-failed 



sudo grep gnome-session-failed -r /etc

sudo grep gnome-session-failed -r /lib


gsd-keyboard.target

systemctl --user status gsd-keyboard

systemctl --user status gnome-shell-x11





-----


$ locale
LANG=en_US.UTF-8
LANGUAGE=en_US:en
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8


$ locale
LANG=en_US.UTF-8
LANGUAGE=en_US:en
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8


# You can also do change the system language interactively using dpkg-reconfigure:
# https://askubuntu.com/questions/133318/how-do-i-change-the-language-via-a-terminal

# RUN
sudo dpkg-reconfigure locales

++++++++++++++++++++++++++++++++++++++++
# https://askubuntu.com/questions/477974/how-to-remove-unnecessary-locales

First type the locale command to print out your current locale configuration. Also, you can use locale -a to display a list of all available locales.

$ locale -a
C
C.UTF-8
en_AG
en_AG.utf8
en_AU.utf8
en_BW.utf8
en_CA.utf8
en_DK.utf8
en_GB.utf8
en_HK.utf8
en_IE.utf8
en_IL
en_IL.utf8
en_IN
en_IN.utf8
en_NG
en_NG.utf8
en_NZ.utf8
en_PH.utf8
en_SG.utf8
en_US
en_US.iso88591
en_US.utf8
en_ZA.utf8
en_ZM
en_ZM.utf8
en_ZW.utf8
POSIX

Cleaning up unused locales
Install localepurge to remove any unwanted languages, while choosing the ones you want to keep. Note that this method will not change the locales settings on your system. It will just purge the locales you have not selected. Use at your own risk.

sudo apt-get install localepurge
After that, you could reboot or try to run source /etc/default/locale.

To reconfigure this, simply enter the following in terminal:

sudo dpkg-reconfigure localepurge



-----
## https://www.reddit.com/r/Ubuntu/comments/1c6dtky/oh_no_something_has_gone_wrong_message_while/
## https://askubuntu.com/questions/856373/how-do-you-completely-remove-ubuntu-desktop-along-with-all-installed-packages-wi

I tried this and it worked:

From the broken screen

Hit : ctrl+shift+f4

Login with user id and pass

Execute:


sudo apt purge ubuntu-session

sudo apt install ubuntu-desktop


And reboot

Hope this is helpful!


---

journalctl




gsettings reset org.gnome.desktop.interface cursor-theme

------
## https://tecadmin.net/installing-lightdm-on-ubuntu/

## Configure Lightdm as Default Display Manager

## https://help.ubuntu.ru/wiki/lightdm

sudo dpkg-reconfigure lightdm 
You will get a list of installed display managers below:

...

Use the keyboard UP+DOWN buttons to select lightdm and then press TAB to select the Ok button and hit Enter.

Lightdm is now the default display manager on your Ubuntu desktop. Next time you will see the Lightdm login screen as shown below screenshot:

...

In case, you still do not see the above screen reboot your system once.

Uninstall Lightdm
Before uninstalling the lightdm, switch back to gdm3 display manager

sudo dpkg-reconfigure gdm3 
Select the gdm3 and hit Ok button.

Now, uninstall the lightdm package from the system.

sudo apt remove lightdm  
sudo apt autoremove

## https://www.reddit.com/r/linux4noobs/comments/ieamsx/cant_boot_ubuntu_2004_after_installing_lightdm/
____________________

## https://discourse.ubuntu.com/t/my-computer-got-an-oh-no-something-has-gone-wrong-error-and-it-also-states-that-i-need-to-contact-a-system-administrator-ubuntu-24-10/52992/37


Looks like there is enough space, most importantly on the root ‘/’ volume.

If you are still getting the “Oh no! Something has gone wrong” screen I assume this is related to problem with Gnome or other desktop related packages. This time, go to the recovery menu, select “network - Enable networking”, and then select the same “root - Drop to root shell prompt” again, and run this command:

apt-get install --reinstall ubuntu-gnome-desktop

Look for errors at the end when it’s done, and link photo(s) if you find any, otherwise reboot and see if it works.


sudo apt update && sudo apt upgrade && sudo snap refresh


------

## https://www.reddit.com/r/Ubuntu/comments/1c6dtky/oh_no_something_has_gone_wrong_message_while/


Ctrl + Alt + F3

log in with cli

Reinstall the Display Manager

sudo apt-get update

sudo apt-get install --reinstall gdm3

sudo dpkg-reconfigure gdm3
sudo reboot


if above not work:

sudo apt-get install --reinstall xorg ubuntu-desktop gnome-shell

sudo reboot

-------------
## https://bbs.archlinux.org/viewtopic.php?id=236559

What is the output of `journalctl -b -u \*gdm\*` to try and put that message in context.

-----

startx gnome-sesson -- :0


XSERVTransSocketUNIXCreateListener: ...SocketCreateListener() failed
_XSERVTransMakeAllCOTSServerListeners: server already running
(EE) 
Fatal server error:
(EE) Cannot establish any listening sockets - Make sure an X server isn't already running(EE) 
(EE) 
Please consult the The X.Org Foundation support 
	 at http://wiki.x.org
 for help. 
(EE) Please also check the log file at "/var/log/Xorg.0.log" for additional information.
(EE) 
(EE) Server terminated with error (1). Closing log file.
X connection to :0 broken (explicit kill or server shutdown).
Couldn't get a file descriptor referring to the console

_____________________________
## https://www.linuxquestions.org/questions/linux-from-scratch-13/gnome-is-not-opening-4175589268/


startx gnome-sesson -- :1


X.Org X Server 1.20.13
X Protocol Version 11, Revision 0
Build Operating System: linux Ubuntu
Current Operating System: Linux ubuntu 5.10.192-tegra #1 SMP PREEMPT Thu Jun 13 20:07:24 PDT 2024 aarch64
Kernel command line: root=/dev/nvme0n1p1 rw rootwait rootfstype=ext4 mminit_loglevel=4 console=ttyTCU0,115200 console=ttyAMA0,115200 firmware_class.path=/etc/firmware fbcon=map:0 net.ifnames=0 nv-auto-config 
Build Date: 11 October 2024  02:23:55PM
xorg-server 2:1.20.13-1ubuntu1~20.04.18 (For technical support please see http://www.ubuntu.com/support) 
Current version of pixman: 0.38.4
	Before reporting problems, check http://wiki.x.org
	to make sure that you have the latest version.
Markers: (--) probed, (**) from config file, (==) default setting,
	(++) from command line, (!!) notice, (II) informational,
	(WW) warning, (EE) error, (NI) not implemented, (??) unknown.
(==) Log file: "/var/log/Xorg.1.log", Time: Tue Feb  4 17:24:55 2025
(==) Using config file: "/etc/X11/xorg.conf"
(==) Using config directory: "/etc/X11/xorg.conf.d"
(==) Using system config directory "/usr/share/X11/xorg.conf.d"
/usr/bin/xterm: No absolute path found for shell: gnome-sesson
xinit: connection to X server lost

waiting for X server to shut down (II) Server terminated successfully (0). Closing log file.

Couldn't get a file descriptor referring to the console

-----------------

## https://www.linuxquestions.org/questions/linux-from-scratch-13/gnome-is-not-opening-4175589268/

systemctl status gdm.service


=======
# FREE SPACE
## https://opensource.com/article/18/7/how-check-free-disk-space-linux

$ df -h 
Filesystem      Size  Used Avail Use% Mounted on
/dev/nvme0n1p1  234G  179G   46G  80% /
none            7.5G     0  7.5G   0% /dev
tmpfs           7.6G   52K  7.6G   1% /dev/shm
tmpfs           1.6G   19M  1.5G   2% /run
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           7.6G     0  7.6G   0% /sys/fs/cgroup
tmpfs           1.6G   16K  1.6G   1% /run/user/1000

# ls -l /var/log -h
-rw-r--r-- 1 root   root  67K Feb  3 23:38 alternatives.log
-rw-r----- 1 root   adm  187K Feb  4 17:06 apport.log
drwxr-xr-x 2 root   root 4.0K Feb  4 17:06 apt
-rw-r----- 1 syslog adm  1.5M Feb  4 17:15 auth.log


++++++++++


$ DISPLAY=:0 gnome-shell --replace

(gnome-shell:2756): Gjs-WARNING **: 21:47:37.032: Some code accessed the property 'CredentialManager' on the module 'credentialManager'. That property was defined with 'let' or 'const' inside the module. This was previously supported, but is not correct according to the ES6 standard. Any symbols to be exported from a module must be defined with 'var'. The property access will work as previously for the time being, but please fix your code anyway.
GNOME Shell-Message: 21:47:38.047: Telepathy is not available, chat integration will be disabled.
GNOME Shell-Message: 21:47:38.250: Failed to create file /run/user/1000/gnome-shell-disable-extensions: Error opening file “/run/user/1000/gnome-shell-disable-extensions”: File exists






https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/6826



Run journalctl -b /usr/bin/gnome-shell.
You can also check

that extensions are enabled: gsettings get org.gnome.shell disable-user-extensions (should be false)
the list of enabled extensions: gnome-extensions list --enabled

details about an extension: gnome-extensions info das<tab>

--

What about

$ gsettings get org.gnome.shell enabled-extensions
$ gsettings get org.gnome.shell disabled-extensions




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
https://itsfoss.com/ubuntu-change-keyboard/

ADD INPUT SOURCE 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

https://www.baeldung.com/linux/console-change-keyboard-layout

localectl list-x11-keymap-layouts

sudo loadkeys fr
sudo loadkeys en




}}}}}}}}}}}}}}}

sudo nano /etc/default/keyboard


XKBLAYOUT=us,ru
XKBVARIANT=,
BACKSPACE=guess



XKBLAYOUT=us
XKBVARIANT=,
BACKSPACE=guess



}}}}}}}}}}}


https://askubuntu.com/questions/342066/how-to-permanently-configure-keyboard



}}}}}}}



$ journalctl | grep yahboom
Feb 04 22:37:01 ubuntu systemd[1]: Started yahboom_oled start service.



ii  language-pack-gnome-ru                       1:20.04+20220818                      all          GNOME translation updates for language Russian
ii  language-pack-gnome-ru-base                  1:20.04+20220818                      all          GNOME translations for language Russian
ii  language-pack-ru                             1:20.04+20220818                      all          translation updates for language Russian
ii  language-pack-ru-base                        1:20.04+20220818                      all          translations for language Russian


-----------------\


$ sudo apt-get upgrade
Reading package lists... Done
Building dependency tree       
Reading state information... Done
Calculating upgrade... Done
The following packages were automatically installed and are no longer required:
  libpaps0 paps
Use 'sudo apt autoremove' to remove them.
The following packages will be upgraded:
  krb5-multidev libc-bin libc-dev-bin libc6 libc6-dbg libc6-dev libgssapi-krb5-2 libgssrpc4 libk5crypto3 libkadm5clnt-mit11
  libkadm5srv-mit11 libkdb5-9 libkrb5-3 libkrb5-dev libkrb5support0 libruby2.7 locales openjdk-8-jdk openjdk-8-jdk-headless openjdk-8-jre
  openjdk-8-jre-headless ruby2.7 syncthing
23 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 79.8 MB of archives.
After this operation, 140 kB of additional disk space will be used.
Do you want to continue? [Y/n] y
Get:1 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libc6-dbg arm64 2.31-0ubuntu9.17 [16.7 MB]
Get:2 https://syncthing-apt.s3.fr-par.scw.cloud syncthing/candidate arm64 syncthing arm64 1.29.3~rc.1 [9,946 kB]
Get:3 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libc6-dev arm64 2.31-0ubuntu9.17 [2,069 kB]
Get:4 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libc-dev-bin arm64 2.31-0ubuntu9.17 [64.2 kB]
Get:5 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libc6 arm64 2.31-0ubuntu9.17 [2,280 kB]
Get:6 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 locales all 2.31-0ubuntu9.17 [3,868 kB]
Get:7 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libc-bin arm64 2.31-0ubuntu9.17 [507 kB]
Get:8 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libkrb5-dev arm64 1.17-6ubuntu4.8 [11.8 kB]
Get:9 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 krb5-multidev arm64 1.17-6ubuntu4.8 [120 kB]
Get:10 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libk5crypto3 arm64 1.17-6ubuntu4.8 [80.7 kB]
Get:11 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libgssapi-krb5-2 arm64 1.17-6ubuntu4.8 [113 kB]
Get:12 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libkrb5-3 arm64 1.17-6ubuntu4.8 [312 kB]
Get:13 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libkrb5support0 arm64 1.17-6ubuntu4.8 [30.7 kB]
Get:14 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libgssrpc4 arm64 1.17-6ubuntu4.8 [52.7 kB]
Get:15 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libkdb5-9 arm64 1.17-6ubuntu4.8 [36.2 kB]
Get:16 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libkadm5srv-mit11 arm64 1.17-6ubuntu4.8 [47.7 kB]
Get:17 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libkadm5clnt-mit11 arm64 1.17-6ubuntu4.8 [36.2 kB]
Get:18 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 libruby2.7 arm64 2.7.0-5ubuntu1.16 [3,367 kB]
Get:19 http://ports.ubuntu.com/ubuntu-ports focal-updates/universe arm64 openjdk-8-jdk arm64 8u442-b06~us1-0ubuntu1~20.04 [4,057 kB]
Get:20 http://ports.ubuntu.com/ubuntu-ports focal-updates/universe arm64 openjdk-8-jdk-headless arm64 8u442-b06~us1-0ubuntu1~20.04 [8,276 kB]
Get:21 http://ports.ubuntu.com/ubuntu-ports focal-updates/universe arm64 openjdk-8-jre arm64 8u442-b06~us1-0ubuntu1~20.04 [65.8 kB]
Get:22 http://ports.ubuntu.com/ubuntu-ports focal-updates/universe arm64 openjdk-8-jre-headless arm64 8u442-b06~us1-0ubuntu1~20.04 [27.7 MB]
Get:23 http://ports.ubuntu.com/ubuntu-ports focal-updates/main arm64 ruby2.7 arm64 2.7.0-5ubuntu1.16 [95.6 kB]                               
Fetched 79.8 MB in 11s (7,208 kB/s)                                                                                                          
debconf: delaying package configuration, since apt-utils is not installed
(Reading database ... 280224 files and directories currently installed.)
Preparing to unpack .../libc6-dbg_2.31-0ubuntu9.17_arm64.deb ...
Unpacking libc6-dbg:arm64 (2.31-0ubuntu9.17) over (2.31-0ubuntu9.16) ...
Preparing to unpack .../libc6-dev_2.31-0ubuntu9.17_arm64.deb ...
Unpacking libc6-dev:arm64 (2.31-0ubuntu9.17) over (2.31-0ubuntu9.16) ...
Preparing to unpack .../libc-dev-bin_2.31-0ubuntu9.17_arm64.deb ...
Unpacking libc-dev-bin (2.31-0ubuntu9.17) over (2.31-0ubuntu9.16) ...
Preparing to unpack .../libc6_2.31-0ubuntu9.17_arm64.deb ...
Unpacking libc6:arm64 (2.31-0ubuntu9.17) over (2.31-0ubuntu9.16) ...
Setting up libc6:arm64 (2.31-0ubuntu9.17) ...
(Reading database ... 280222 files and directories currently installed.)
Preparing to unpack .../locales_2.31-0ubuntu9.17_all.deb ...
Unpacking locales (2.31-0ubuntu9.17) over (2.31-0ubuntu9.16) ...
Preparing to unpack .../libc-bin_2.31-0ubuntu9.17_arm64.deb ...
Unpacking libc-bin (2.31-0ubuntu9.17) over (2.31-0ubuntu9.16) ...
Setting up libc-bin (2.31-0ubuntu9.17) ...
(Reading database ... 280222 files and directories currently installed.)
Preparing to unpack .../00-libkrb5-dev_1.17-6ubuntu4.8_arm64.deb ...
Unpacking libkrb5-dev:arm64 (1.17-6ubuntu4.8) over (1.17-6ubuntu4.7) ...
Preparing to unpack .../01-krb5-multidev_1.17-6ubuntu4.8_arm64.deb ...
Unpacking krb5-multidev:arm64 (1.17-6ubuntu4.8) over (1.17-6ubuntu4.7) ...
Preparing to unpack .../02-libk5crypto3_1.17-6ubuntu4.8_arm64.deb ...
Unpacking libk5crypto3:arm64 (1.17-6ubuntu4.8) over (1.17-6ubuntu4.7) ...
Preparing to unpack .../03-libgssapi-krb5-2_1.17-6ubuntu4.8_arm64.deb ...
Unpacking libgssapi-krb5-2:arm64 (1.17-6ubuntu4.8) over (1.17-6ubuntu4.7) ...
Preparing to unpack .../04-libkrb5-3_1.17-6ubuntu4.8_arm64.deb ...
Unpacking libkrb5-3:arm64 (1.17-6ubuntu4.8) over (1.17-6ubuntu4.7) ...
Preparing to unpack .../05-libkrb5support0_1.17-6ubuntu4.8_arm64.deb ...
Unpacking libkrb5support0:arm64 (1.17-6ubuntu4.8) over (1.17-6ubuntu4.7) ...
Preparing to unpack .../06-libgssrpc4_1.17-6ubuntu4.8_arm64.deb ...
Unpacking libgssrpc4:arm64 (1.17-6ubuntu4.8) over (1.17-6ubuntu4.7) ...
Preparing to unpack .../07-libkdb5-9_1.17-6ubuntu4.8_arm64.deb ...
Unpacking libkdb5-9:arm64 (1.17-6ubuntu4.8) over (1.17-6ubuntu4.7) ...
Preparing to unpack .../08-libkadm5srv-mit11_1.17-6ubuntu4.8_arm64.deb ...
Unpacking libkadm5srv-mit11:arm64 (1.17-6ubuntu4.8) over (1.17-6ubuntu4.7) ...
Preparing to unpack .../09-libkadm5clnt-mit11_1.17-6ubuntu4.8_arm64.deb ...
Unpacking libkadm5clnt-mit11:arm64 (1.17-6ubuntu4.8) over (1.17-6ubuntu4.7) ...
Preparing to unpack .../10-libruby2.7_2.7.0-5ubuntu1.16_arm64.deb ...
Unpacking libruby2.7:arm64 (2.7.0-5ubuntu1.16) over (2.7.0-5ubuntu1.15) ...
Preparing to unpack .../11-openjdk-8-jdk_8u442-b06~us1-0ubuntu1~20.04_arm64.deb ...
Unpacking openjdk-8-jdk:arm64 (8u442-b06~us1-0ubuntu1~20.04) over (8u432-ga~us1-0ubuntu2~20.04) ...
Preparing to unpack .../12-openjdk-8-jdk-headless_8u442-b06~us1-0ubuntu1~20.04_arm64.deb ...
Unpacking openjdk-8-jdk-headless:arm64 (8u442-b06~us1-0ubuntu1~20.04) over (8u432-ga~us1-0ubuntu2~20.04) ...
Preparing to unpack .../13-openjdk-8-jre_8u442-b06~us1-0ubuntu1~20.04_arm64.deb ...
Unpacking openjdk-8-jre:arm64 (8u442-b06~us1-0ubuntu1~20.04) over (8u432-ga~us1-0ubuntu2~20.04) ...
Preparing to unpack .../14-openjdk-8-jre-headless_8u442-b06~us1-0ubuntu1~20.04_arm64.deb ...
Unpacking openjdk-8-jre-headless:arm64 (8u442-b06~us1-0ubuntu1~20.04) over (8u432-ga~us1-0ubuntu2~20.04) ...
Preparing to unpack .../15-ruby2.7_2.7.0-5ubuntu1.16_arm64.deb ...
Unpacking ruby2.7 (2.7.0-5ubuntu1.16) over (2.7.0-5ubuntu1.15) ...
Preparing to unpack .../16-syncthing_1.29.3~rc.1_arm64.deb ...
Unpacking syncthing (1.29.3~rc.1) over (1.29.0~rc.3) ...
Setting up libruby2.7:arm64 (2.7.0-5ubuntu1.16) ...
Setting up locales (2.31-0ubuntu9.17) ...
Generating locales (this might take a while)...
  en_AG.UTF-8... done
  en_AU.UTF-8... done
  en_BW.UTF-8... done
  en_CA.UTF-8... done
  en_DK.UTF-8... done
  en_GB.UTF-8... done
  en_HK.UTF-8... done
  en_IE.UTF-8... done
  en_IL.UTF-8... done
  en_IN.UTF-8... done
  en_NG.UTF-8... done
  en_NZ.UTF-8... done
  en_PH.UTF-8... done
  en_SG.UTF-8... done
  en_US.ISO-8859-1... done
  en_US.UTF-8... done
  en_ZA.UTF-8... done
  en_ZM.UTF-8... done
  en_ZW.UTF-8... done
Generation complete.
Setting up libc6-dbg:arm64 (2.31-0ubuntu9.17) ...
Setting up libkrb5support0:arm64 (1.17-6ubuntu4.8) ...
Setting up openjdk-8-jre-headless:arm64 (8u442-b06~us1-0ubuntu1~20.04) ...
Setting up libk5crypto3:arm64 (1.17-6ubuntu4.8) ...
Setting up syncthing (1.29.3~rc.1) ...
Setting up libkrb5-3:arm64 (1.17-6ubuntu4.8) ...
Setting up libc-dev-bin (2.31-0ubuntu9.17) ...
Setting up ruby2.7 (2.7.0-5ubuntu1.16) ...
Setting up openjdk-8-jre:arm64 (8u442-b06~us1-0ubuntu1~20.04) ...
Setting up openjdk-8-jdk-headless:arm64 (8u442-b06~us1-0ubuntu1~20.04) ...
Setting up libgssapi-krb5-2:arm64 (1.17-6ubuntu4.8) ...
Setting up libc6-dev:arm64 (2.31-0ubuntu9.17) ...
Setting up openjdk-8-jdk:arm64 (8u442-b06~us1-0ubuntu1~20.04) ...
Setting up libgssrpc4:arm64 (1.17-6ubuntu4.8) ...
Setting up libkdb5-9:arm64 (1.17-6ubuntu4.8) ...
Setting up libkadm5srv-mit11:arm64 (1.17-6ubuntu4.8) ...
Setting up libkadm5clnt-mit11:arm64 (1.17-6ubuntu4.8) ...
Setting up krb5-multidev:arm64 (1.17-6ubuntu4.8) ...
Setting up libkrb5-dev:arm64 (1.17-6ubuntu4.8) ...
Processing triggers for mime-support (3.64ubuntu1) ...
Processing triggers for hicolor-icon-theme (0.17-2) ...
Processing triggers for gnome-menus (3.36.0-1ubuntu1) ...
Processing triggers for libc-bin (2.31-0ubuntu9.17) ...
Processing triggers for man-db (2.9.1-1) ...
Processing triggers for desktop-file-utils (0.24-1ubuntu3) ...


