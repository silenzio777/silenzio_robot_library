

------------------------------------------------------------------------------------------
## ROS Melodic and Newer Metapackages
------------------------------------------------------------------------------------------

## https://ros.org/reps/rep-0150.html


The robot metapackage is defined to be core, stable, ROS libraries for any robot hardware. It is the "general robotics" libraries of ROS. It may not contain any GUI dependencies.

- robot:
    extends: [ros_base]
    packages: [control_msgs, diagnostics, executive_smach, filters, geometry,
               joint_state_publisher, kdl_parser, kdl_parser_py,
               robot_state_publisher, urdf, urdf_parser_plugin, xacro]

- viz:
    extends: [ros_base]
    packages: [rqt_common_plugins, rqt_robot_plugins, rviz]

___________

ssl_slam2_ceres_w_cuda

Q____________:
–ï—â–µ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –¥–æ–∫–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã. –ú–Ω–µ –Ω—É–∂–Ω–æ –æ–±—å–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ –∫–æ—Ç–µ–π–Ω–µ—Ä–∞. –û–¥–∏–Ω, –∏—Å—Ö–æ–¥–Ω—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å Ubuntu 20.04 –∏ –ø–æ–¥–¥–µ—Ä—Ö–∫–æ–π CUDA –Ω–∞ Jetson ( —ç—Ç–æ—Ç - nvcr.io/nvidia/l4t-jetpack:r36.3.0 ) –∞ –≤—Ç–æ—Ä–æ–π —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–π ROS1 Noetic ( —Ç–∞–∫–æ–π - ros:noetic-ros-base as noetic_rclis2_ssl_slam2_cuda ). –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –æ–¥–Ω–æ–º Dockerfile, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è docker compose?

A____________:
ChatGPT said:
–î–∞, –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —ç—Ç–∏ –¥–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –æ–¥–Ω–æ–º Dockerfile, –Ω–æ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ Docker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ FROM –≤ –æ–¥–Ω–æ–º —Å–ª–æ–µ (–±–µ–∑ docker-compose). –û–¥–Ω–∞–∫–æ, –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–∏–π, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.

üîπ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å nvcr.io/nvidia/l4t-jetpack:r36.3.0 –∫–∞–∫ –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑
–ü–æ—Å–∫–æ–ª—å–∫—É —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ Jetson –∏ –Ω—É–∂–¥–∞–µ—à—å—Å—è –≤ CUDA, –ª—É—á—à–µ –≤–∑—è—Ç—å NVIDIA JetPack –∫–∞–∫ –æ—Å–Ω–æ–≤—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ROS Noetic –≤—Ä—É—á–Ω—É—é.

üìå Dockerfile: JetPack + ROS Noetic


# 1Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ - NVIDIA JetPack –¥–ª—è Jetson
FROM nvcr.io/nvidia/l4t-jetpack:r36.3.0 AS base

# 2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ROS Noetic
RUN apt update && apt install -y \
    lsb-release \
    curl \
    gnupg2 \
    && sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' \
    && curl -sSL 'https://raw.githubusercontent.com/ros/rosdistro/master/ros.key' | apt-key add - \
    && apt update && apt install -y \
    ros-noetic-ros-base \
    python3-rosdep \
    python3-rosinstall \
    python3-rosinstall-generator \
    python3-wstool \
    build-essential \
    && rosdep init \
    && rosdep update

# 3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ ROS
RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc

# 4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
RUN apt install -y \
    python3-catkin-tools \
    python3-pip \
    && pip3 install --upgrade pip

# 5Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏–º OpenCV, PCL, –∏ –¥—Ä—É–≥–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
RUN apt install -y \
    libopencv-dev \
    pcl-tools \
    && apt clean

# 6Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è SLAM –∏ Realsense (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
RUN apt install -y \
    librealsense2-dev \
    ros-noetic-rgbd-launch \
    ros-noetic-realsense2-camera

# 7Ô∏è‚É£ –í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
CMD ["/bin/bash"]


–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ª—É—á—à–µ?
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ROS Noetic —Å—Ç–∞–≤–∏—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ JetPack, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ä–µ–¥—É.
‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–æ—Ñ—Ç, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –º—É—Å–æ—Ä–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
‚úÖ –ì–∏–±–∫–æ—Å—Ç—å: –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SLAM, Realsense –∏ –¥—Ä.).


–ö–∞–∫ —Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä?
1Ô∏è‚É£ –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

docker build -t jetson_ros_noetic .
2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Å GPU –∏ ROS

docker run -it --runtime nvidia --network host --privileged jetson_ros_noetic
(–û–ø—Ü–∏—è --runtime nvidia –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É GPU –Ω–∞ Jetson)

üîπ –í—ã–≤–æ–¥
üöÄ –¢—ã –º–æ–∂–µ—à—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –æ–¥–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É—è NVIDIA JetPack –∫–∞–∫ –æ—Å–Ω–æ–≤—É –∏ –≤—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∏–≤ ROS Noetic.
üîß –≠—Ç–æ –¥–∞—Å—Ç —Ç–µ–±–µ –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É CUDA.

–ü–æ–ø—Ä–æ–±—É–π –∏ –Ω–∞–ø–∏—à–∏, –µ—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã! üòä



Q_________:

–û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –∏ —Å–¥–µ–ª–∞—é. –¢–æ–ª—å–∫–æ –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ROS1 - Noetic Desktop —Å–æ –≤—Å–µ–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏ —Ç–∏–ø–∞ rviz –∏ –ø—Ä. –ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å? –ú–æ–∂–µ—à—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å Dockerfile?

A_________:
ChatGPT said:
–•–æ—Ä–æ—à–æ! –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é ROS1 Noetic Desktop, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏–º ros-noetic-ros-base –Ω–∞ ros-noetic-desktop-full. –≠—Ç–æ –≤–∫–ª—é—á–∏—Ç RViz, rqt, Gazebo, MoveIt! –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.


–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Dockerfile: JetPack + –ü–æ–ª–Ω—ã–π ROS Noetic
dockerfile

# 1Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ - NVIDIA JetPack –¥–ª—è Jetson
FROM nvcr.io/nvidia/l4t-jetpack:r36.3.0 AS base

# 2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt update && apt install -y \
    lsb-release \
    curl \
    gnupg2 \
    && sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' \
    && curl -sSL 'https://raw.githubusercontent.com/ros/rosdistro/master/ros.key' | apt-key add - \
    && apt update 

# 3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ **–ø–æ–ª–Ω–æ–≥–æ ROS Noetic**
RUN apt install -y ros-noetic-desktop-full

# 4Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rosdep (–Ω—É–∂–Ω–∞ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
RUN rosdep init && rosdep update

# 5Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ROS
RUN apt install -y \
    python3-rosdep \
    python3-rosinstall \
    python3-rosinstall-generator \
    python3

______



–£ –º–µ–Ω—è Jetpack 6.2 —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å ceres-solver —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Jetson Orin NX, –∏—Å–ø–æ–ª—å–∑—É—è JetPack 6.2, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ Ubuntu 20.04. JetPack 6.2 –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è CUDA 12.6 –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. 
NVIDIA DOCUMENTATION

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å Docker-–æ–±—Ä–∞–∑ –¥–ª—è —ç—Ç–æ–π —Å—Ä–µ–¥—ã, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

–í—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞: NVIDIA –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è Jetson —á–µ—Ä–µ–∑ NGC (NVIDIA GPU Cloud). –î–ª—è JetPack 6.2 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑ l4t-jetpack, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–µ—Ä—Å–∏–∏ JetPack 6.2. 
NVIDIA CATALOG

–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:

docker pull nvcr.io/nvidia/l4t-jetpack:r36.3.0


–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–µ–≥ r36.3.0 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–µ—Ä—Å–∏–∏ JetPack 6.2. 
NVIDIA CATALOG

–°–æ–∑–¥–∞–Ω–∏–µ Dockerfile: –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª Dockerfile —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:


FROM nvcr.io/nvidia/l4t-jetpack:r36.3.0

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    libgoogle-glog-dev \
    libgflags-dev \
    libatlas-base-dev \
    libeigen3-dev \
    python3-dev \
    ninja-build

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ SuiteSparse –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü
RUN apt-get install -y libsuitesparse-dev

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ Ceres Solver
WORKDIR /opt
RUN git clone https://ceres-solver.googlesource.com/ceres-solver && \
    cd ceres-solver && git checkout $(git describe --tags)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–±–æ—Ä–∫–∏
WORKDIR /opt/ceres-solver/build

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Å–±–æ—Ä–∫–∞
RUN cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=ON \
    -DCXX11_ABI=ON \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_TESTING=OFF \
    -DCERES_THREADING_MODEL=CXX_THREADS \
    -DCERES_USE_CUDA=ON \
    -GNinja && \
    ninja -j$(nproc) && \
    ninja install



–°–±–æ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑–∞: –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –Ω–∞—Ö–æ–¥—è—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å Dockerfile:

docker build -t ceres-jetson:6.2 .
–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPU:

docker run --runtime nvidia --rm -it ceres-jetson:6.2 bash
–ò–ª–∏, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ–ª–µ–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é Docker:

docker run --gpus all --rm -it ceres-jetson:6.2 bash
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏: –í–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ceres-solver –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–ª–∏–Ω–∫–æ–≤–∞–Ω —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ CUDA:

ldd /usr/local/lib/libceres.so | grep cuda
–ï—Å–ª–∏ –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ libcudart.so, –∑–Ω–∞—á–∏—Ç, —Å–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.

–í–∞–∂–Ω–æ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã NVIDIA –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å—Ä–µ–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker –∏ CUDA. JetPack 6.2 –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è NVIDIA Container Runtime, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPU –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö Jetson. 
NVIDIA DOCUMENTATION

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!













export TORCH_INSTALL=path/to/torch-2.7.0+nv25.02-cp310-cp310-linux_aarch64.whl


export TORCH_INSTALL=https://developer.download.nvidia.com/compute/redist/jp/v61/pytorch/torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl




export TORCH_INSTALL=path/to/torch-2.7.0a0+6c54963f75+nv23.12-cp38-cp38-linux_aarch64.whl

python3 -m pip install --upgrade pip; python3 -m pip install numpy==‚Äô1.26.1‚Äô; python3 -m pip install --no-cache $TORCH_INSTALL


_________


------------------------------------------------------------------------------------------
## ceres-solver INSTALL UBUNTU 22
------------------------------------------------------------------------------------------
## http://ceres-solver.org/installation.html

git clone https://ceres-solver.googlesource.com/ceres-solver


#tar zxf ceres-solver-2.2.0.tar.gz
mkdir ceres-bin
cd ceres-bin


cmake ../ceres-solver-2.2.0 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCERES_USE_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES="87" -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.6/bin/nvcc -DCUDA_ARCH_BIN="87" -DCUDA_ARCH_PTX=""


cmake ../ceres-solver-2.2.0 \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=ON \
    -DCERES_USE_CUDA=ON \
    -DCMAKE_CUDA_ARCHITECTURES="" \
    -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \
    -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.6/bin/nvcc \
    -GNinja

make -j7

Install the project...
-- Install configuration: "Release"
-- Up-to-date: /usr/local/lib/cmake/Ceres/FindSuiteSparse.cmake
-- Up-to-date: /usr/local/lib/cmake/Ceres/FindMETIS.cmake
-- Installing: /usr/local/lib/libceres_cuda_kernels.a
-- Installing: /usr/local/lib/libceres.so.2.2.0
-- Installing: /usr/local/lib/libceres.so.4
-- Set non-toolchain portion of runtime path of "/usr/local/lib/libceres.so.2.2.0" to ""
-- Installing: /usr/local/lib/libceres.so
-- Up-to-date: /usr/local/include/ceres/autodiff_cost_function.h
...
-- Up-to-date: /usr/local/include/ceres/version.h
-- Up-to-date: /usr/local/include/ceres/internal/array_selector.h

-- Up-to-date: /usr/local/include/ceres/internal/variadic_evaluate.h
-- Up-to-date: /usr/local/include
-- Up-to-date: /usr/local/include/ceres
-- Up-to-date: /usr/local/include/ceres/internal
-- Installing: /usr/local/include/ceres/internal/config.h
-- Installing: /usr/local/include/ceres/internal/export.h
-- Old export file "/usr/local/lib/cmake/Ceres/CeresTargets.cmake" will be replaced.  Removing files [/usr/local/lib/cmake/Ceres/CeresTargets-release.cmake].
-- Installing: /usr/local/lib/cmake/Ceres/CeresTargets.cmake
-- Installing: /usr/local/lib/cmake/Ceres/CeresTargets-release.cmake
-- Installing: /usr/local/lib/cmake/Ceres/CeresConfig.cmake
-- Installing: /usr/local/lib/cmake/Ceres/CeresConfigVersion.cmake

sudo make install

## CHECK CUDA:

cat CMakeCache.txt | grep CERES_USE_CUDA

CERES_USE_CUDA:BOOL=ON

ldd /usr/local/lib/libceres.so | grep 

ldd /usr/local/lib/libceres.so | grep cuda
	libcublas.so.12 => /usr/local/cuda/targets/aarch64-linux/lib/libcublas.so.12 (0x0000ffff8cd90000)
	libcudart.so.12 => /usr/local/cuda/targets/aarch64-linux/lib/libcudart.so.12 (0x0000ffff8ccb0000)
	libcusolver.so.11 => /usr/local/cuda/targets/aarch64-linux/lib/libcusolver.so.11 (0x0000ffff84250000)
	libcusparse.so.12 => /usr/local/cuda/targets/aarch64-linux/lib/libcusparse.so.12 (0x0000ffff711f0000)
	libcublasLt.so.12 => /usr/local/cuda/targets/aarch64-linux/lib/libcublasLt.so.12 (0x0000ffff57110000)
	libnvJitLink.so.12 => /usr/local/cuda/targets/aarch64-linux/lib/libnvJitLink.so.12 (0x0000ffff54180000)


### BUILD DONE 



||||||||||||||||||||||||||||

#cmake ../ceres-solver-2.2.0

...........................................................................
GPU							Compute Capability
Jetson AGX Orin, Jetson Orin NX, Jetson Orin Nano	8.7
...........................................................................

cd /usr/local/cuda-12.6/bin/
./nvcc --version

nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2024 NVIDIA Corporation
Built on Wed_Aug_14_10:14:07_PDT_2024
Cuda compilation tools, release 12.6, V12.6.68
Build cuda_12.6.r12.6/compiler.34714021_0

...........................................................................


### cmake ../ -B build -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.6/bin/nvcc -DTCNN_CUDA_ARCHITECTURES=61

### ADD set (CMAKE_CUDA_COMPILER /usr/local/cuda-12.6/bin/nvcc) to CMakeLists.

## >>> https://github.com/NVlabs/instant-ngp/issues/1142
cmake ../ceres-solver-2.2.0 -DCMAKE_CUDA_ARCHITECTURES="native" -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.6/bin/nvcc

## CMAKE DONE!!

make -j4
## DONE
make test

# Optionally install Ceres, it can also be exported using CMake which
# allows Ceres to be used without requiring installation, see the documentation
# for the EXPORT_BUILD_DIR option for more information.

sudo make install

Install the project...
-- Install configuration: "Release"
-- Installing: /usr/local/lib/cmake/Ceres/FindSuiteSparse.cmake
-- Installing: /usr/local/lib/cmake/Ceres/FindMETIS.cmake
-- Installing: /usr/local/lib/libceres_cuda_kernels.a
-- Installing: /usr/local/lib/libceres.a

-- Installing: /usr/local/include/ceres/autodiff_cost_function.h
-- Installing: /usr/local/include/ceres/autodiff_first_order_function.h

-- Up-to-date: /usr/local/include
-- Up-to-date: /usr/local/include/ceres
-- Up-to-date: /usr/local/include/ceres/internal
-- Installing: /usr/local/include/ceres/internal/config.h
-- Installing: /usr/local/include/ceres/internal/export.h

-- Installing: /usr/local/lib/cmake/Ceres/CeresTargets.cmake
-- Installing: /usr/local/lib/cmake/Ceres/CeresTargets-release.cmake
-- Installing: /usr/local/lib/cmake/Ceres/CeresConfig.cmake
-- Installing: /usr/local/lib/cmake/Ceres/CeresConfigVersion.cmake


## INSTALL DONE OK

_______

docker build -t noetic_test --target noetic_test . 



___

Generate CDI Spec for GPU/PVA:

Ensure NVIDIA Container Toolkit is installed on the Jetson device. Use the following command to generate the CDI spec:

sudo nvidia-ctk cdi generate --mode=csv --output=/etc/cdi/nvidia.yaml

Install pva-allow-2 package:

# Add Jetson public APT repository

sudo apt-get update
sudo apt-get install software-properties-common
sudo apt-key adv --fetch-key https://repo.download.nvidia.com/jetson/jetson-ota-public.asc
sudo add-apt-repository 'deb https://repo.download.nvidia.com/jetson/common r36.4 main'
sudo apt-get update
sudo apt-get install -y pva-allow-2



ldd /usr/local/lib/libceres.so | grep cuda



------------------------------------------------------------------------------------------
## ROS1 - ROS2 BRIDGE 
------------------------------------------------------------------------------------------
## https://hub.docker.com/r/arm64v8/ros/



ROS 1 Bridge
To ease ROS 2 migration, ros1_bridge‚Å† is a ROS 2 package that provides bidirectional communication between ROS 1 and ROS 2. As a minimal example, given the ROS 2 Dockerfile above, we'll create the ROS 1 equivalent below, and name the Dockerfile appropriately.

FROM arm64v8/ros:noetic

# install ros package
RUN apt-get update && apt-get install -y \
      ros-${ROS_DISTRO}-ros-tutorials \
      ros-${ROS_DISTRO}-common-tutorials && \
    rm -rf /var/lib/apt/lists/*

# launch ros package
CMD ["roslaunch", "roscpp_tutorials", "talker_listener_launch"]
The compose file bellow spawns services for both talker listener demos while connecting the two via a dynamic bridge. You may then view the log output from both pairs of talker and listener nodes cross talking over the /chatter topic.

version: '3'

services:
  ros1:
    build:
      context: ./
      dockerfile: ros1.Dockerfile

  ros2:
    build:
      context: ./
      dockerfile: ros2.Dockerfile

  bridge:
    image: ros:foxy-ros1-bridge
    environment:
      - "ROS_HOSTNAME=bridge"
      - "ROS_MASTER_URI=http://ros1:11311"
    command: ros2 run ros1_bridge dynamic_bridge




------------------------------------------------------------------------------------------
## noetic_ssl_slam2
------------------------------------------------------------------------------------------

## CERES-SOLVER WITH CUDA

–ö–æ–º–ø–∏–ª—è—Ü–∏—è ceres-solver –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CUDA —Ö–æ—Å—Ç-–º–∞—à–∏–Ω—ã
–ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ—Ç CUDA, –Ω–æ —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CUDA —Å —Ö–æ—Å—Ç–∞ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏, –Ω—É–∂–Ω–æ:
1Ô∏è‚É£ –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å CUDA –∏–∑ —Ö–æ—Å—Ç-–º–∞—à–∏–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
2Ô∏è‚É£ –ü–µ—Ä–µ–¥–∞—Ç—å –ø—É—Ç—å –∫ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É nvcc —Ö–æ—Å—Ç-—Å–∏—Å—Ç–µ–º—ã –≤ CMake
3Ô∏è‚É£ –ü–µ—Ä–µ–¥–∞—Ç—å –≤ CMake –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É CUDA –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

1. –°–æ–∑–¥–∞–µ–º Dockerfile
–≠—Ç–æ—Ç Dockerfile –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫, —á—Ç–æ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç CUDA –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –∞ –±–µ—Ä–µ—Ç –µ—ë –∏–∑ —Ö–æ—Å—Ç–∞.

Dockerfile

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Ubuntu 20.04 –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–∞–∑—ã
FROM ubuntu:20.04 AS ceres_cuda

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN apt update && apt install -y \
    build-essential cmake git libgoogle-glog-dev libgflags-dev \
    libeigen3-dev libatlas-base-dev libsuitesparse-dev \
    wget curl lsb-release sudo gnupg2

# –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º Ceres-Solver
WORKDIR /opt
RUN git clone https://ceres-solver.googlesource.com/ceres-solver --branch 2.2.0 --depth=1

WORKDIR /opt/ceres-solver
RUN mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DBUILD_SHARED_LIBS=ON \
             -DCERES_USE_CUDA=ON \
             -DCMAKE_CUDA_ARCHITECTURES="native" \
             -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \
             -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc \
             -DCUDA_ARCH_BIN="native" \
             -DCUDA_ARCH_PTX="" && \
    make -j$(nproc) && make install


3. –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA
docker run -it --runtime nvidia --network host \
    -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix \
    ceres_solver_cuda

üìå 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ ceres-solver
–í–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏:

ldd /usr/local/lib/libceres.so | grep cuda
–ï—Å–ª–∏ ceres-solver —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA, —Ç—ã —É–≤–∏–¥–∏—à—å —Å—Ç—Ä–æ–∫–∏ —Å libcuda.so –∏ libcudart.so.

üî• –ò—Ç–æ–≥
‚úÖ CUDA –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CUDA —Å —Ö–æ—Å—Ç–∞.
‚úÖ CMake –±–µ—Ä–µ—Ç nvcc –∏ –ø—É—Ç–∏ –∏–∑ —Ö–æ—Å—Ç-—Å–∏—Å—Ç–µ–º—ã (-DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc).
‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å --runtime nvidia.


## BUILD:


####### docker build -t r1_nv_rs_ssl_slam_ceres_cuda --target r1_nv_rs_ssl_slam_ceres_cuda --build-arg LIBRS_VERSION=2.50.0 . 

2. –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
–ó–∞–ø—É—Å—Ç–∏ docker build, –ø–µ—Ä–µ–¥–∞–≤ –≤ –Ω–µ–≥–æ –¥—Ä–∞–π–≤–µ—Ä—ã CUDA —Å —Ö–æ—Å—Ç–∞:

docker build --network=host --build-arg NVIDIA_DRIVER_CAPABILITIES=compute,utility -t r1_nv_rs_ssl_slam_ceres_cuda  --build-arg LIBRS_VERSION=2.50.0 .

‚òù –ü–æ—á–µ–º—É --network=host?
–ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ CUDA –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏.

docker build --network=host --build-arg NVIDIA_DRIVER_CAPABILITIES=compute,utility -t r1_nv_rs_ssl_slam_ceres_cuda --target r1_nv_rs_ssl_slam_ceres_cuda --build-arg LIBRS_VERSION=2.50.0 . 


## RUN:

docker run -it --runtime nvidia --net=host --privileged --env="DISPLAY=$DISPLAY" --volume="${XAUTHORITY}:/root/.Xauthority" --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/_dataset:/_dataset -v ~/catkin_ws:/catkin_ws r1_nv_rs_ssl_slam_ceres_cuda bash

üìå 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ ceres-solver
–í–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏:

ldd /usr/local/lib/libceres.so | grep cuda
–ï—Å–ª–∏ ceres-solver —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA, —Ç—ã —É–≤–∏–¥–∏—à—å —Å—Ç—Ä–æ–∫–∏ —Å libcuda.so –∏ libcudart.so.








docker build -t noetic_rs2_ssl_slam2_cuda --target noetic_rs2_ssl_slam2_cuda --build-arg LIBRS_VERSION=2.50.0 . 


–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª CUDA —Å —Ö–æ—Å—Ç-–º–∞—à–∏–Ω—ã?
–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±—Ä–∞–ª CUDA —Å —Ö–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–∞ —Ö–æ—Å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥—Ä—É–≥–∞—è –≤–µ—Ä—Å–∏—è CUDA), –∑–∞–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º CUDA:

docker run --gpus all --rm -it \
    -v /usr/local/cuda:/usr/local/cuda \
    ceres-jetson:6.2 bash

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–ª–∞–≥?
–û–Ω –º–æ–Ω—Ç–∏—Ä—É–µ—Ç /usr/local/cuda –∏–∑ —Ö–æ—Å—Ç-–º–∞—à–∏–Ω—ã –≤–Ω—É—Ç—Ä—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ CMake —É–≤–∏–¥–∏—Ç —Ö–æ—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é CUDA, –∞ –Ω–µ —Ç—É, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.


–ï—Å–ª–∏ –≤ –≤—ã–≤–æ–¥–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ CUDA-—Ñ—É–Ω–∫—Ü–∏–∏ (libcudart, libcusolver –∏ —Ç. –¥.), –∑–Ω–∞—á–∏—Ç, —Å–±–æ—Ä–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.

cuda_block_sparse_crs_view.cc.o:
nm: cuda_partitioned_block_sparse_crs_view.cc.o: no symbols
cuda_partitioned_block_sparse_crs_view.cc.o:
nm: cuda_block_structure.cc.o:
cuda_block_structure.cc.o: no symbols
nm: cuda_sparse_matrix.cc.o:
cuda_sparse_matrix.cc.o: no symbols
nm: cuda_vector.cc.o:





docker run -it --net=host --privileged --env="DISPLAY=$DISPLAY" --volume="${XAUTHORITY}:/root/.Xauthority" --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/_dataset:/_dataset -v ~/catkin_ws:/catkin_ws noetic_rs2_ssl_slam2_cuda bash


docker run --gpus all -it --net=host --privileged --env="DISPLAY=$DISPLAY" --volume="${XAUTHORITY}:/root/.Xauthority" --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/_dataset:/_dataset -v ~/catkin_ws:/catkin_ws noetic_rs2_ssl_slam2_cuda bash


docker run --runtime nvidia -it --net=host --privileged --env="DISPLAY=$DISPLAY" --volume="${XAUTHORITY}:/root/.Xauthority" --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/_dataset:/_dataset -v ~/catkin_ws:/catkin_ws noetic_rs2_ssl_slam2_cuda bash


--runtime nvidia

docker run --gpus all --rm -it ceres-jetson:6.2 bash


source ./devel/setup.bash

roslaunch ssl_slam2 ssl_slam2_mapping.launch


_____

## ADD L515 CAMERA WRAPPER 

cd /catkin_ws/src
git clone https://github.com/IntelRealSense/realsense-ros/archive/refs/tags/2.2.22.zip

git clone -b noetic https://github.com/ros-perception/vision_opencv

cd /catkin_ws

catkin_make

cd /foxy/l515_ws
. install/local_setup.bash
ros2 launch realsense2_camera rs_launch.py

ros2 run image_transport republish raw in:=/camera/color/image_raw raw out:=/camera/image_raw

source /opt/ros/${ROS_DISTRO}/setup.bash
ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 1 base_link camera_link





docker run -it --net=host --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/temp:/temp dustynv/ros:noetic-desktop-l4t-r35.4.1 bash

docker build -t noetic_rs2_ssl_slam2 --target noetic_rs2_ssl_slam2 --build-arg LIBRS_VERSION=2.50.0 . 

 
docker run -it --net=host --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/catkin_ws:/catkin_ws noetic_rs2_ssl_slam2 bash

@@@@@@@@
docker run -it --net=host --privileged --env="DISPLAY=$DISPLAY" --volume="${XAUTHORITY}:/root/.Xauthority" --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/_dataset:/_dataset -v ~/catkin_ws:/catkin_ws noetic_rs2_ssl_slam2 bash


source /opt/ros/noetic/setup.bash

cd /catkin_ws
git clone https://github.com/wh200720041/ssl_slam2.git

## FIX:
cd src/
git clone https://github.com/ros/geometry.git

catkin_make

## BUILD DONE!!11

[ 98%] Built target ssl_slam2_odom_estimation_mapping_node
[100%] Linking CXX executable /catkin_ws/devel/lib/ssl_slam2/ssl_slam2_map_optimization_node
[100%] Built target ssl_slam2_map_optimization_node
root@jetsonnx:/catkin_ws# 


## RUN:


## T1:
#source /cart_ws/devel/setup.bash
cd /catkin_ws/
source ./devel/setup.bash

roslaunch ssl_slam2 ssl_slam2_mapping.launch

Warning: TF_REPEATED_DATA ignoring data with redundant timestamp for frame base_link (parent map) at time 1613437933.991762 according to authority unknown_publisher
         at line 278 in /tmp/binarydeb/ros-noetic-tf2-0.7.7/src/buffer_core.cpp
[ WARN] [1740915061.329234262, 1613437933.991762299]: TF_REPEATED_DATA ignoring data with redundant timestamp for frame base_link (parent map) at time 1613437933.991762 according to authority unknown_publisher


## T2:
docker run -it --net=host --privileged --env="DISPLAY=$DISPLAY" --volume="${XAUTHORITY}:/root/.Xauthority" --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/_dataset:/_dataset -v ~/catkin_ws:/catkin_ws noetic_rs2_ssl_slam2 bash

source ./devel/setup.bash
rosrun pcl_ros pointcloud_to_pcd input:=/map



## T3:
docker run -it --net=host --privileged --env="DISPLAY=$DISPLAY" --volume="${XAUTHORITY}:/root/.Xauthority" --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/_dataset:/_dataset -v ~/catkin_ws:/catkin_ws noetic_rs2_ssl_slam2 bash

source ./devel/setup.bash
rosservice call /save_map

[ERROR] [1740915101.663954254, 1613437933.991762299]: Exception thrown while processing service call: : [pcl::PCDWriter::writeASCII] Could not open file for writing!
[pcl::KdTreeFLANN::setInputCloud] Cannot create a KDTree with an empty input cloud!
[pcl::KdTreeFLANN::setInputCloud] Cannot create a KDTree with an empty input cloud!









_____________

https://github.com/ros/common_msgs.git

sudo apt-get install ros-noetic-common-msgs


/home/silenzio/noetic/catkin_ws/src/CMakeLists.txt
/home/silenzio/noetic/catkin_ws/src/install_rep.sh


cd /tmp
wget -q https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.bz2
tar xf eigen-3.3.7.tar.bz2 && rm -rf eigen-3.3.7.tar.bz2
cd eigen-3.3.7
mkdir -p build && cd build
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ..
make -j4 && sudo make install





You can check the data from realsense by

rostopic hz /camera/depth/color/points




------------------------------------------------------------------------------------------
##  Gazebo Fortress LTS for ROS2 humble
------------------------------------------------------------------------------------------

## INSTALL:

Binary Installation on Ubuntu
Fortress binaries are provided for Ubuntu Bionic, Focal and Jammy. All of the Fortress binaries are hosted in the osrfoundation repository. To install all of them, the metapackage ignition-fortress can be installed.

First install some necessary tools:

sudo apt-get update
sudo apt-get install lsb-release gnupg

Then install Ignition Fortress:

sudo curl https://packages.osrfoundation.org/gazebo.gpg --output /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg

echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null

sudo apt-get update

sudo apt-get install ignition-fortress
sudo ldconfig

All libraries should be ready to use and the ign gazebo app ready to be executed.

Head back to the Getting started page to start using Ignition!

Uninstalling binary install
If you need to uninstall Ignition or switch to a source-based install once you have already installed the library from binaries, run the following command:

sudo apt remove ignition-fortress && sudo apt autoremove

...
## https://launchpad.net/~openrobotics/+archive/ubuntu/gazebo11-non-amd64
sudo add-apt-repository ppa:openrobotics/gazebo11-non-amd64
sudo apt update

sudo apt install gazebo

sudo apt-get install gazebo-common

## RUN:

gz

//////////


------------------------------------------------------------------------------------------
## ROS2 NAV2
------------------------------------------------------------------------------------------
## https://docs.nav2.org/tutorials/docs/docker_dev.html

# INSTALL the Nav2 packages 

sudo apt install ros-$ROS_DISTRO-navigation2
sudo apt install ros-$ROS_DISTRO-nav2-bringup

# Install the demo robot (Turtlebot) for gazebo:

#For Iron and older, install Turtlebot 3 packages for gazebo classic:

sudo apt install ros-$ROS_DISTRO-turtlebot3-gazebo

@@@@@@@@
sudo apt install ros-$ROS_DISTRO-hls-lfcd-lds-driver
sudo chmod a+rw /dev/ttyUSB0
@@@@@@@@

## sudo apt install ros-$ROS_DISTRO-turtlebot3-gazebo

sudo apt install ros-$ROS_DISTRO-turtlebot3-msgs

sudo apt install ros-$ROS_DISTRO-turtlebot3-gazebo

sudo apt install ros-$ROS_DISTRO-nav2-minimal-tb*

sudo apt install ros-humble-gazebo-ros

sudo apt install ros-humble-ros-ign-bridge

sudo apt install libignition-gazebo6

sudo apt install ros-humble-ros-gz


source /opt/ros/$ROS_DISTRO/setup.bash

ros2 launch hls_lfcd_lds_driver hlds_laser.launch.py


## RUN:

# T1:
source /opt/ros/$ROS_DISTRO/setup.bash
sudo chmod a+rw /dev/ttyUSB0
export LDS_MODEL=LDS-01

export TURTLEBOT3_MODEL=waffle  # Iron and older only with Gazebo Classic

export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:/opt/ros/$ROS_DISTRO/share/turtlebot3_gazebo/models # Iron and older only with Gazebo Classic



ros2 launch nav2_bringup tb3_simulation_launch.py headless:=False


------------------------------------------------------------------------------------------
## DOCKER slam_toolbox
------------------------------------------------------------------------------------------




docker build -t humble_slam_toolbox --target humble_slam_toolbox --build-arg LIBRS_VERSION=2.50.0 .






Dockerfile:

# https://github.com/SteveMacenski/slam_toolbox/blob/noetic-devel/Dockerfile
FROM ros:noetic-ros-base as noetic_slam_toolbox

# USE BASH
SHELL ["/bin/bash", "-c"]

# RUN LINE BELOW TO REMOVE debconf ERRORS (MUST RUN BEFORE ANY apt-get CALLS)
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

RUN apt-get update && apt-get upgrade -y && apt-get install -y --no-install-recommends apt-utils ros-noetic-rviz-visual-tools git

# slam_toolbox

RUN mkdir -p catkin_ws/src

RUN cd catkin_ws/src && git clone -b melodic-devel https://github.com/ros-perception/sparse_bundle_adjustment.git
RUN source /opt/ros/noetic/setup.bash \
    && cd catkin_ws \
    && rosdep update \
    && rosdep install -y -r --from-paths src --ignore-src --rosdistro=noetic -y

RUN cd catkin_ws/src && git clone -b noetic-devel https://github.com/SteveMacenski/slam_toolbox.git
RUN source /opt/ros/noetic/setup.bash \
    && cd catkin_ws \
    && rosdep update \
    && rosdep install -y -r --from-paths src --ignore-src --rosdistro=noetic -y

#RUN apt install python-catkin-tools -qq -y --no-install-recommends 
#RUN pip3 install git+https://github.com/catkin/catkin_tools.git
#RUN apt install python3-osrf-pycommon python3-catkin-tool -qq -y --no-install-recommends 
RUN apt-get install python3-catkin-tools  -qq -y --no-install-recommends 

RUN source /opt/ros/noetic/setup.bash \ 
    && cd catkin_ws/src \
    && catkin_init_workspace \
    && cd .. \
    && catkin config --install \
    && catkin build -DCMAKE_BUILD_TYPE=Release


docker build -t noetic_slam_toolbox --target noetic_slam_toolbox --build-arg LIBRS_VERSION=2.50.0 .

## BUID OK

@@@@@@@@@@@@@@@@@@@@@@@@@@

## T1: 
docker run -it --net=host --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/temp:/temp noetic_slam_toolbox bash
roscore

# T2:
## DOCKER RUN WITH GRAPHICS GUI <<<<<<<<<<< @@@@@@@
docker run -it --net=host --privileged --env="DISPLAY=$DISPLAY" --volume="${XAUTHORITY}:/root/.Xauthority" --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/temp:/temp noetic_slam_toolbox bash

./ros_entrypoint.sh && cd catkin_ws/ && source ./devel/setup.bash
### source /opt/ros/noetic/setup.bash
### source /cart_ws/devel/setup.bash
source ./devel/setup.bash

###sudo chmod a+rw /dev/ttyUSB0
roslaunch hls_lfcd_lds_driver hlds_laser.launch

@@@@@   hlds_lase  WORK 11!! start with reboot and usb connected lidar  @@@@@

rosrun tf2_ros static_transform_publisher 0 0 0 0 0 0 1 laser base_link

@@@ WORK 11!!

## DOCKER RUN WITH GRAPHICS GUI
docker run -it --net=host --privileged --env="DISPLAY=$DISPLAY" --volume="${XAUTHORITY}:/root/.Xauthority" --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/temp:/temp noetic_slam_toolbox bash
rviz

source /catkin_ws/devel/setup.bash
# roscd

roslaunch slam_toolbox online_sync.launch

... logging to /root/.ros/log/a3a7497e-f600-11ef-846c-488f4cfd08c6/roslaunch-jetsonnx-82.log
Checking log directory for disk usage. This may take a while.
Press Ctrl-C to interrupt
Done checking log file disk usage. Usage is <1GB.

started roslaunch server http://jetsonnx:42171/

SUMMARY
========

PARAMETERS
 * /rosdistro: noetic
 * /rosversion: 1.17.0
 * /slam_toolbox/angle_variance_penalty: 1.0
 * /slam_toolbox/base_frame: base_footprint
 * /slam_toolbox/ceres_dogleg_type: TRADITIONAL_DOGLEG


## WORK !@@@!!

@@@@@@@@@@@@@@@@@@@@@@@@@@

## DOCKER RUN WITH GRAPHICS GUI

sudo docker run -it --net=host --privileged \
    --env="DISPLAY=$DISPLAY" \
    --volume="${XAUTHORITY}:/root/.Xauthority" \
    osrf/ros:rolling-desktop-full


______



#docker build -t rs2_cam_2_50_0 --target librealsense --build-arg LIBRS_VERSION=2.50.0 .

docker build -t ubi_20_04_rs1_noetic --target ros1_noetic --build-arg VERSION=2.50.0 .


docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/catkin_ws:/catkin_ws ubi_20_04_rs1_noetic bash


cd '/home/silenzio/catkin_ws/src'
git clone https://github.com/wh200720041/ssl_slam2.git

catkin_make

source /opt/ros/noetic/setup.bash


CMake Error in internal/ceres/CMakeLists.txt: Target "ceres" INTERFACE_INCLUDE_DIRECTORIES property contains path: "/usr/include" which is prefixed in the build directory.

















Example
If user have multiple cameras (might be of the same model) and multiple robots then user can choose to launch/run his nodes on this way.

For the first robot and first camera he will run/launch it with these parameters:

camera_namespace:

robot1
camera_name

D455_1
With ros2 launch (via command line or by editing these two parameters in the launch file):

ros2 launch realsense2_camera rs_launch.py camera_namespace:=robot1 camera_name:=D455_1

With ros2 run (using remapping mechanisim Reference):
ros2 run realsense2_camera realsense2_camera_node --ros-args -r __node:=D455_1 -r __ns:=robot1

Result
> ros2 node list
/robot1/D455_1

> ros2 topic list
/robot1/D455_1/color/camera_info
/robot1/D455_1/color/image_raw
/robot1/D455_1/color/metadata
/robot1/D455_1/depth/camera_info
/robot1/D455_1/depth/image_rect_raw
/robot1/D455_1/depth/metadata
/robot1/D455_1/extrinsics/depth_to_color
/robot1/D455_1/imu

> ros2 service list
/robot1/D455_1/device_info





------------------------------------------------------------------------------------------
## RealSense SDK and ROS Wrapper to Support L515 on ROS 2 Humble
------------------------------------------------------------------------------------------
## Specific Version Requirements for RealSense SDK and ROS Wrapper to Support L515 on ROS 2 Humble #12970
## https://github.com/IntelRealSense/librealsense/issues/12970

A_____________
opened on May 28, 2024

Required Info	
Camera Model	L515
Firmware Version	(Open RealSense Viewer --> Click info)

Operating System & Version	Ubuntu 22.04 Humble
Kernel Version (Linux Only)	6.5.0-35-generic
SDK Version	2.50.1 / ÔºüÔºüÔºü


Hello,

I am currently working on integrating the Intel RealSense L515 camera with ROS 2 Humble. I am looking for specific guidance on the versions of the RealSense SDK and the ROS wrapper that are required to ensure compatibility and optimal performance with ROS 2 Humble.

Could you please specify the recommended versions of the RealSense SDK and the corresponding ROS wrapper that should be used with the L515 camera in a ROS 2 Humble environment? Additionally, any tips on configuration settings or troubleshooting common issues would be highly appreciated.

Thank you for your support.


Q_____________

Hi @Liu-Jinxin You should use your L515 on Ubuntu 22.04 with librealsense SDK version 2.54.1 or 2.54.2 with RealSense ROS2 wrapper 4.54.1 (which is currently compatible with Humble and Iron).

The easiest installation method for you may be to follow the steps below.

Install ROS2 Humble if you have not done so already.

Install librealsense 2.54.1 from packages:

sudo apt install ros-humble-librealsense2*

Install the 4.54.1 wrapper from packages:
sudo apt install ros-humble-realsense2-*

The package version of the 4.54.1 wrapper will be significantly out of date compared to the source code version of the wrapper. So you may prefer to build the latest version of 4.54.1 from source code instead of packages in step 3.

To do this, please visit the link below and expand open the section titled Step 3: Install Intel RealSense ROS2 wrapper. Then scroll down to the Option 2: Install from source section for instructions on performing a colcon build.

https://github.com/IntelRealSense/realsense-ros?tab=readme-ov-file#installation-on-ubuntu

QA_____________

Thanks! I have tried your suggestion, and it works. But this output still has warning "frame's time domain is HARDWARE_CLOCK. Timestamps may reset periodically.". I was wondering how to solve it. Thanks for your help in advance.

‚ûú  ros2_ws ros2 launch realsense2_camera rs_launch.py
[INFO] [launch]: All log files can be found below /home/jinxin/.ros/log/2024-05-28-20-30-39-776635-jinxin-ws-2516895
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [2516896]
[realsense2_camera_node-1] [INFO] [1716899439.954742969] [camera.camera]: RealSense ROS v4.54.1
[realsense2_camera_node-1] [INFO] [1716899439.954797155] [camera.camera]: Built with LibRealSense v2.54.1
[realsense2_camera_node-1] [INFO] [1716899439.954802128] [camera.camera]: Running with LibRealSense v2.54.1
[realsense2_camera_node-1] [INFO] [1716899440.104304637] [camera.camera]: Device with serial number f0190751 was found.
[realsense2_camera_node-1] 
[realsense2_camera_node-1] [INFO] [1716899440.104337081] [camera.camera]: Device with physical ID /sys/devices/pci0000:00/0000:00:14.0/usb2/2-1/2-1:1.0/video4linux/video0 was found.
[realsense2_camera_node-1] [INFO] [1716899440.104341642] [camera.camera]: Device with name Intel RealSense L515 was found.
[realsense2_camera_node-1] [INFO] [1716899440.104414879] [camera.camera]: Device with port number 2-1 was found.
[realsense2_camera_node-1] [INFO] [1716899440.104419246] [camera.camera]: Device USB type: 3.2
[realsense2_camera_node-1] [INFO] [1716899440.104767494] [camera.camera]: getParameters...
[realsense2_camera_node-1] [INFO] [1716899440.104863476] [camera.camera]: JSON file is not provided
[realsense2_camera_node-1] [INFO] [1716899440.104868495] [camera.camera]: Device Name: Intel RealSense L515
[realsense2_camera_node-1] [INFO] [1716899440.104871822] [camera.camera]: Device Serial No: f0190751
[realsense2_camera_node-1] [INFO] [1716899440.104874942] [camera.camera]: Device physical port: /sys/devices/pci0000:00/0000:00:14.0/usb2/2-1/2-1:1.0/video4linux/video0
[realsense2_camera_node-1] [INFO] [1716899440.104878302] [camera.camera]: Device FW version: 1.5.8.1
[realsense2_camera_node-1] [INFO] [1716899440.104881134] [camera.camera]: Device Product ID: 0x0B64
[realsense2_camera_node-1] [INFO] [1716899440.104883821] [camera.camera]: Sync Mode: Off
[realsense2_camera_node-1] [INFO] [1716899440.119838796] [camera.camera]: Set ROS param depth_module.profile to default: 640x480x30
[realsense2_camera_node-1] [INFO] [1716899440.121843747] [camera.camera]: Set ROS param rgb_camera.profile to default: 1280x720x30
[realsense2_camera_node-1] [INFO] [1716899440.121987504] [camera.camera]: Set ROS param gyro_fps to default: 100
[realsense2_camera_node-1] [INFO] [1716899440.122000350] [camera.camera]: Set ROS param accel_fps to default: 200
[realsense2_camera_node-1] [INFO] [1716899440.125533347] [camera.camera]: Stopping Sensor: Depth Module
[realsense2_camera_node-1] [INFO] [1716899440.145120787] [camera.camera]: Starting Sensor: Depth Module





------------------------------------------------------------------------------------------
## Librealsense Docker
------------------------------------------------------------------------------------------
## https://github.com/IntelRealSense/librealsense/tree/development/scripts/Docker




jetson-containers run dustynv/ros:noetic-desktop-l4t-r35.4.1


#docker build -t rs2_cam_2_50_0 --target librealsense --build-arg LIBRS_VERSION=2.50.0 .


docker build -t rs2_cam_2_50_0 --build-arg LIBRS_VERSION=2.50.0 .

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v /home/silenzio/catkin_ws:/catkin_ws rs2_cam_2_50_0 bash


docker build -t rs2_cam_2_51_1 --build-arg LIBRS_VERSION=2.51.1 .

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v /home/silenzio/catkin_ws:/catkin_ws rs2_cam_2_51_1 bash


## FIX:

Add line in this Dockerfile:
## https://github.com/IntelRealSense/librealsense/blob/development/scripts/Docker/Dockerfile
In section:

# Build and install
RUN cd /usr/src/librealsense \
    ...
    -DFORCE_RSUSB_BACKEND=true \
    ...	

That's all...



@@@@@@@@@@@
docker build -t ubi_18_04_lsv_2_47_0 --build-arg LIBRS_VERSION=2.47.0 .

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v /home/silenzio/catkin_ws:/catkin_ws ubi_18_04_lsv_2_47_0 bash



root@dbaf0bafc24c:/# rs-fw-update -l

connected devices:
1) Name: Intel RealSense L515, serial number: f0211758, update serial number: 0003aa95b255, firmware version: 01.05.08.01, USB type: 3.2
2) Name: Intel RealSense T265, serial number: 905312111138, update serial number: unknown, firmware version: 0.2.0.951, USB type: 3.1

root@6f89426ca6d8:/# rs-enumerate-devices
Device info: 
    Name                          : 	Intel RealSense L515
    Serial Number                 : 	f0211758
    Firmware Version              : 	01.05.08.01
    Recommended Firmware Version  : 	01.05.08.01
    Physical Port                 : 	2-1.1-13
    Debug Op Code                 : 	15
    Product Id                    : 	0B64
    Camera Locked                 : 	YES
    Usb Type Descriptor           : 	3.2
    Product Line                  : 	L500
    Asic Serial Number            : 	0003aa95b255
    Firmware Update Id            : 	0003aa95b255

Stream Profiles supported by L500 Depth Sensor
 Supported modes:
    stream       resolution      fps       format   
    Confidence	  1024x768	@ 30Hz	   RAW8
    Confidence	  640x480	@ 30Hz	   RAW8
    Confidence	  320x240	@ 30Hz	   RAW8
...

@@@@@@@@@@
## WORK!!!111 BOTH T256 & L515 

$$$$$$$$$$

docker build -t ubi_20_04_lsv_2_51_1 --build-arg LIBRS_VERSION=2.51.1 .

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v /home/silenzio/catkin_ws:/catkin_ws ubi_20_04_lsv_2_51_1 bash

rs-fw-update -l

oot@7a5cd01f5358:/# rs-fw-update -l

Connected devices:
 25/02 22:03:21,824 WARNING [281473752150448] (messenger-libusb.cpp:42) control_transfer returned error, index: 300, error: Resource temporarily unavailable, number: b
 25/02 22:03:22,079 WARNING [281473752150448] (messenger-libusb.cpp:42) control_transfer returned error, index: 300, error: Resource temporarily unavailable, number: b
1) Name: Intel RealSense L515, serial number: f0211758, update serial number: 0003aa95b255, firmware version: 01.05.08.01, USB type: 3.2
2) Name: Intel RealSense T265, serial number: 905312111138, update serial number: unknown, firmware version: 0.2.0.951, USB type: 3.1

root@7a5cd01f5358:/# rs-enumerate-devices
Device info: 
    Name                          : 	Intel RealSense L515
    Serial Number                 : 	f0211758
    Firmware Version              : 	01.05.08.01
    Recommended Firmware Version  : 	01.05.08.01
    Physical Port                 : 	2-1.1-19
    Debug Op Code                 : 	15
    Product Id                    : 	0B64
    Camera Locked                 : 	YES
    Usb Type Descriptor           : 	3.2
    Product Line                  : 	L500
    Asic Serial Number            : 	0003aa95b255
    Firmware Update Id            : 	0003aa95b255

Stream Profiles supported by L500 Depth Sensor
 Supported modes:
    stream       resolution      fps       format   


$$$$$$$$$$


docker build -t ubi_20_04_lsv_2_47_0 --build-arg LIBRS_VERSION=2.47.0 .

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v /home/silenzio/catkin_ws:/catkin_ws ubi_20_04_lsv_2_47_0 bash

rs-fw-update -l

## WORK!!111

$$$$$$$



docker build -t foxy_ubi_20_04_lsv_2_47_0 --build-arg LIBRS_VERSION=2.47.0 .

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy foxy_ubi_20_04_lsv_2_47_0 bash

rs-fw-update -l





docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy dustynv/ros:foxy-ros-core-l4t-r35.4.1 bash



________

>>>>>>>>>  RealSense ROS v3.2.3 >>>>>>> v2.50.0

docker build -t ls_ubi_20_04_lsv_2_50_0 --build-arg LIBRS_VERSION=2.50.0 .

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy ls_2_50_0 bash

 
docker build -t ls_ubi_20_04_lsv_2_50_0 .
docker build -t foxy_ls_ubi_20_04_lsv_2_50_0 .

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy foxy_ls_ubi_20_04_lsv_2_50_0 bash


## RealSense ROS v3.2.3

source /opt/ros/${ROS_DISTRO}/setup.bash
ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 1 base_link camera_link

ros2 run image_transport republish raw in:=/camera/color/image_raw raw out:=/camera/image_raw

. install/local_setup.bash


ros2 launch realsense2_camera rs_launch.py

oot@67bd8e985cda:/foxy/l515_ws# ros2 launch realsense2_camera rs_launch.py
[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-26-14-36-25-628594-67bd8e985cda-7269
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [7271]
[realsense2_camera_node-1] [INFO] [1740580585.910331193] [RealSenseCameraNode]: RealSense ROS v3.2.3
[realsense2_camera_node-1] [INFO] [1740580585.910441980] [RealSenseCameraNode]: Built with LibRealSense v2.50.0
[realsense2_camera_node-1] [INFO] [1740580585.910461565] [RealSenseCameraNode]: Running with LibRealSense v2.50.0
[realsense2_camera_node-1]  26/02 14:36:26,464 WARNING [281472636578208] (messenger-libusb.cpp:42) control_transfer returned error, index: 300, error: Success, number: 0
[realsense2_camera_node-1]  26/02 14:36:26,718 WARNING [281472636578208] (messenger-libusb.cpp:42) control_transfer returned error, index: 300, error: Success, number: 0
[realsense2_camera_node-1] [INFO] [1740580586.885731158] [RealSenseCameraNode]: Device with serial number f0211758 was found.
[realsense2_camera_node-1] 
[realsense2_camera_node-1] [INFO] [1740580586.885834809] [RealSenseCameraNode]: Device with physical ID 2-1.1-5 was found.
[realsense2_camera_node-1] [INFO] [1740580586.885847577] [RealSenseCameraNode]: Device with name Intel RealSense L515 was found.
[realsense2_camera_node-1] [INFO] [1740580586.886353541] [RealSenseCameraNode]: Device with port number 2-1.1 was found.
[realsense2_camera_node-1] [INFO] [1740580586.886382950] [RealSenseCameraNode]: Device USB type: 3.2
[realsense2_camera_node-1] [INFO] [1740580586.895519810] [RealSenseCameraNode]: getParameters...
[realsense2_camera_node-1] [INFO] [1740580586.899660453] [RealSenseCameraNode]: setupDevice...
[realsense2_camera_node-1] [INFO] [1740580586.899704902] [RealSenseCameraNode]: JSON file is not provided
[realsense2_camera_node-1] [INFO] [1740580586.899745287] [RealSenseCameraNode]: Device Name: Intel RealSense L515
[realsense2_camera_node-1] [INFO] [1740580586.899762600] [RealSenseCameraNode]: Device physical port: 2-1.1-5
[realsense2_camera_node-1] [INFO] [1740580586.899774216] [RealSenseCameraNode]: Device FW version: 01.05.08.01
[realsense2_camera_node-1] [INFO] [1740580586.899784936] [RealSenseCameraNode]: Device Product ID: 0x0B64
[realsense2_camera_node-1] [INFO] [1740580586.899794024] [RealSenseCameraNode]: Enable PointCloud: Off
[realsense2_camera_node-1] [INFO] [1740580586.899802697] [RealSenseCameraNode]: Align Depth: Off
[realsense2_camera_node-1] [INFO] [1740580586.899811209] [RealSenseCameraNode]: Sync Mode: Off
[realsense2_camera_node-1] [INFO] [1740580586.900010702] [RealSenseCameraNode]: Device Sensors: 
[realsense2_camera_node-1] [INFO] [1740580587.085291924] [RealSenseCameraNode]: L500 Depth Sensor was found.
[realsense2_camera_node-1] [INFO] [1740580587.146385105] [RealSenseCameraNode]: RGB Camera was found.
[realsense2_camera_node-1] [INFO] [1740580587.148668328] [RealSenseCameraNode]: Motion Module was found.
[realsense2_camera_node-1] [INFO] [1740580587.148837644] [RealSenseCameraNode]: (Infrared, 1) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740580587.148869101] [RealSenseCameraNode]: (Infrared, 2) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740580587.148887725] [RealSenseCameraNode]: (Fisheye, 0) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740580587.148902542] [RealSenseCameraNode]: (Fisheye, 1) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740580587.148918126] [RealSenseCameraNode]: (Fisheye, 2) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740580587.148933966] [RealSenseCameraNode]: (Pose, 0) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740580587.148956143] [RealSenseCameraNode]: num_filters: 0
[realsense2_camera_node-1] [INFO] [1740580587.148972431] [RealSenseCameraNode]: Setting Dynamic reconfig parameters.
[realsense2_camera_node-1] [INFO] [1740580591.061242451] [RealSenseCameraNode]: Done Setting Dynamic reconfig parameters.
[realsense2_camera_node-1] [INFO] [1740580591.063920596] [RealSenseCameraNode]: depth stream is enabled - width: 640, height: 480, fps: 30, Format: Z16
[realsense2_camera_node-1] [INFO] [1740580591.064550147] [RealSenseCameraNode]: infra stream is enabled - width: 640, height: 480, fps: 30, Format: Y8
[realsense2_camera_node-1] [INFO] [1740580591.069231603] [RealSenseCameraNode]: color stream is enabled - width: 1280, height: 720, fps: 30, Format: RGB8
[realsense2_camera_node-1] [INFO] [1740580591.069458585] [RealSenseCameraNode]: setupPublishers...
[realsense2_camera_node-1] [INFO] [1740580591.093801858] [RealSenseCameraNode]: setupStreams...
[realsense2_camera_node-1]  26/02 14:36:31,518 WARNING [281472636578208] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Success, number: 0
[realsense2_camera_node-1] [INFO] [1740580591.555207189] [RealSenseCameraNode]: SELECTED BASE:Depth, 0
[realsense2_camera_node-1]  26/02 14:36:31,571 WARNING [281472636578208] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Success, number: 0
[realsense2_camera_node-1]  26/02 14:36:31,625 WARNING [281472636578208] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Success, number: 0
[realsense2_camera_node-1] [INFO] [1740580591.679341596] [RealSenseCameraNode]: Device Serial No: f0211758
[realsense2_camera_node-1] [INFO] [1740580591.679467007] [RealSenseCameraNode]: RealSense Node Is Up!
[realsense2_camera_node-1] [WARN] [1740580591.704352214] [RealSenseCameraNode]: 
[realsense2_camera_node-1] [WARN] [1740580591.704453880] [RealSenseCameraNode]: frame's time domain is HARDWARE_CLOCK. Timestamps may reset periodically.
[realsense2_camera_node-1]  26/02 14:36:32,237 WARNING [281472636578208] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Success, number: 0
[realsense2_camera_node-1]  26/02 14:36:32,578 WARNING [281472636578208] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Success, number: 0
[realsense2_camera_node-1]  26/02 14:36:33,833 WARNING [281472636578208] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Success, number: 0
[realsense2_camera_node-1]  26/02 14:36:35,086 WARNING [281472636578208] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Success, number: 0
[realsense2_camera_node-1]  26/02 14:36:36,340 WARNING [281472636578208] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Success, number: 0



$ ros2 topic list
/camera/color/camera_info
/camera/color/image_raw
/camera/color/image_raw/compressed
/camera/color/image_raw/compressedDepth
/camera/color/metadata
/camera/depth/camera_info
/camera/depth/image_rect_raw
/camera/depth/image_rect_raw/compressed
/camera/depth/image_rect_raw/compressedDepth
/camera/depth/metadata
/camera/extrinsics/depth_to_color
/camera/infra/camera_info
/camera/infra/image_raw
/camera/infra/image_raw/compressed
/camera/infra/image_raw/compressedDepth
/camera/infra/metadata
/parameter_events
/rosout
/tf
/tf_static


________

>>>>>>>>>  RealSense ROS v3.2.2 >>>>>>> v2.48.0

cd ~/lib/librealsense-builder/LS

docker build -t ls_ubi_20_04_lsv_2_48_0 --build-arg LIBRS_VERSION=2.48.0 .

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy ls_ubi_20_04_lsv_2_48_0 bash


cd ~/lib/librealsense-builder/RS_ROS

docker build -t foxy_ls_ubi_20_04_lsv_2_48_0 .

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy foxy_ls_ubi_20_04_lsv_2_48_0 bash

cd /foxy/l515_ws
. install/local_setup.bash
ros2 launch realsense2_camera rs_launch.py

ros2 run image_transport republish raw in:=/camera/color/image_raw raw out:=/camera/image_raw

source /opt/ros/${ROS_DISTRO}/setup.bash
ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 1 base_link camera_link


root@8d4ca38c493f:/foxy/t265_l515_v3_2_2_ws# ros2 launch realsense2_camera rs_launch.py
[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-26-15-38-26-307232-8d4ca38c493f-6557
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [6559]
[realsense2_camera_node-1] [INFO] [1740584306.591148845] [RealSenseCameraNode]: RealSense ROS v3.2.2
[realsense2_camera_node-1] [INFO] [1740584306.591259184] [RealSenseCameraNode]: Built with LibRealSense v2.48.0
[realsense2_camera_node-1] [INFO] [1740584306.591281425] [RealSenseCameraNode]: Running with LibRealSense v2.48.0
[realsense2_camera_node-1]  26/02 15:38:26,918 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, index: 300, error: No data available, number: 3d
[realsense2_camera_node-1] [INFO] [1740584307.076577245] [RealSenseCameraNode]: Device with serial number f0211758 was found.
[realsense2_camera_node-1] 
[realsense2_camera_node-1] [INFO] [1740584307.076678304] [RealSenseCameraNode]: Device with physical ID 2-1.1-5 was found.
[realsense2_camera_node-1] [INFO] [1740584307.076698145] [RealSenseCameraNode]: Device with name Intel RealSense L515 was found.
[realsense2_camera_node-1] [INFO] [1740584307.077199632] [RealSenseCameraNode]: Device with port number 2-1.1 was found.
[realsense2_camera_node-1] [INFO] [1740584307.077235505] [RealSenseCameraNode]: Device USB type: 3.2
[realsense2_camera_node-1] [INFO] [1740584307.086404133] [RealSenseCameraNode]: getParameters...
[realsense2_camera_node-1] [INFO] [1740584307.093228179] [RealSenseCameraNode]: setupDevice...
[realsense2_camera_node-1] [INFO] [1740584307.093292373] [RealSenseCameraNode]: JSON file is not provided
[realsense2_camera_node-1] [INFO] [1740584307.093339062] [RealSenseCameraNode]: Device Name: Intel RealSense L515
[realsense2_camera_node-1] [INFO] [1740584307.093359799] [RealSenseCameraNode]: Device Serial No: f0211758
[realsense2_camera_node-1] [INFO] [1740584307.093375000] [RealSenseCameraNode]: Device physical port: 2-1.1-5
[realsense2_camera_node-1] [INFO] [1740584307.093387384] [RealSenseCameraNode]: Device FW version: 01.05.08.01
[realsense2_camera_node-1] [INFO] [1740584307.093399320] [RealSenseCameraNode]: Device Product ID: 0x0B64
[realsense2_camera_node-1] [INFO] [1740584307.093410009] [RealSenseCameraNode]: Enable PointCloud: Off
[realsense2_camera_node-1] [INFO] [1740584307.093420409] [RealSenseCameraNode]: Align Depth: Off
[realsense2_camera_node-1] [INFO] [1740584307.093429945] [RealSenseCameraNode]: Sync Mode: Off
[realsense2_camera_node-1] [INFO] [1740584307.093645632] [RealSenseCameraNode]: Device Sensors: 
[realsense2_camera_node-1] [INFO] [1740584307.118094497] [RealSenseCameraNode]: L500 Depth Sensor was found.
[realsense2_camera_node-1] [INFO] [1740584307.142364029] [RealSenseCameraNode]: RGB Camera was found.
[realsense2_camera_node-1] [INFO] [1740584307.143955725] [RealSenseCameraNode]: Motion Module was found.
[realsense2_camera_node-1] [INFO] [1740584307.144044208] [RealSenseCameraNode]: (Infrared, 1) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740584307.144067376] [RealSenseCameraNode]: (Infrared, 2) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740584307.144081713] [RealSenseCameraNode]: (Fisheye, 0) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740584307.144093841] [RealSenseCameraNode]: (Fisheye, 1) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740584307.144105874] [RealSenseCameraNode]: (Fisheye, 2) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740584307.144118066] [RealSenseCameraNode]: (Pose, 0) sensor isn't supported by current device! -- Skipping...
[realsense2_camera_node-1] [INFO] [1740584307.144137267] [RealSenseCameraNode]: num_filters: 0
[realsense2_camera_node-1] [INFO] [1740584307.144149907] [RealSenseCameraNode]: Setting Dynamic reconfig parameters.
[realsense2_camera_node-1] [INFO] [1740584307.460109612] [RealSenseCameraNode]: Done Setting Dynamic reconfig parameters.
[realsense2_camera_node-1] [INFO] [1740584307.461374034] [RealSenseCameraNode]: depth stream is enabled - width: 640, height: 480, fps: 30, Format: Z16
[realsense2_camera_node-1] [INFO] [1740584307.461738013] [RealSenseCameraNode]: infra stream is enabled - width: 640, height: 480, fps: 30, Format: Y8
[realsense2_camera_node-1] [INFO] [1740584307.464630772] [RealSenseCameraNode]: color stream is enabled - width: 1280, height: 720, fps: 30, Format: RGB8
[realsense2_camera_node-1] [INFO] [1740584307.464852827] [RealSenseCameraNode]: setupPublishers...
[realsense2_camera_node-1] [INFO] [1740584307.483690195] [RealSenseCameraNode]: setupStreams...
[realsense2_camera_node-1]  26/02 15:38:27,593 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: No data available, number: 61
[realsense2_camera_node-1] [INFO] [1740584307.628100535] [RealSenseCameraNode]: SELECTED BASE:Depth, 0
[realsense2_camera_node-1]  26/02 15:38:27,644 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: No data available, number: 61
[realsense2_camera_node-1]  26/02 15:38:27,697 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: No data available, number: 61
[realsense2_camera_node-1]  26/02 15:38:27,750 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: No data available, number: 61
[realsense2_camera_node-1] [INFO] [1740584307.803185463] [RealSenseCameraNode]: RealSense Node Is Up!
[realsense2_camera_node-1] [WARN] [1740584307.838743271] [RealSenseCameraNode]: 
[realsense2_camera_node-1] [WARN] [1740584307.838869643] [RealSenseCameraNode]: frame's time domain is HARDWARE_CLOCK. Timestamps may reset periodically.
[realsense2_camera_node-1]  26/02 15:38:28,650 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: No data available, number: 61
[realsense2_camera_node-1]  26/02 15:38:29,028 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: No data available, number: 61
[realsense2_camera_node-1]  26/02 15:38:29,181 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: No data available, number: 61
[realsense2_camera_node-1]  26/02 15:38:29,904 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: No data available, number: 61
[realsense2_camera_node-1]  26/02 15:38:31,157 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11
[realsense2_camera_node-1]  26/02 15:38:32,410 WARNING [281472409782688] (messenger-libusb.cpp:42) control_transfer returned error, 

...



________

>>>>>>>>>  RealSense ROS v4.0.4 >>>>>>> v2.50.0

## cd ~/lib/librealsense-builder/LS
## docker build -t ls_ubi_20_04_lsv_2_50_0 --build-arg LIBRS_VERSION=2.50.0 .
## docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy ls_ubi_20_04_lsv_2_50_0 bash

cd ~/lib/librealsense-builder/RS_ROS
docker build -t foxy_ls_ubi_20_04_lsv_2_50_0 .


docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy foxy_ls_ubi_20_04_lsv_2_50_0 bash

cd /foxy/t265_l515_v4_0_4_ws
colcon build

source /opt/ros/${ROS_DISTRO}/setup.bash
. install/local_setup.bash

ros2 launch realsense2_camera rs_launch.py

ros2 run image_transport republish raw in:=/camera/color/image_raw raw out:=/camera/image_raw

source /opt/ros/${ROS_DISTRO}/setup.bash
ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 1 base_link camera_link


 ros2 topic list
/camera/aligned_depth_to_color/camera_info
/camera/aligned_depth_to_color/image_raw
/camera/aligned_depth_to_color/image_raw/compressed
/camera/aligned_depth_to_color/image_raw/compressedDepth

/camera/aligned_depth_to_confidence/camera_info
/camera/aligned_depth_to_confidence/image_raw
/camera/aligned_depth_to_confidence/image_raw/compressed
/camera/aligned_depth_to_confidence/image_raw/compressedDepth

/camera/aligned_depth_to_infra/camera_info
/camera/aligned_depth_to_infra/image_raw
/camera/aligned_depth_to_infra/image_raw/compressed
/camera/aligned_depth_to_infra/image_raw/compressedDepth

/camera/color/camera_info
/camera/color/image_raw
/camera/color/image_raw/compressed
/camera/color/image_raw/compressedDepth
/camera/color/metadata

/camera/confidence/camera_info
/camera/confidence/image_rect_raw
/camera/confidence/image_rect_raw/compressed
/camera/confidence/image_rect_raw/compressedDepth
/camera/confidence/metadata

/camera/depth/camera_info
/camera/depth/image_rect_raw
/camera/depth/image_rect_raw/compressed
/camera/depth/image_rect_raw/compressedDepth
/camera/depth/metadata

/camera/extrinsics/depth_to_color
/camera/extrinsics/depth_to_confidence
/camera/extrinsics/depth_to_infra

/camera/imu

/camera/infra/camera_info
/camera/infra/image_rect_raw
/camera/infra/image_rect_raw/compressed
/camera/infra/image_rect_raw/compressedDepth
/camera/infra/metadata

/clicked_point
/goal_pose
/initialpose
/parameter_events
/rosout
/tf
/tf_static

root@a707edccdd8e:/foxy/t265_l515_v4_0_4_ws# . install/local_setup.bash
root@a707edccdd8e:/foxy/t265_l515_v4_0_4_ws# ros2 launch realsense2_camera rs_launch.py
[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-26-16-08-09-487918-a707edccdd8e-6863
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [6865]
[realsense2_camera_node-1] [INFO] [1740586089.817453043] [camera.camera]: RealSense ROS v4.0.4
[realsense2_camera_node-1] [INFO] [1740586089.817682556] [camera.camera]: Built with LibRealSense v2.50.0
[realsense2_camera_node-1] [INFO] [1740586089.817726685] [camera.camera]: Running with LibRealSense v2.50.0
[realsense2_camera_node-1]  26/02 16:08:10,307 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 300, error: Success, number: 0
[realsense2_camera_node-1]  26/02 16:08:10,579 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 300, error: Success, number: 0
[realsense2_camera_node-1] [INFO] [1740586090.750753720] [camera.camera]: Device with serial number f0211758 was found.
[realsense2_camera_node-1] 
[realsense2_camera_node-1] [INFO] [1740586090.750967103] [camera.camera]: Device with physical ID 2-1.1-5 was found.
[realsense2_camera_node-1] [INFO] [1740586090.751004001] [camera.camera]: Device with name Intel RealSense L515 was found.
[realsense2_camera_node-1] [INFO] [1740586090.751598006] [camera.camera]: Device with port number 2-1.1 was found.
[realsense2_camera_node-1] [INFO] [1740586090.751671641] [camera.camera]: Device USB type: 3.2
[realsense2_camera_node-1] [INFO] [1740586090.763971091] [camera.camera]: getParameters...
[realsense2_camera_node-1] [INFO] [1740586090.764669932] [camera.camera]: JSON file is not provided
[realsense2_camera_node-1] [INFO] [1740586090.764728686] [camera.camera]: Device Name: Intel RealSense L515
[realsense2_camera_node-1] [INFO] [1740586090.764763663] [camera.camera]: Device Serial No: f0211758
[realsense2_camera_node-1] [INFO] [1740586090.764790128] [camera.camera]: Device physical port: 2-1.1-5
[realsense2_camera_node-1] [INFO] [1740586090.764814289] [camera.camera]: Device FW version: 01.05.08.01
[realsense2_camera_node-1] [INFO] [1740586090.764839442] [camera.camera]: Device Product ID: 0x0B64
[realsense2_camera_node-1] [INFO] [1740586090.764861683] [camera.camera]: Sync Mode: Off
[realsense2_camera_node-1] [INFO] [1740586092.762303564] [camera.camera]: Set ROS param depth_module.profile to default: 640x480x30
[realsense2_camera_node-1] [INFO] [1740586094.801866909] [camera.camera]: Set ROS param rgb_camera.profile to default: 1280x720x30
[realsense2_camera_node-1] [INFO] [1740586094.804998861] [camera.camera]: Set ROS param gyro_fps to default: 100
[realsense2_camera_node-1] [INFO] [1740586094.805254870] [camera.camera]: Set ROS param accel_fps to default: 200
[realsense2_camera_node-1] [INFO] [1740586094.870728806] [camera.camera]: Start Sensor: L500 Depth Sensor
[realsense2_camera_node-1] [INFO] [1740586095.159132764] [camera.camera]: Open profile: stream_type: Confidence(0), Format: RAW8, Width: 640, Height: 480, FPS: 30
[realsense2_camera_node-1] [INFO] [1740586095.159311459] [camera.camera]: Open profile: stream_type: Infra(0), Format: Y8, Width: 640, Height: 480, FPS: 30
[realsense2_camera_node-1] [INFO] [1740586095.159348740] [camera.camera]: Open profile: stream_type: Depth(0), Format: Z16, Width: 640, Height: 480, FPS: 30
[realsense2_camera_node-1] [INFO] [1740586095.160309159] [camera.camera]: Start Sensor: RGB Camera
[realsense2_camera_node-1]  26/02 16:08:15,160 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11
[realsense2_camera_node-1]  26/02 16:08:15,212 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11
[realsense2_camera_node-1]  26/02 16:08:15,265 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11
[realsense2_camera_node-1] [INFO] [1740586095.369420669] [camera.camera]: Open profile: stream_type: Color(0), Format: RGB8, Width: 1280, Height: 720, FPS: 30
[realsense2_camera_node-1] [INFO] [1740586095.370600711] [camera.camera]: RealSense Node Is Up!
[realsense2_camera_node-1]  26/02 16:08:16,219 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11
[realsense2_camera_node-1]  26/02 16:08:16,593 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11
[realsense2_camera_node-1] [WARN] [1740586096.693977900] [camera.camera]: 
[realsense2_camera_node-1] [WARN] [1740586096.694180819] [camera.camera]: frame's time domain is HARDWARE_CLOCK. Timestamps may reset periodically.
[realsense2_camera_node-1]  26/02 16:08:17,472 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11
[realsense2_camera_node-1]  26/02 16:08:18,725 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11
[realsense2_camera_node-1]  26/02 16:08:19,980 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11
[realsense2_camera_node-1]  26/02 16:08:21,233 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11
[realsense2_camera_node-1]  26/02 16:08:22,487 WARNING [281472938260896] (messenger-libusb.cpp:42) control_transfer returned error, index: 768, error: Resource temporarily unavailable, number: 11






docker rename ls_2_50_0 ls_ubi_20_04_lsv_2_50_0
docker info ls_2_50_0

noetic








________


## FIX:
Hi @ciandonovan The RealSense SDK does not yet officially support kernel 6.1. At the time of writing this, the newest supported kernel version is 5.15. It is possible to use unsupported kernels with the SDK without applying a kernel patch but there may be unforeseen consequences in regards to stability.

This issue can be resolved if the SDK is built from source code with CMake with the build flag 
-DFORCE_RSUSB_BACKEND=true 
included in the CMake build instruction. An SDK build based on the RSUSB Backend bypasses the kernel, so it is not dependent on Linux versions or kernel versions and does not require kernel patching.




docker run -it --rm -v /dev:/dev -v /home/silenzio/catkin_ws:/catkin_ws rs2_cam_2_51_1 bash



docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" librealsense/librealsense



------------------------------------------------------------------------------------------
## ROS2 Wrapper for Intel¬Æ RealSense‚Ñ¢ Devices (build 3.2.3)
------------------------------------------------------------------------------------------
## RealSense ROS wrappers for both ROS and ROS2 for matching with librealsense SDK version 2.50.0 are now available.
## https://support.intelrealsense.com/hc/en-us/community/posts/4410562380307-ROS-and-ROS2-wrappers-for-librealsense-SDK-2-50-0
## @doronhi doronhi released this Nov 11, 2021

Supported ROS Distributions
Rolling
Galactic
Foxy <<<<<< ---- 

Supported Devices
Intel¬Æ RealSense‚Ñ¢ LiDAR cameras L515, L535 <<<<<< ---- 
Intel¬Æ RealSense‚Ñ¢ Tracking Module T265 <<<<<< ---- 

## https://github.com/IntelRealSense/realsense-ros/releases/tag/3.2.3


clone in l515_ws

colcon build

## BUILD OK
...
Finished <<< realsense2_camera [1min 23s]

Summary: 22 packages finished [3min 16s]
  20 packages had stderr output: diagnostic_aggregator diagnostic_common_diagnostics diagnostic_updater diagnostics examples_tf2_py geometry2 realsense2_camera self_test test_tf2 tf2 tf2_bullet tf2_eigen tf2_eigen_kdl tf2_geometry_msgs tf2_kdl tf2_msgs tf2_py tf2_ros tf2_sensor_msgs tf2_tools
root@155beec83ab5:/foxy/l515_ws# . install/local_setup.bash

## RUN inside docker:

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy librealsense2_l515 bash

cd /foxy/l515_ws
. install/local_setup.bash

ros2 launch realsense2_camera rs_launch.py

## ERROR...

[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-24-17-31-53-837927-155beec83ab5-7816
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [7818]
[realsense2_camera_node-1] [INFO] [1740418314.289729917] [RealSenseCameraNode]: RealSense ROS v3.2.3
[realsense2_camera_node-1] [INFO] [1740418314.289881921] [RealSenseCameraNode]: Built with LibRealSense v2.51.1
[realsense2_camera_node-1] [INFO] [1740418314.289917667] [RealSenseCameraNode]: Running with LibRealSense v2.51.1
[realsense2_camera_node-1] [WARN] [1740418314.305363177] [RealSenseCameraNode]: No RealSense devices were found!
[realsense2_camera_node-1] [WARN] [1740418320.512349641] [RealSenseCameraNode]: No RealSense devices were found!


docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy ros_foxy_librealsense2 bash 

# cd catkin_ws/
# . install/local_setup.bash


# ros2 launch realsense2_camera rs_launch.py

## ERROR...

[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-24-19-00-42-615553-8529907b2b38-50
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [52]
[realsense2_camera_node-1] [INFO] [1740423643.127529509] [camera.camera]: RealSense ROS v3.2.3
[realsense2_camera_node-1] [INFO] [1740423643.127760940] [camera.camera]: Built with LibRealSense v2.50.0
[realsense2_camera_node-1] [INFO] [1740423643.127803757] [camera.camera]: Running with LibRealSense v2.50.0
[realsense2_camera_node-1] [WARN] [1740423643.142745109] [camera.camera]: No RealSense devices were found!



docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy librealsense2_l515 bash

rs-fw-update -l 
rs-fw-update  version: 2.51.1
There are no connected devices <<<<< L515


cd /foxy/rs_ros_451_ws
. install/local_setup.bash

ros2 launch realsense2_camera rs_launch.py

## ERROR...

[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-24-19-16-14-864805-f6e595f590f7-6857
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [6859]
[realsense2_camera_node-1] [INFO] [1740424575.371078684] [camera.camera]: RealSense ROS v4.51.1
[realsense2_camera_node-1] [INFO] [1740424575.371303458] [camera.camera]: Built with LibRealSense v2.51.1
[realsense2_camera_node-1] [INFO] [1740424575.371347268] [camera.camera]: Running with LibRealSense v2.51.1
[realsense2_camera_node-1] [WARN] [1740424575.385674750] [camera.camera]: No RealSense devices were found!
[realsense2_camera_node-1] [WARN] [1740424581.603899944] [camera.camera]: No RealSense devices were found!


docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy librealsense2_l515 bash

. install/local_setup.bash
ros2 launch realsense2_camera rs_launch.py
## ERROR...
[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-24-19-32-18-362556-4acc5db8417b-9343
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [9345]
[realsense2_camera_node-1] [INFO] [1740425538.865552354] [camera.camera]: RealSense ROS v4.55.1
[realsense2_camera_node-1] [INFO] [1740425538.865791178] [camera.camera]: Built with LibRealSense v2.51.1
[realsense2_camera_node-1] [INFO] [1740425538.865833611] [camera.camera]: Running with LibRealSense v2.51.1
[realsense2_camera_node-1] [WARN] [1740425538.880115413] [camera.camera]: No RealSense devices were found!
[realsense2_camera_node-1] [WARN] [1740425545.099549942] [camera.camera]: No RealSense devices were found!



docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy librealsense2_2_53-1 bash

. install/local_setup.bash
ros2 launch realsense2_camera rs_launch.py








$ docker run --privileged -it --rm librealsense2_l515 /usr/local/bin/rs-enumerate-devices
sourcing   /opt/ros/foxy/install/setup.bash
ROS_DISTRO foxy
ROS_ROOT   /opt/ros/foxy
No device detected. Is it plugged in?

## NOT WORK with L515



$ docker run --privileged -it --rm librealsense2_l515 /usr/local/bin/rs-enumerate-devices
sourcing   /opt/ros/foxy/install/setup.bash
ROS_DISTRO foxy
ROS_ROOT   /opt/ros/foxy
Device info: 
    Name                          : 	Intel RealSense T265
    Serial Number                 : 	905312111138
    Firmware Version              : 	0.2.0.951
    Physical Port                 : 	2-1.3-24
    Product Id                    : 	0B37
    Usb Type Descriptor           : 	3.1
    Product Line                  : 	T200

## NOT WORK with T265


## OTHER EXAMPLE >>>>>>>>>>>
docker run --privileged -it --rm librealsense:2.34.0 /opt/librealsense/current/bin/rs-enumerate-devices

info: 
    Name                          : 	Intel RealSense D435I
    Serial Number                 : 	944622073256
    Firmware Version              : 	05.11.01.100
    Recommended Firmware Version  : 	05.12.03.00
    Physical Port                 : 	2-1.4-5
    Debug Op Code                 : 	15
    Advanced Mode                 : 	YES
    Product Id                    : 	0B3A
    Camera Locked                 : 	YES
    Usb Type Descriptor           : 	3.2
    Product Line                  : 	D400
    Asic Serial Number            : 	946123050035
    Firmware Update Id            : 	946123050035


......




## FIX:


## https://support.intelrealsense.com/hc/en-us/community/posts/34746798629395-L515-not-detected-in-RealSense-Viewer

Hi Deldoran  Support for the L515 camera model in the RealSense SDK and RealSense Viewer ended after version 2.53.1 as it is a retired camera model.  If you install version 2.53.1 then the L515 should be detected.

https://github.com/IntelRealSense/librealsense/releases/tag/v2.53.1









--net host --privileged -v /dev/bus/usb:/dev/bus/usb




# https://github.com/IntelRealSense/realsense-ros/issues/2416

I am using L515, ROS Noetic, Wrapper 2.0, SDK v2.50.

run:
roslaunch realsense2_camera rs_camera.launch pointcloud_texture_stream:=RS2_STREAM_INFRARED



## https://repositories.ros.org/status_page/ros_melodic_default.html?q=realsense

_________
## https://medium.com/@kabilankb2003/nvidia-jetson-nano-with-intel-realsense-depth-camera-using-ros2-humble-c5926566a4d8
## NVIDIA Jetson Nano with Intel RealSense Depth Camera Using ROS2 Humble

May 17, 2024



NVIDIA Jetson Nano with Ubuntu 20.04 OS image

Intel RealSense Depth Camera (e.g., D435i)

ROS2 Humble installed on the Jetson Nano

USB 3.0 cable for connecting the RealSense camera to the Jetson Nano

Internet connection for downloading necessary packages

Installing ROS2 RealSense Package


sudo apt install ros-humble-realsense2-camera

sudo apt-get install -y ros-galactic-realsense2-camera

sudo apt-get install -y ros-humble-realsense2-camera

sudo apt-get install ros-foxy-realsense2-camera



Launch the RealSense Node:

Create a launch file to start the RealSense node. Create a new file realsense_launch.py:

from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    return LaunchDescription([
        Node(
            package='realsense2_camera',
            executable='realsense2_camera_node',
            name='realsense2_camera',
            output='screen',
            parameters=[{
                'enable_depth': True,
                'enable_infra1': True,
                'enable_infra2': True,
                'enable_color': True,
            }],
        ),
    ])




https://github.com/IntelRealSense/librealsense/releases/tag/v2.51.1


#docker build -t librealsense2 --build-arg LIBRS_VERSION=2.50.0 .

docker build -t librealsense2_l515 --build-arg LIBRS_VERSION=2.51.1 .


docker build -t librealsense2_rs2_cam --build-arg LIBRS_VERSION=2.50.0 .

docker build -t librealsense2_2_53-1 --build-arg LIBRS_VERSION=2.53.1 .






$ ls -l /dev/bus/usb/${BUS}/${PORT}
$ ls -l /dev/bus/usb/189/${PORT}
total 0
drwxr-xr-x 2 root root 100 Feb 24 17:46 001
drwxr-xr-x 2 root root 120 Feb 24 17:48 002




ros2 launch realsense2_camera rs_l515_and_t265_launch.py


------------------------------------------------------------------------------------------
# tts_ros TTS (Text-to-Speech) package into ROS 2
------------------------------------------------------------------------------------------
## https://github.com/mgonzs13/tts_ros
#This repositiory integrates the Python TTS (Text-to-Speech) package into ROS 2 using audio_common 4.0.4.

ROS 2 Distro	Humble

## Installation
cd ~/ros2_ws/src
git clone https://github.com/mgonzs13/audio_common.git
git clone https://github.com/mgonzs13/tts_ros.git
pip3 install -r tts_ros/requirements.txt
cd ~/ros2_ws
rosdep install --from-paths src --ignore-src -r -y
colcon build

## Docker
You can build the tts_ros docker:

docker build -t tts_ros .
Then, you can run the docker container:

docker run -it --rm --device /dev/snd tts_ros

## Usage
To use this tool you have to run the tts_node. It has the following parameters:

chunk: Size of audio chunks to be sent to the audio player.
frame_id: Frame of for the tts.
model: The tts model. You can check the available models with tts --list_models.
model_path: Path to a local model file.
config_path: Path to a config file.
vocoder_path: Path to a vocoder model file.
vocoder_config_path: Path to a config file.
device: The device to run the model same as in torch.
speaker_wav: The wav file to perform voice cloning.
speaker: Which speaker voice to use for multi-speaker models. Check with tts --model_name <model> --list_language_idx.
stream: Whether to stream the audio data.

## Parameters Format
ros2 run tts_ros tts_node --ros-args -p chunk:=4096 -p frame_id:="your-frame" -p model:="your-model" -p device:="cpu/cuda" -p speaker_wav:="/path/to/wav/file" -p stream:=False

## Demos
ros2 run tts_ros tts_node
ros2 run audio_common audio_player_node
ros2 action send_goal /say audio_common_msgs/action/TTS "{'text': 'Hello World'}"




------------------------------------------------------------------------------------------
## panoptic_slam
------------------------------------------------------------------------------------------

silenzio@jetsonnx:~/lib/Panoptic-SLAM$ docker build -t panoptic_slam -f docker/dockerfile .
[+] Building 7843.6s (59/75)                                                                                     docker:default
 => [internal] load build definition from dockerfile                                                                       0.0s
 => => transferring dockerfile: 5.46kB                                                                                     0.0s
 => [internal] load metadata for docker.io/nvidia/cuda:11.6.1-cudnn8-devel-ubuntu20.04                                     
...

## ERROR:


=> [53/71] RUN mkdir Output Dataset                                                                                       0.4s
 => [54/71] WORKDIR /home/panoptic_slam                                                                                    0.1s
 => ERROR [55/71] RUN . .venv/bin/activate &&     pip3 install torch==1.13.1+cu116 torchvision==0.14.1+cu116 --extra-inde  3.6s
------
 > [55/71] RUN . .venv/bin/activate &&     pip3 install torch==1.13.1+cu116 torchvision==0.14.1+cu116 --extra-index-url https://download.pytorch.org/whl/cu116 &&     pip3 install 'git+https://github.com/facebookresearch/detectron2.git@v0.5' &&     pip3 install -r requirements.txt:
1.945 Looking in indexes: https://pypi.org/simple, https://download.pytorch.org/whl/cu116
3.468 ERROR: Could not find a version that satisfies the requirement torch==1.13.1+cu116 (from versions: 1.8.0, 1.8.1, 1.9.0, 1.10.0, 1.10.1, 1.10.2, 1.11.0, 1.12.0, 1.12.1, 1.13.0, 1.13.1, 2.0.0, 2.0.1, 2.1.0, 2.1.1, 2.1.2, 2.2.0, 2.2.1, 2.2.2, 2.3.0, 2.3.1, 2.4.0, 2.4.1)
3.470 ERROR: No matching distribution found for torch==1.13.1+cu116
------
dockerfile:127
--------------------
 126 |     WORKDIR /home/panoptic_slam
 127 | >>> RUN . .venv/bin/activate && \
 128 | >>>     pip3 install torch==1.13.1+cu116 torchvision==0.14.1+cu116 --extra-index-url https://download.pytorch.org/whl/cu116 && \
 129 | >>>     pip3 install 'git+https://github.com/facebookresearch/detectron2.git@v0.5' && \
 130 | >>>     pip3 install -r requirements.txt
 131 |     
--------------------
ERROR: failed to solve: process "/bin/sh -c . .venv/bin/activate &&     pip3 install torch==1.13.1+cu116 torchvision==0.14.1+cu116 --extra-index-url https://download.pytorch.org/whl/cu116 &&     pip3 install 'git+https://github.com/facebookresearch/detectron2.git@v0.5' &&     pip3 install -r requirements.txt" did not complete successfully: exit code: 1

## FIX 1:
#https://discuss.pytorch.org/t/no-matching-distribution-found-for-torch-1-13-1-cu117/174577/6

my pip version:
pip 22.3.1
Below is my command to install cu11.7:

# pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu117
pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu117

print(torch.version)
2.0.1+cu117

I can successfully install cu117

## FIX2:
# https://github.com/AUTOMATIC1111/stable-diffusion-webui/discussions/7848

pip is only going look at pypi.org for packages, so you need to tell pip where to look

You can do this in two ways:

# pip looks on the extra-url first
pip install torch --extra-index-url https://download.pytorch.org/whl/cu117
or use the full url for the wheel

pip install https://download.pytorch.org/whl/cu117/torch-1.13.1%2Bcu117-cp310-cp310-win_amd64.whl



I recommend the former since it can handle dependencies a little better and makes sure you get the right version for your system.

Hopefully this helps!


# https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/7166


## Issues installing PyTorch 1.4 - "No matching distribution found for torch===1.4.0"
## https://stackoverflow.com/questions/60137572/issues-installing-pytorch-1-4-no-matching-distribution-found-for-torch-1-4


#pip install https://download.pytorch.org/whl/cu101/torch-1.4.0-cp38-cp38-linux_x86_64.whl
#pip install https://download.pytorch.org/whl/cu101/torchvision-0.5.0-cp38-cp38-linux_x86_64.whl


pip install https://download.pytorch.org/whl/cu116/torch-1.13.1-cp38-cp38-linux_arm_64.whl

pip install https://download.pytorch.org/whl/cu116/torchvision-0.14.1-cp38-cp38-arm_x86_64.whl


------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
## RealSense L515
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
## KONTEXT:

Munesh
3 years ago Edited
Hi Boris,

Our apologies for the delay in replying to you.

Intel has decided to wind down the "RealSense" business unit and is announcing the End-Of-Life (EOL) of LiDAR (L515), Facial Authentication (F455) and Tracking (T265) product lines. For these specific products, we will provide a 6-month EOL and Last Time Buy period for these EOL products (as of February 2022).

However, as for the Stereo Product Line, Intel WILL continue to provide the following stereo products: D415, 430, 450, modules and D415, 435, 435i, D455 integrated product lines.

We cannot comment further on roadmap changes. We will continue to provide support for all RealSense products.

 

Please visit the following page for our recommended alternatives for the discontinued products.

Message To Customers
------------------------------------------------------------------------------------------



## IntelRealSense realsense-ros
## https://github.com/IntelRealSense/realsense-ros/issues/3262

Q:______
<Describe your issue / question / feature request / etc..>
i have 3 camera, two D435i and one L515, when i make: ros2 launch realsense2_camera rs_launch, d435i are ok, but l515 show "No realsense devices were found", do you know why?

A:______
Support for L515 ended in librealsense version 2.54.1 because it is a retired camera model. If you are using the RealSense ROS wrapper then I recommend installing the 2.50.0  <<<<<<<<<< --------------
or 2.51.1 version of librealsense, and using the 4.51.1 ROS2 wrapper in order for your L515 to be detected.

Q:______
Thanks for ur reply. But it seems the 2.54.1 version doesn't support ubuntu 22.04 because of the kernel version problem. The focal patches only support up to 5.11 kernel. Is there a better solution that I can launch l515 on 22.04?

A:______
You could build 2.51.1 from source code using the RSUSB Backend procedure described at IntelRealSense/librealsense#9931 (comment) <<< https://github.com/IntelRealSense/librealsense/issues/9931#issuecomment-964289692

The 2.51.1 librealsense version's source code can be downloaded from the 'Assets' file list at the bottom of the page linked to below.

https://github.com/IntelRealSense/librealsense/releases/tag/v2.51.1

When librealsense is installed with the RSUSB Backend method, the build is not dependent on a particular Linux version or kernel version and does not require a kernel patch script to be run.

@@@@
Once librealsense 2.51.1 has been successfully installed then you can build the 4.51.1 ROS2 wrapper from source code. There is a custom 'forked' version of 4.51.1 created by a RealSense ROS user at the link below that you could build.
@@@@

https://github.com/Unlimited-Robotics/realsense-ros-4.51.1

ROS2 Wrapper for Intel¬Æ RealSense‚Ñ¢ Devices
These are packages for using Intel RealSense cameras (D400 and L500 series, SR300 camera and T265 Tracking Module) with ROS2.


LibRealSense supported version: v2.51.1 (see realsense2_camera release notes)
_________



------------------------------------------------------------------------------------------
>>>>>>>>> ROS2 Dashing, Eloquent, Foxy, Galactic, Rolling, Humble, Iron, >>>>>>>>>
------------------------------------------------------------------------------------------

_______
https://github.com/IntelRealSense/librealsense/issues/9931#issuecomment-964289692
## RealSense error calling: failed Last Error: Protocol error #9931

The procedure below requires an active internet connection.

Obtain the source code for the librealsense SDK. You can do this by going to the 'Assets' file list at the bottom of the listing for each version on the SDK Releases page and left-clicking on the
to download it as a zipped file.
https://github.com/IntelRealSense/librealsense/releases

image

Extract the zipped file to obtain the librealsense SDK folder and go to the folder's 'root' directory. This is the one with a list of files and folders in, and will typically be at the folder location librealsense > librealsense

image

From this root directory with the CMakeLists.txt file in, input the command mkdir build && cd build to create a sub-directory called 'build' and automatically navigate to it.

Now that you are in the 'build' directory, input the command below to use CMake to build the librealsense SDK from source code with example programs and tools such as the RealSense Viewer included.

cmake ../ -DFORCE_RSUSB_BACKEND=true -DCMAKE_BUILD_TYPE=release -DBUILD_EXAMPLES=true -DBUILD_GRAPHICAL_EXAMPLES=true

Finally, input the command below.
sudo make uninstall && make clean && make -j8 && sudo make install



------------------------------------------------------------------------------------------
## https://github.com/introlab/rtabmap_ros/issues/1174
------------------------------------------------------------------------------------------
## Fusing RGBD odometry and wheel odometry on ROS2 Humble #1174

I'm trying to do something like #398 where I want to fuse wheel odometry and rgbd odometry to get a more accurate odometry before feeding it to rtabmap.



However I can't seem to get these nodes to communicate with each other properly. Currently I am using this command to launch rtabmap (use_sim_time is true because I'm using ros2 bag playback on a separate development machine):

ros2 launch rtabmap_launch rtabmap.launch.py \
        rtabmap_args:="--delete_db_on_start" \
        odom_topic:=odom \
        rgb_topic:=/oak/rgb/image_raw \
        depth_topic:=/oak/stereo/image_raw \
        camera_info_topic:=/oak/rgb/camera_info \
        imu_topic:=/imu \
        approx_sync:=true \
        use_sim_time:=true \
        rviz:=false \
        rtabmap_viz:=true \
        frame_id:=base_link \
        visual_odometry:=true \
        vo_frame_id:=vo \
        odom_guess_frame_id:=odom \
        odom_frame_id:=vo


and the following for robot_localization (use_sim_time = True is injected into this launch script):

ros2 launch robot_localization ekf.launch.py
This is not currently working, and the mapping results are worse than if I only launched rtabmap without robot_localization. It seems like some transforms or topics are not properly configured, as rqt_graph gives me

image


and ros2 run tf2_tools view_frames gives me

It seems like rtabmap is receiving something from robot_localization but not through the intended /odometry/filered topic.

Given the above context, I had a few questions, and please feel free to just redirect me to another resource if it solves my problem and I just didn't find it earlier.

Q:_____________

1. Is my launch script correct? I tried to follow How to make rtabmap use both visual odometer and wheel odometer? #398 and other tutorials as close as possible, but those mainly reference ROS1 and not everything seems to transfer over to ROS2 directly.

2. Are there any resources for doing this in ROS2?

3. Is my odom_topic correct? What does this argument do? rgb_topic, depth_topic, etc all seems intuitive as those are just set to the topic name of where the data comes from. But for odom_topic, it seems to affect the odom input topic, rgbd_odom output topic, and the frame_id of the output transform. Using odom_topic:=/odom messed up a lot of things while odom_topic:=odom seems fine. I don't quite understand how this argument works.

4.If guess_frame_id is already set to wheel odometry, and rgbd_odom just publishes corrections to wheel odometry, then isn't wheel odometry already fused with rgbd_odometry? Do we still need robot_localization to fuse the two together? My intuition suggests that rgbd and wheel odometry can be done completely independently, and then they independently publish transforms odom->base_link and vo->base_link and separately publish odometry messages, and THEN we fuse them. However when I followed How to make rtabmap use both visual odometer and wheel odometer? #398 it (as expected) just published vo->odom->base_link, and I couldn't figure out how the odometry messages were being passed between the nodes.
Thank you very much for your time!

A:_____________
Make sure TF for wheel odometry and visual odometry are not published, robot_localization will publish it. For VO, add publish_tf_odom:=false to rtabmap.launch.py command to disable it. For wheel odometry, this is specific to your robot to how to disable it.

odom_guess_frame_id could be the TF of robot_localization, or not set if you want to disjoint wheel odometry from visual odometry. Setting odom_guess_frame_id makes vo publishing the TF correction (vo frame to wheel frame), but the published topic is still vo->base_link (like wheel odometry topic). But if publish_tf_odom:=false, then only the topic is published.

If you set odom_topic, by default vo_frame_id will be set to same value. Explicitly set vo_frame_id if you don't want the same value in odom_topic and vo_frame_id.

odom_frame_id should be set to TF frame of robot_localization. rtabmap won't subscribe to odom topic published by vo but use TF odom from robot_localization.



Q____

Hi matlabbe,

Thank you very much for the response! It seems like I need to take more care in what messages to pass through TFs. I might not be able to disable the robot from publishing wheel odometry (I'm using turtlebot 4). In that case, is it possible to completely disable the usage of TF in rtabmap? If not then I'll need to find a workaround.

hiroshi-automind
hiroshi-automind commented on Jun 17, 2024
hiroshi-automind
on Jun 17, 2024
Author
Hi, sorry for the onslaught of questions. Is rtabmap-ros different from rtabmap standalone? The standalone version seems to only rely on the input from a rgbd/stereo camera, but the ros version seems to depend more on wheel odometry.

matlabbe
matlabbe commented on Jun 24, 2024
matlabbe
on Jun 24, 2024
Member
We rely on TF to get more accurate odometry corresponding on input data stamps (image or lidar). If the odometry topic is linked to rtabmap node, then just the covariance is actually used from that topic. There is a way to ignore using TF if it doesn't exist, set wait_for_transform to 0 to avoid rtabmap waiting for that TF. It will then use the stamp from odometry topic instead of the data as reference.

To avoid publishing any TF, set publish_tf to false for rtabmap's odometry nodes and rtabmap node. To do this, you may not be able to use rtabmap.launch.py, but would have to use the nodes directly (here are some examples using the nodes directly in a custom launch file).

For turtlebot4, I am currently working on an example with nav2 (replacing slam_toolbox), though I have still some issues I don't understand with the simulator before I officially release the example. You may try this:

ros2 launch rtabmap_launch rtabmap.launch.py \
       rtabmap_viz:=true \
       subscribe_scan:=true \
       rgbd_sync:=true \
       depth_topic:=/oak/stereo/image_raw \
       camera_info_topic:=/oak/rgb/camera_info \
       rgb_topic:=/oak/rgb/image_raw \
       visual_odometry:=false  \
       approx_sync:=true \
       approx_rgbd_sync:=false \
       guess_odom_frame_id:=odom \
       icp_odometry:=true \
       odom_topic:="icp_odom" \
       namespace:="/" \
       qos:=2 \
       odom_log_level:=warn \
       rtabmap_args:="--delete_db_on_start --Reg/Strategy 1 --Reg/Force3DoF true"
If you don't have the lidar, you may do this instead:

ros2 launch rtabmap_launch rtabmap.launch.py \
       rtabmap_viz:=true \
       rgbd_sync:=true \
       depth_topic:=/oak/stereo/image_raw \
       camera_info_topic:=/oak/rgb/camera_info \
       rgb_topic:=/oak/rgb/image_raw \
       visual_odometry:=true  \
       approx_sync:=false \
       approx_rgbd_sync:=false \
       guess_odom_frame_id:=odom \
       odom_topic:="vo" \
       namespace:="/" \
       qos:=2 \
       odom_log_level:=warn \
       rtabmap_args:="--delete_db_on_start --Reg/Force3DoF true"
I am not sure about the qos value for the real robot, you can remove it to use default.

You can use rtabmap without wheel odometry in ROS, though most robots have already wheel odometry or something equivalent that is useful to use. When we set guess_frame_id for rtabmap's odometry nodes (from rtabmap.launch.py, use guess_odom_frame_id), if rtabmap's odometry gets lost, it will redirect wheel odometry output instead so that the robot has always valid odometry (though less accurate till rtabmap's odometry can work again). Using wheel odometry as guess frame is also used as prediction when doing feature matching or lidar registration. And I think the most useful part is that sometime robot's odometry cannot be easily disabled, so when using it as guess, rtabmap will publish its odom TF in a way that not breaks the TF tree. For example, after basic bringup the robot (without any mapping nodes), the TF tree would look like this:

odom -> base_link -> camera_link -> camera_optical_link...
Doing the second example above, the TF tree will look like this:

map -> vo -> odom -> base_link -> camera_link -> camera_optical_link...
where vo->odom is the visual odometry correction of the wheel odometry.

Rtabmap standalone doesn't have odometry input because it is mostly used as handled scanning and not on a robot.






------------------------------------------------------------------------------------------
## Setup RTAB-Map on Your Robot!
------------------------------------------------------------------------------------------
## https://wiki.ros.org/rtabmap_ros/Tutorials/SetupOnYourRobot#Kinect_.2B-_Odometry
## This tutorial shows multiple RTAB-Map configurations that can be used on your robot.

/..../


------------------------------------------------------------------------------------------
## rtabmap_rosTutorialsNoeticHandHeldMapping >>>>>>>>> RealSense D400/L515 + T265
------------------------------------------------------------------------------------------
## https://wiki.ros.org/rtabmap_ros/TutorialsNoetic/HandHeldMapping
## rtabmap_rosTutorialsNoeticHandHeldMapping
## RGB-D Handheld Mapping


### 1. RGB and depth sensors
#
# The RGB-D sensors which are OpenNI and OpenNI2 compliant would work out-of-the-box using openni_launch,
# openni2_launch, freenect_launch, iai_kinect2 or Zed packages. Sensors tested:
#

## RealSense D400/L515 + T265

Based on your setup, make sure to edit the static transform between the cameras in that launch file.

$ roslaunch realsense2_camera rs_d400_and_t265.launch

<launch>
  <arg name="device_type_camera1"    		default="t265"/>
  <arg name="device_type_camera2"    		default="d4.5"/>		<!-- Note: using regular expression. match D435, D435i, D415... -->
  <arg name="serial_no_camera1"    			default=""/>
  <arg name="serial_no_camera2"    			default=""/>
  <arg name="camera1"              			default="t265"/>
  <arg name="camera2"              			default="d400"/>
  <arg name="tf_prefix_camera1"         default="$(arg camera1)"/>
  <arg name="tf_prefix_camera2"         default="$(arg camera2)"/>
  <arg name="initial_reset"             default="false"/>
  <arg name="enable_fisheye"            default="false"/>
  <arg name="color_width"               default="640"/>
  <arg name="color_height"              default="480"/>
  <arg name="depth_width"               default="640"/>
  <arg name="depth_height"              default="480"/>
  <arg name="clip_distance"             default="-2"/>
  <arg name="topic_odom_in"             default="odom_in"/>
  <arg name="calib_odom_file"           default=""/>

  <group ns="$(arg camera1)">
    <include file="$(find realsense2_camera)/launch/includes/nodelet.launch.xml">
      <arg name="device_type"           value="$(arg device_type_camera1)"/>
      <arg name="serial_no"             value="$(arg serial_no_camera1)"/>
      <arg name="tf_prefix"         		value="$(arg tf_prefix_camera1)"/>
      <arg name="initial_reset"         value="$(arg initial_reset)"/>
      <arg name="enable_fisheye1"       value="$(arg enable_fisheye)"/>
      <arg name="enable_fisheye2"       value="$(arg enable_fisheye)"/>
      <arg name="topic_odom_in"         value="$(arg topic_odom_in)"/>
      <arg name="calib_odom_file"       value="$(arg calib_odom_file)"/>
      <arg name="enable_pose"           value="true"/>
    </include>
  </group>

  <group ns="$(arg camera2)">
    <include file="$(find realsense2_camera)/launch/includes/nodelet.launch.xml">
      <arg name="device_type"           value="$(arg device_type_camera2)"/>
      <arg name="serial_no"             value="$(arg serial_no_camera2)"/>
      <arg name="tf_prefix"		          value="$(arg tf_prefix_camera2)"/>
      <arg name="initial_reset"         value="$(arg initial_reset)"/>
      <arg name="align_depth"           value="true"/>
      <arg name="filters"               value="pointcloud"/>
      <arg name="color_width"           value="$(arg color_width)"/>
      <arg name="color_height"          value="$(arg color_height)"/>
      <arg name="depth_width"           value="$(arg depth_width)"/>
      <arg name="depth_height"          value="$(arg depth_height)"/>
      <arg name="clip_distance"         value="$(arg clip_distance)"/>
    </include>
  </group>
  <node pkg="tf" type="static_transform_publisher" name="t265_to_d400" args="0 0 0 0 0 0 /$(arg tf_prefix_camera1)_link /$(arg tf_prefix_camera2)_link 100"/>
</launch>


## RealSense D435i/L515

# ISSUE: Use unite_imu_method:="copy" if imu topics keep stopping
$ roslaunch realsense2_camera rs_camera.launch \
    align_depth:=true \
    unite_imu_method:="linear_interpolation" \
    enable_gyro:=true \
     enable_accel:=true

$ rosrun imu_filter_madgwick imu_filter_node \
    _use_mag:=false \
    _publish_tf:=false \
    _world_frame:="enu" \
    /imu/data_raw:=/camera/imu \
    /imu/data:=/rtabmap/imu


### 2. Mapping mode
#
#
#
There are two choices for online visualization: rtabmap_viz or rviz. With the RVIZ plugin rtabmap/MapCloud, the clouds can be incrementally added to RVIZ. However using rtabmap_viz, the interface should look like the tutorials of the standalone version. With the launch file rtabmap.launch below, set rviz:=true to open rviz and rtabmap_viz:=true to open rtabmap_viz (default true) for visualization.


For RealSense D400/L515 + T265

 $ roslaunch rtabmap_launch rtabmap.launch \
   args:="-d --Mem/UseOdomGravity true --Optimizer/GravitySigma 0.3" \
   odom_topic:=/t265/odom/sample \
   frame_id:=t265_link \
   rgbd_sync:=true \
   depth_topic:=/d400/aligned_depth_to_color/image_raw \
   rgb_topic:=/d400/color/image_raw \
   camera_info_topic:=/d400/color/camera_info \
   approx_rgbd_sync:=false \
   visual_odometry:=false \
   queue_size:=30


For RealSense D435i/L515

 $ roslaunch rtabmap_launch rtabmap.launch \
    rtabmap_args:="--delete_db_on_start --Optimizer/GravitySigma 0.3" \
    depth_topic:=/camera/aligned_depth_to_color/image_raw \
    rgb_topic:=/camera/color/image_raw \
    camera_info_topic:=/camera/color/camera_info \
    approx_sync:=false \
    wait_imu_to_init:=true \
    imu_topic:=/rtabmap/imu

For RealSense L515: ICP odometry example(ref). See D435i example above for visual odometry.

$ rosrun nodelet nodelet standalone rtabmap_util/point_cloud_xyz \
    _approx_sync:=false  \
    /depth/image:=/camera/depth/image_rect_raw \
    /depth/camera_info:=/camera/depth/camera_info \
    _decimation:=4

$ roslaunch rtabmap_launch rtabmap.launch\
    rtabmap_args:="\
      --delete_db_on_start \
      --Icp/VoxelSize 0.05 \
      --Icp/PointToPlaneRadius 0 \
      --Icp/PointToPlaneK 20 \
      --Icp/CorrespondenceRatio 0.2 \
      --Icp/PMOutlierRatio 0.65 \
      --Icp/Epsilon 0.005 \
      --Icp/PointToPlaneMinComplexity 0 \
      --Odom/ScanKeyFrameThr 0.7 \
      --OdomF2M/ScanMaxSize 15000 \
      --Optimizer/GravitySigma 0.3 \
      --RGBD/ProximityPathMaxNeighbors 1 \
      --Reg/Strategy 1" \
    icp_odometry:=true \
    scan_cloud_topic:=/cloud \
    subscribe_scan_cloud:=true \
    depth_topic:=/camera/aligned_depth_to_color/image_raw \
    rgb_topic:=/camera/color/image_raw \
    camera_info_topic:=/camera/color/camera_info \
    approx_sync:=false \
    wait_imu_to_init:=true \
    imu_topic:=/rtabmap/imu 








source /opt/ros/${ROS_DISTRO}/setup.bash


-----------------------------------------------------------------------------------------
## DOCKER rtabmap_ros 
-----------------------------------------------------------------------------------------
# https://github.com/introlab/rtabmap_ros/tree/ros2/docker


## CREATE:

Docker
Available images on introlab3it/rtabmap_ros:

foxy, foxy-latest
humble, humble-latest

The -latest images are automatically built from latest version of rtabmap and rtabmap_ros from source (including dependencies that are not available with ROS binaries). The other images have the same version than the binaries released on ROS.

docker pull introlab3it/rtabmap_ros:humble-latest

# RUN:
Launch rtabmap from inside the container (no gui), saving the database on host ~/.ros/rtabmap.db:

docker run -it --rm \
 --user $UID \
 -e ROS_HOME=/tmp/.ros \
 -e OMP_WAIT_POLICY=passive \
 --network=host \
 --ipc=host \
 -v ~/.ros:/tmp/.ros \
 introlab3it/rtabmap_ros:humble-latest \
 ros2 launch rtabmap_launch rtabmap.launch.py rtabmap_viz:=false database_path:=/tmp/.ros/rtabmap.db rtabmap_args:="--delete_db_on_start"

## WORK

[rtabmap-2] rtabmap subscribed to (exact sync):
[rtabmap-2]    /rtabmap/odom \
[rtabmap-2]    /camera/rgb/image_rect_color \
[rtabmap-2]    /camera/depth_registered/image_raw \
[rtabmap-2]    /camera/rgb/camera_info \
[rtabmap-2]    /rtabmap/odom_info


$ ros2 topic list
/camera/depth_registered/image_raw
/camera/rgb/camera_info
/camera/rgb/image_rect_color
/diagnostics
/goal_pose
/gps/fix
/imu/data
/parameter_events
/rosout
/rtabmap/cloud_ground
/rtabmap/cloud_map
/rtabmap/cloud_obstacles
/rtabmap/elevation_map
/rtabmap/global_path
/rtabmap/global_path_nodes
/rtabmap/global_pose
/rtabmap/goal
/rtabmap/goal_node
/rtabmap/goal_reached
/rtabmap/grid_prob_map
/rtabmap/info
/rtabmap/initialpose
/rtabmap/labels
/rtabmap/landmark_detection
/rtabmap/landmark_detections
/rtabmap/landmarks
/rtabmap/local_grid_empty
/rtabmap/local_grid_ground
/rtabmap/local_grid_obstacle
/rtabmap/local_path
/rtabmap/local_path_nodes
/rtabmap/localization_pose
/rtabmap/map
/rtabmap/mapData
/rtabmap/mapGraph
/rtabmap/mapOdomCache
/rtabmap/mapPath
/rtabmap/octomap_binary
/rtabmap/octomap_empty_space
/rtabmap/octomap_full
/rtabmap/octomap_global_frontier_space
/rtabmap/octomap_grid
/rtabmap/octomap_ground
/rtabmap/octomap_obstacles
/rtabmap/octomap_occupied_space
/rtabmap/odom
/rtabmap/odom_info
/rtabmap/odom_info_lite
/rtabmap/odom_last_frame
/rtabmap/odom_local_map
/rtabmap/odom_local_scan_map
/rtabmap/odom_rgbd_image
/rtabmap/odom_sensor_data/compressed
/rtabmap/odom_sensor_data/features
/rtabmap/odom_sensor_data/raw
/rtabmap/rtabmap/republish_node_data
/tf
/tf_static
/user_data_async

.........


docker run -it --rm \
 --user $UID \
 -e ROS_HOME=/tmp/.ros \
 -e OMP_WAIT_POLICY=passive \
 --network=host \
 --ipc=host \
 -v ~/.ros:/tmp/.ros \
 -v .:/opt/ros/humble/share/rtabmap_launch \
 -v /opt/ros/humble/rviz2:/opt/ros/humble/rviz2 \
 introlab3it/rtabmap_ros:humble-latest \
 ros2 launch rtabmap_launch test_velodyne_t265_deskewing.launch rtabmap_viz:=false database_path:=/tmp/.ros/rtabmap.db rtabmap_args:="--delete_db_on_start" 

## 


docker run -it --rm \
 --user $UID \
 -e ROS_HOME=/tmp/.ros \
 -e OMP_WAIT_POLICY=passive \
 --network=host \
 --ipc=host \
 -v ~/.ros:/tmp/.ros \
 introlab3it/rtabmap_ros:humble-latest /bin/bash









Launch rtabmap_viz from inside the container, using nvidia-docker2 approach:

 # those following 3 lines would need to be done only one time
 XAUTH=/tmp/.docker.xauth
 touch $XAUTH
 xauth nlist $DISPLAY | sed -e 's/^..../ffff/' | xauth -f $XAUTH nmerge -

 docker run -it --rm \
   --privileged \
   -e DISPLAY=$DISPLAY \
   -e QT_X11_NO_MITSHM=1 \
   -e NVIDIA_VISIBLE_DEVICES=all \
   -e NVIDIA_DRIVER_CAPABILITIES=all \
   -e XAUTHORITY=$XAUTH \
   -e OMP_WAIT_POLICY=passive \
   --user $UID \
   -e ROS_HOME=/tmp/.ros \
   -v ~/.ros:/tmp/.ros \
   --runtime=nvidia \
   --network=host \
   --ipc=host \
   -v $XAUTH:$XAUTH \
   -v /tmp/.X11-unix:/tmp/.X11-unix \
   introlab3it/rtabmap_ros:humble-latest \
   /bin/bash -c "ros2 run rtabmap_viz rtabmap_viz --ros-args -r __ns:=/rtabmap"

## WORK























sudo apt-get install ros-humble-rqt ros-humble-rqt-common-plugins
sudo apt-get install ros-humble-rqt-robot-plugins
sudo apt-get install ros-humble-rqt-tf-tree


cd ~
sudo apt update
sudo apt install ros-humble-rqt-gui 
sudo apt install ros-humble-rqt-gui-cpp ros-humble-rqt-gui-py




https://github.com/ros-visualization/rqt_tf_tree.git
sudo apt install ros-foxy-realsense2-camera
sudo apt install ros-humble-rqt-tf-tree
sudo apt install ros-humble-rqt-tf-tree


ros2 run tf2_tools view_frames




/home/silenzio/ros2_ws/install/omni/share/omni/rviz/omni.rviz

/home/silenzio/ros2_ws/install/omni/share/omni/rviz/omni.rviz



docker build -t librealsense2 --build-arg LIBRS_VERSION=2.50.0 .

_____________________________________________
ARG BASE_IMAGE=ubuntu:20.04  #22.04
#ARG BASE_IMAGE=dustynv/ros:foxy-ros-core-l4t-r35.4.1
#################################
#   Librealsense Builder Stage  #
#################################
FROM $BASE_IMAGE as librealsense-builder

ARG LIBRS_VERSION
# Make sure that we have a version number of librealsense as argument
RUN test -n "$LIBRS_VERSION"

# To avoid waiting for input during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Builder dependencies installation
RUN apt-get update \
    && apt-get install -qq -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libssl-dev \
    libusb-1.0-0-dev \
    pkg-config \
    libgtk-3-dev \
    libglfw3-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \    
    curl \
    python3 \
    python3-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Download sources
WORKDIR /usr/src
RUN curl https://codeload.github.com/IntelRealSense/librealsense/tar.gz/refs/tags/v$LIBRS_VERSION -o librealsense.tar.gz 
RUN tar -zxf librealsense.tar.gz \
    && rm librealsense.tar.gz 
RUN ln -s /usr/src/librealsense-$LIBRS_VERSION /usr/src/librealsense

# Build and install
RUN cd /usr/src/librealsense \
    && mkdir build && cd build \
    && cmake \
    -DCMAKE_C_FLAGS_RELEASE="${CMAKE_C_FLAGS_RELEASE} -s" \
    -DCMAKE_CXX_FLAGS_RELEASE="${CMAKE_CXX_FLAGS_RELEASE} -s" \
    -DCMAKE_INSTALL_PREFIX=/opt/librealsense \    
    -DBUILD_GRAPHICAL_EXAMPLES=OFF \
    -DBUILD_PYTHON_BINDINGS:bool=true \
    -DCMAKE_BUILD_TYPE=Release ../ \
    && make -j$(($(nproc)-1)) all \
    && make install 

######################################
#   librealsense Base Image Stage    #
######################################
FROM ${BASE_IMAGE} as librealsense
#FROM dustynv/ros:foxy-ros-core-l4t-r35.4.1 as librealsense


# Copy binaries from builder stage
COPY --from=librealsense-builder /opt/librealsense /usr/local/
COPY --from=librealsense-builder /usr/lib/python3/dist-packages/pyrealsense2 /usr/lib/python3/dist-packages/pyrealsense2
COPY --from=librealsense-builder /usr/src/librealsense/config/99-realsense-libusb.rules /etc/udev/rules.d/
ENV PYTHONPATH=$PYTHONPATH:/usr/local/lib

# Install dep packages
RUN apt-get update \
    && apt-get install -y --no-install-recommends \	
    libusb-1.0-0 \
    udev \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Shows a list of connected Realsense devices
CMD [ "rs-enumerate-devices", "--compact" ]
_____________________________________________


docker build -t ros_foxy_librealsense2 --build-arg LIBRS_VERSION=2.50.0 .

_____________________________________________
ARG BASE_IMAGE=ubuntu:20.04  #22.04
#ARG BASE_IMAGE=dustynv/ros:foxy-ros-core-l4t-r35.4.1
#################################
#   Librealsense Builder Stage  #
#################################
FROM $BASE_IMAGE as librealsense-builder

ARG LIBRS_VERSION
# Make sure that we have a version number of librealsense as argument
RUN test -n "$LIBRS_VERSION"

# To avoid waiting for input during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Builder dependencies installation
RUN apt-get update \
    && apt-get install -qq -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libssl-dev \
    libusb-1.0-0-dev \
    pkg-config \
    libgtk-3-dev \
    libglfw3-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \    
    curl \
    python3 \
    python3-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Download sources
WORKDIR /usr/src
RUN curl https://codeload.github.com/IntelRealSense/librealsense/tar.gz/refs/tags/v$LIBRS_VERSION -o librealsense.tar.gz 
RUN tar -zxf librealsense.tar.gz \
    && rm librealsense.tar.gz 
RUN ln -s /usr/src/librealsense-$LIBRS_VERSION /usr/src/librealsense

# Build and install
RUN cd /usr/src/librealsense \
    && mkdir build && cd build \
    && cmake \
    -DCMAKE_C_FLAGS_RELEASE="${CMAKE_C_FLAGS_RELEASE} -s" \
    -DCMAKE_CXX_FLAGS_RELEASE="${CMAKE_CXX_FLAGS_RELEASE} -s" \
    -DCMAKE_INSTALL_PREFIX=/opt/librealsense \    
    -DBUILD_GRAPHICAL_EXAMPLES=OFF \
    -DBUILD_PYTHON_BINDINGS:bool=true \
    -DCMAKE_BUILD_TYPE=Release ../ \
    && make -j$(($(nproc)-1)) all \
    && make install 

######################################
#   librealsense Base Image Stage    #
######################################
#FROM ${BASE_IMAGE} as librealsense
FROM dustynv/ros:foxy-ros-core-l4t-r35.4.1 as librealsense

# Copy binaries from builder stage
COPY --from=librealsense-builder /opt/librealsense /usr/local/
COPY --from=librealsense-builder /usr/lib/python3/dist-packages/pyrealsense2 /usr/lib/python3/dist-packages/pyrealsense2
COPY --from=librealsense-builder /usr/src/librealsense/config/99-realsense-libusb.rules /etc/udev/rules.d/
ENV PYTHONPATH=$PYTHONPATH:/usr/local/lib

# Install dep packages
RUN apt-get update \
    && apt-get install -y --no-install-recommends \	
    libusb-1.0-0 \
    udev \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Shows a list of connected Realsense devices
CMD [ "rs-enumerate-devices", "--compact" ]
_____________________________________________



docker build -t librealsense2 --build-arg LIBRS_VERSION=2.50.0 .


@@@@@@@@@
docker build -t ros_foxy_librealsense2 --build-arg LIBRS_VERSION=2.50.0 .
@@@@@@@@@



docker run -it --rm --env LD_LIBRARY_PATH=/lib/aarch64-linux-gnu/libc.so.6 yourimage /bin/bash


docker run -it --rm --env LD_LIBRARY_PATH=/lib/aarch64-linux-gnu/libc.so.6 -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy ros_foxy_librealsense bash 

@@@@@@@@@
docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy ros_foxy_librealsense2 bash 
@@@@@@@@@


docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy librealsense2 bash 


ldd --version

realsense-viewer 

rs-enumerate-devices --compact


source /opt/ros/${ROS_DISTRO}/setup.bash
silenzio@jetson:~$ ros2 topic list
/camera/fisheye1/camera_info
/camera/fisheye1/image_raw
/camera/fisheye1/image_raw/compressed
/camera/fisheye1/image_raw/compressedDepth
/camera/fisheye1/metadata
/camera/fisheye2/camera_info
/camera/fisheye2/image_raw
/camera/fisheye2/image_raw/compressed
/camera/fisheye2/image_raw/compressedDepth
/camera/fisheye2/metadata
/camera/odom/metadata
/camera/odom/sample
/parameter_events
/rosout
/tf
/tf_static



-----------------------------------------------------------------------------------------
## INSTALL ROS Foxy on Ubuntu 22.04 in Docker 
-----------------------------------------------------------------------------------------
## CONTEXT
# https://github.com/IntelRealSense/realsense-ros/issues/2869
# Error connecting to T265 #2869

On my docker container, I have installed the ros-foxy-realsense2-camera package and it all works fine now.
## CONTEXT

# INSTALL DOCKER:
docker pull dustynv/ros:foxy-ros-core-l4t-r35.4.1

foxy-ros-core-l4t-r35.4.1: Pulling from dustynv/ros
2378679266ac: Pull complete 
...
8cde1e3d35bc: Pull complete 
Digest: sha256:8b544f945c1943653e1ad34cfdb7234dc093cfeda32ead68d204bce74bc476c3
Status: Downloaded newer image for dustynv/ros:foxy-ros-core-l4t-r35.4.1
docker.io/dustynv/ros:foxy-ros-core-l4t-r35.4.1

## PULL OK

## RUN:
docker run -it dustynv/ros:foxy-ros-core-l4t-r35.4.1
sourcing   /opt/ros/foxy/install/setup.bash
ROS_DISTRO foxy
ROS_ROOT   /opt/ros/foxy



## sudo apt install ros-foxy-realsense2-camera


root@9be8e74c09e0:/# ls
bin  boot  dev  etc  home  lib  media  mnt  opt  proc  root  ros_entrypoint.sh  run  sbin  srv  sys  tmp  usr  var
root@9be8e74c09e0:/# ./ros_entrypoint.sh
sourcing   /opt/ros/foxy/install/setup.bash
ROS_DISTRO foxy
ROS_ROOT   /opt/ros/foxy

root@9be8e74c09e0:/# ros2
usage: ros2 [-h] Call `ros2 <command> -h` for more detailed usage. ...

ros2 is an extensible command-line tool for ROS 2.

...

root@9be8e74c09e0:/# ros2 pkg list
action_msgs
actionlib_msgs
ament_cmake
ament_cmake_auto
ament_cmake_copyright
...

@@@ WORK!!!

ros2 node list
ros2 topic list
ros2 service list
ros2 action list

ros2 pkg list


ros2 interface list

_________________________
# INSTALL RealSense driver

#docker run -it dustynv/ros:foxy-ros-core-l4t-r35.4.1
#sudo docker run -it --rm -v .:/noetic noetic bash

## RUN
cd foxy/
docker run -it --rm -v .:/foxy dustynv/ros:foxy-ros-core-l4t-r35.4.1 bash


## https://docs.docker.com/build/building/variables/
# https://github.com/IntelRealSense/librealsense/blob/v2.50.0/scripts/Docker/Dockerfile
cd /home/silenzio/lib/librealsense-builder
docker build -t librealsense --build-arg LIBRS_VERSION=2.50.0 .
## BUILD OK

docker run -it --rm -v .:/foxy librealsense bash

oot@29c3ef337482:/foxy# ls
Dockerfile  setup_udev_rules.sh
root@29c3ef337482:/foxy# chmod +x setup_udev_rules.sh


oot@29c3ef337482:/foxy# rs-enumerate-devices
 17/02 12:28:03,694 ERROR [281473211847776] (librealsense-exception.h:52) Cannot identify '/dev/v4l-subdev2 Last Error: No such file or directory
 17/02 12:28:03,694 ERROR [281473211847776] (librealsense-exception.h:52) Cannot identify '/dev/v4l-subdev0 Last Error: No such file or directory
 17/02 12:28:03,694 ERROR [281473211847776] (librealsense-exception.h:52) Cannot identify '/dev/v4l-subdev1 Last Error: No such file or directory
 17/02 12:28:03,694 ERROR [281473211847776] (librealsense-exception.h:52) Cannot identify '/dev/video0 Last Error: No such file or directory
 17/02 12:28:03,719 ERROR [281473211847776] (handle-libusb.h:51) failed to open usb interface: 0, error: RS2_USB_STATUS_NO_DEVICE
 17/02 12:28:03,719 ERROR [281473211847776] (tm-boot.h:42) Failed to open T265 zero interface


## ERROR:
oot@29c3ef337482:/foxy# ./setup_udev_rules.sh
Setting-up permissions for RealSense devices

Failed to send reload request: No such file or directory <<<-----

udev-rules successfully installed

## FIX:

## https://stackoverflow.com/questions/36880565/why-dont-my-udev-rules-work-inside-of-a-running-docker-container
# Why don't my udev rules work inside of a running docker container?

root@37aa55b6a507:/foxy# udevadm monitor

monitor will print the received events for:
UDEV - the event which udev sends out after rule processing
KERNEL - the kernel uevent
...
KERNEL[15538.332536] change   /devices/virtual/thermal/thermal_zone8 (thermal)
KERNEL[15538.726595] add      /devices/platform/bus@0/3610000.usb/usb1/1-2/1-2.1 (usb)
KERNEL[15538.727368] add      /devices/platform/bus@0/3610000.usb/usb1/1-2/1-2.1/1-2.1:1.0 (usb)
KERNEL[15538.727468] bind     /devices/platform/bus@0/3610000.usb/usb1/1-2/1-2.1 (usb)
KERNEL[15539.356399] change   /devices/virtual/thermal/thermal_zone8 (thermal)
...

And for fun you can trigger events by calling:

$ udevadm trigger --subsystem=net --action=change
## NOT WORK...
 
The docker support for udev is obviously limited since docker is not working <<<---
like a virtualization environment in all aspects.


@@@@@@@@@@@@@@@@@@@@@@
## https://github.com/IntelRealSense/librealsense/tree/master/scripts/Docker

docker run -it --rm -v .:/foxy librealsense bash
docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* .:/foxy librealsense bash 
docker run -it --rm -v /dev:/dev -v --device-cgroup-rule "c 81:* rmw" -v --device-cgroup-rule "c 189:* -v .:/foxy librealsense bash 

docker run -it --rm \
-v /dev:/dev \
--device-cgroup-rule "c 81:* rmw" \
--device-cgroup-rule "c 189:* rmw" \
-v .:/foxy librealsense bash 

@@ WORK !!!11

@@@@@@@@@@@@@@@@@@@@@@

$ docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy librealsense bash 

root@822bbd2b6436:/# rs-enumerate-devices --compact
Device Name                   Serial Number       Firmware Version    
Intel RealSense T265          905312111138        0.2.0.951           
Device info: 
    Name                          : 	Intel RealSense T265
    Serial Number                 : 	905312111138
    Firmware Version              : 	0.2.0.951
    Physical Port                 : 	2-1.1-5
    Product Id                    : 	0B37
    Usb Type Descriptor           : 	3.1
    Product Line                  : 	T200


@@@@@@@@@@@@@@@@@@@@@@


docker run -it dustynv/ros:foxy-ros-core-l4t-r35.4.1
cd /home/silenzio/foxy

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy -v /usr/local/lib/cmake:/
usr/local/lib/cmake dustynv/ros:foxy-ros-core-l4t-r35.4.1 bash 


docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy dustynv/ros:foxy-ros-core-l4t-r35.4.1 bash 


cp libc.* /lib/aarch64-linux-gnu/

cd lib_librealsense2
cp -r . /usr/local/lib/
cd ..
cd include_librealsense2
cp -r . /usr/local/include/

cd ..
cp libfw.a /usr/local/lib/

cd /usr/local/lib/
chmod +x librealsense*
chmod +x libfw.a

cd /lib/aarch64-linux-gnu/
chmod +x libc.*

ldconfig


root@65e5f7bb072b:/foxy/catkin_ws# colcon build
Starting >>> diagnostic_updater
Starting >>> realsense2_camera_msgs
Starting >>> diagnostic_aggregator                                                           
Finished <<< diagnostic_updater [1.22s]                                                                                     
Starting >>> self_test
Starting >>> diagnostic_common_diagnostics                                                                                         
Finished <<< diagnostic_aggregator [1.35s]                                                                                             
Finished <<< realsense2_camera_msgs [1.96s]                                                                                        
Starting >>> realsense2_camera
Starting >>> realsense2_description                                                                                                      
Finished <<< diagnostic_common_diagnostics [1.32s]                                                                                        
Finished <<< self_test [1.50s]                                                                                                         
Starting >>> diagnostics
Finished <<< realsense2_description [1.16s]                                                                                              
Finished <<< diagnostics [0.93s]                                                                   
[Processing: realsense2_camera]                             
[Processing: realsense2_camera]                                     
Finished <<< realsense2_camera [1min 5s]                             

Summary: 8 packages finished [1min 10s]

##BUILD OK


## RUN:

source install/setup.bash

root@65e5f7bb072b:/foxy/catkin_ws# cd /
./ros_entrypoint.sh

cd foxy/catkin_ws/

. install/local_setup.bash

## ERROR:
root@65e5f7bb072b:/foxy/catkin_ws# ros2 launch realsense2_camera rs_launch.py
[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-17-16-56-24-033396-65e5f7bb072b-3856
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [3858]

[realsense2_camera_node-1] terminate called after throwing an instance of 'class_loader::LibraryLoadException'

[realsense2_camera_node-1]   what():  Could not load library LoadLibrary error: librealsense2.so.2.50: cannot open shared object file: No such file or directory, at /opt/ros/foxy/src/rcutils/src/shared_library.c:84

[ERROR] [realsense2_camera_node-1]: process has died [pid 3858, exit code -6, cmd '/foxy/catkin_ws/install/realsense2_camera/lib/realsense2_camera/realsense2_camera_node --ros-args --log-level info --ros-args -r __node:=camera -r __ns:=/camera --params-file /tmp/launch_params_d8e3_l2c'].


docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy -v /usr/local/lib/cmake:/usr/local/lib/cmake dustynv/ros:foxy-ros-core-l4t-r35.4.1 bash 


# ros2 launch realsense2_camera rs_launch.py
[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-17-17-12-15-946176-fbf2ca52e046-102
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [104]
[realsense2_camera_node-1] terminate called after throwing an instance of 'class_loader::LibraryLoadException'
[realsense2_camera_node-1]   what():  Could not load library LoadLibrary error: librealsense2.so.2.50: cannot open shared object file: No such file or directory, at /opt/ros/foxy/src/rcutils/src/shared_library.c:84
[ERROR] [realsense2_camera_node-1]: process has died [pid 104, exit code -6, cmd '/foxy/catkin_ws/install/realsense2_camera/lib/realsense2_camera/realsense2_camera_node --ros-args --log-level info --ros-args -r __node:=camera -r __ns:=/camera --params-file /tmp/launch_params_9dxnazh2'].


root@fbf2ca52e046:/foxy/catkin_ws# ldconfig
/sbin/ldconfig.real: File /lib/aarch64-linux-gnu/libv4lconvert.so.0.0.999999 is empty, not checked.
/sbin/ldconfig.real: File /lib/aarch64-linux-gnu/libgstnvivameta.so is empty, not checked.
/sbin/ldconfig.real: File /lib/aarch64-linux-gnu/libv4l2.so.0.0.999999 is empty, not checked.
/sbin/ldconfig.real: File /lib/aarch64-linux-gnu/libnvsample_cudaprocess.so is empty, not checked.
/sbin/ldconfig.real: File /lib/aarch64-linux-gnu/libgstnvexifmeta.so is empty, not checked.
/sbin/ldconfig.real: File /lib/aarch64-linux-gnu/libnvcucompat.so is empty, not checked.
/sbin/ldconfig.real: File /lib/aarch64-linux-gnu/libcuda.so is empty, not checked.
/sbin/ldconfig.real: File /lib/aarch64-linux-gnu/libvulkan.so.1.3.204 is empty, not checked.
/sbin/ldconfig.real: File /lib/aarch64-linux-gnu/libgstnvegl-1.0.so.0 is empty, not checked.
/sbin/ldconfig.real: /usr/local/lib/librealsense2-gl.so.2.50 is not a symbolic link

/sbin/ldconfig.real: /usr/local/lib/librealsense2.so.2.50 is not a symbolic link


ros2 launch realsense2_camera rs_launch.py
[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-17-17-13-22-835451-fbf2ca52e046-110
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [realsense2_camera_node-1]: process started with pid [112]

[realsense2_camera_node-1] terminate called after throwing an instance of 'class_loader::LibraryLoadException'
[realsense2_camera_node-1]   what():  Could not load library LoadLibrary error: /lib/aarch64-linux-gnu/libc.so.6: version `GLIBC_2.32' not found (required by /usr/local/lib/librealsense2.so.2.50), at /opt/ros/foxy/src/rcutils/src/shared_library.c:84

[ERROR] [realsense2_camera_node-1]: process has died [pid 112, exit code -6, cmd '/foxy/catkin_ws/install/realsense2_camera/lib/realsense2_camera/realsense2_camera_node --ros-args --log-level info --ros-args -r __node:=camera -r __ns:=/camera --params-file /tmp/launch_params_whf7q506'].


### https://askubuntu.com/questions/1345342/how-to-install-glibc-2-32-when-i-already-have-glibc2-31
# How to Install glibc 2.32 when I already have glibc2.31

If you need glibc version other than the one shipped with ubuntu, one way is to install manually to a temp location in your $HOME. (installing in /usr would mess up with existing glibc in case something goes wrong)

mkdir $HOME/glibc/ && cd $HOME/glibc
wget http://ftp.gnu.org/gnu/libc/glibc-2.32.tar.gz
tar -xvzf glibc-2.32.tar.gz
mkdir build 
mkdir glibc-2.32-install
cd build
~/glibc/glibc-2.32/configure --prefix=$HOME/glibc/glibc-2.32-install
make
make install
Now you should have glibc 2.32 installed in the installation directory. You may check with ~/glibc/glibc-2.32-install/bin/ldd --version


root@cd6ed054371b:/foxy# ldd --version

ldd (Ubuntu GLIBC 2.31-0ubuntu9.9) 2.31
Copyright (C) 2020 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Written by Roland McGrath and Ulrich Drepper.




+++++++++++++++++++






docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy ros_foxy_librealsense bash 





#/usr/local/lib/cmake/realsense2/realsense2Config.cmake

export realsense2_DIR=/usr/local/lib/cmake/realsense2/
##export realsense2_INCLUDE_DIR=/home/silenzio/librealsense/include/librealsense2/h


docker run -it dustynv/ros:foxy-ros-core-l4t-r35.4.1
cd /home/silenzio/foxy
docker run -it --rm -v /dev:/dev \
--device-cgroup-rule "c 81:* rmw" \
--device-cgroup-rule "c 189:* rmw" \
-v /home/silenzio/librealsense/build:/home/silenzio/librealsense/build \

dustynv/ros:foxy-ros-core-l4t-r35.4.1 bash 




@@ WORK!





git clone --depth 1 --branch v2.50.0 https://github.com/IntelRealSense/librealsense


git clone --depth 1 --branch ros2-legacy https://github.com/IntelRealSense/realsense-ros


realsense2_description: Cannot locate rosdep definition for [xacro]
realsense2_camera: Cannot locate rosdep definition for [diagnostic_updater]

git clone --depth 1 --branch stale/foxy https://github.com/ros/diagnostics
















# https://stackoverflow.com/questions/27409761/docker-multiple-dockerfiles-in-project
Docker: Multiple Dockerfiles in project

483

In newer versions(>=1.8.0) of docker, you can do this

docker build -f Dockerfile.db .
docker build -f Dockerfile.web .
A big save.


EDIT: comment from @vsevolod: it's possible to get syntax highlighting in VS code by giving files .Dockerfile extension(instead of name) e.g. Prod.Dockerfile, Test.Dockerfile etc.











git clone --depth 1 --branch v2.50.0 https://github.com/IntelRealSense/librealsense

## WORK!!##!!!!!111

___________________________________


Running ROS 2 nodes in Docker [community-contributed]ÔÉÅ
Run two nodes in a single docker containerÔÉÅ
Pull the ROS docker image with tag ‚Äúfoxy-desktop‚Äù.

docker pull osrf/ros:foxy-desktop
Run the image in a container in interactive mode.

$ docker run -it osrf/ros:foxy-desktop
root@<container-id>:/#
Your best friend is the ros2 command line help now.

root@<container-id>:/# ros2 --help
E.g. list all installed packages.

root@<container-id>:/# ros2 pkg list
(you will see a list of packages)
E.g. list all executables:

root@<container-id>:/# ros2 pkg executables
(you will see a list of <package> <executable>)
Run a minimal example of 2 C++ nodes (1 topic subscriber listener, 1 topic publisher talker) from the package demo_nodes_cpp in this container:

ros2 run demo_nodes_cpp listener &
ros2 run demo_nodes_cpp talker
Run two nodes in two separate docker containersÔÉÅ
Open a terminal. Run the image in a container in interactive mode and launch a topic publisher (executable talker from the package demo_nodes_cpp) with ros2 run:

docker run -it --rm osrf/ros:foxy-desktop ros2 run demo_nodes_cpp talker
Open a second terminal. Run the image in a container in interactive mode and launch a topic subscriber (executable listener from the package demo_nodes_cpp) with ros2 run:

docker run -it --rm osrf/ros:foxy-desktop ros2 run demo_nodes_cpp listener
As an alternative to the command line invocation, you can create a docker-compose.yml file (here version 2) with the following (minimal) content:

version: '2'

services:
  talker:
    image: osrf/ros:foxy-desktop
    command: ros2 run demo_nodes_cpp talker
  listener:
    image: osrf/ros:foxy-desktop
    command: ros2 run demo_nodes_cpp listener
    depends_on:
      - talker
To run the containers call docker-compose up in the same directory. You can close the containers with Ctrl+C.






___________________________

## Based on: https://medium.com/@lukas_reisinger/building-ros-noetic-on-ubuntu-22-04-b3ca676c63e7

ROS Noetic base packages
The first thing we need to do is to figure out which packages are part of the original ros-noetic-ros-base package. The easiest way to get this information, is to make use of the rosinstall_generator as it is described here.

To get a list of required packages and version tags we simply run the following two commands within the terminal:

rosinstall_generator ros_base --rosdistro foxy --deps --tar > foxy-base.rosinstall


The resulting file foxy-base.rosinstall should contain something like:
- tar:
    local-name: ament_cmake/ament_cmake
    uri: https://github.com/ros2-gbp/ament_cmake-release/archive/release/foxy/ament_cmake/0.9.12-1.tar.gz
    version: ament_cmake-release-release-foxy-ament_cmake-0.9.12-1
- tar:
    local-name: ament_cmake/ament_cmake_auto
    uri: https://github.com/ros2-gbp/ament_cmake-release/archive/release/foxy/ament_cmake_auto/0.9.12-1.tar.gz
    version: ament_cmake-release-release-foxy-ament_cmake_auto-0.9.12-1
- tar:
    local-name: ament_cmake/ament_cmake_core
    uri: https://github.com/ros2-gbp/ament_cmake-release/archive/release/foxy/ament_cmake_core/0.9.12-1.tar.gz
    version: ament_cmake-release-release-foxy-ament_cmake_core-0.9.12-1
...

By inspecting noetic-base.rosinstall and researching for the original GitHub repositories, we get the following list of packages and version tags:

ament_cmake-0.9.12-1
ament_cmake_auto-0.9.12-1
ament_cmake_core-0.9.12-1

Cloning the repositories
Since we are dealing with ROS packages and make use of catkin as a build tool, we need to follow the ROS package structure.

Therefore, we simply create a root directory called ros_noetic_base_2204 and a catkin workspace by executing


mkdir -p foxy/catkin_ws/src

Now it is time to clone all the necessary GitHub repositories. This can be achieved by executing the following commands within the directory foxy/catkin_ws/src






















python3 pr2_cam_test_02_WORK.py
## WORK WITH RP2 CAM (nvarguscamerasrc)


------------------------------------------------------------------------------------------
## ROS2 stella_vslam_ros2
------------------------------------------------------------------------------------------

https://github.com/stella-cv/stella_vslam_ros
https://stella-cv.readthedocs.io/en/latest/ros2_package.html

## INSTALL dependencies:

Tested for Ubuntu 22.04. 
ROS2 : humble or later.

(If using PangolinViewer)

sudo apt install -y libglew-dev
git clone https://github.com/stevenlovegrove/Pangolin.git
cd Pangolin
git checkout ad8b5f83
sed -i -e "193,198d" ./src/utils/file_utils.cpp
mkdir -p build
cd build
cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_PANGOLIN_DEPTHSENSE=OFF \
    -DBUILD_PANGOLIN_FFMPEG=OFF \
    -DBUILD_PANGOLIN_LIBDC1394=OFF \
    -DBUILD_PANGOLIN_LIBJPEG=OFF \
    -DBUILD_PANGOLIN_LIBOPENEXR=OFF \
    -DBUILD_PANGOLIN_LIBPNG=OFF \
    -DBUILD_PANGOLIN_LIBREALSENSE=OFF \
    -DBUILD_PANGOLIN_LIBREALSENSE2=OFF \
    -DBUILD_PANGOLIN_LIBTIFF=OFF \
    -DBUILD_PANGOLIN_LIBUVC=OFF \
    -DBUILD_PANGOLIN_LZ4=OFF \
    -DBUILD_PANGOLIN_OPENNI=OFF \
    -DBUILD_PANGOLIN_OPENNI2=OFF \
    -DBUILD_PANGOLIN_PLEORA=OFF \
    -DBUILD_PANGOLIN_PYTHON=OFF \
    -DBUILD_PANGOLIN_TELICAM=OFF \
    -DBUILD_PANGOLIN_TOON=OFF \
    -DBUILD_PANGOLIN_UVC_MEDIAFOUNDATION=OFF \
    -DBUILD_PANGOLIN_V4L=OFF \
    -DBUILD_PANGOLIN_VIDEO=OFF \
    -DBUILD_PANGOLIN_ZSTD=OFF \
    -DBUILD_PYPANGOLIN_MODULE=OFF \
    ..
make -j$(($(nproc) / 2))
make install

## BULD OK


## INSTALL g2o
https://github.com/rubengooj/pl-slam/issues/1
https://github.com/RainerKuemmerle/g2o

git clone https://github.com/RainerKuemmerle/g2o.git
cd g2o
mkdir build
cd build
cmake ..
make -j 7
sudo make install


#LIST( APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake_modules )
#SET( G2O_ROOT /usr/local/include/g2o )
#FIND_PACKAGE( G2O )
#i did like it and solved the problem

### sudo cp /home/jetson/ros2_ws/src/slam_toolbox/CMake/FindG2O.cmake /usr/share/cmake-3.16/Modules/
sudo cp /home/silenzio/lib/g2o/cmake_modules/FindG2O.cmake /usr/share/cmake-3.22/Modules/

sudo ldconfig

## BULD OK


## INSTALL CORE 

rosdep update
sudo apt update
mkdir -p ~/lib
cd ~/lib
git clone --recursive --depth 1 https://github.com/stella-cv/stella_vslam.git
rosdep install -y -i --from-paths ~/lib

cd ~/lib/stella_vslam
mkdir -p ~/lib/stella_vslam/build
cd ~/lib/stella_vslam/build
source /opt/ros/${ROS_DISTRO}/setup.bash
cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
make -j 7
sudo make install

## BULD OK



# When building with support for PangolinViewer
cd ~/lib
git clone --recursive https://github.com/stella-cv/pangolin_viewer.git
mkdir -p pangolin_viewer/build
cd pangolin_viewer/build
cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
make -j 7
sudo make install


## INSTALL ROS2 WRAPPER

## mkdir -p ~/ros2_ws/src

cd ~/ros2_ws/src
git clone --recursive -b ros2 --depth 1 https://github.com/stella-cv/stella_vslam_ros.git
cd ~/ros2_ws
rosdep install -y -i --from-paths ~/ros2_ws/src --skip-keys=stella_vslam
colcon build --symlink-install




## RUN:

source /opt/ros/humble/setup.bash
source install/setup.bash

# Publish Images Captured by a USB Camera
For using a standard USB camera for visual SLAM or localization.

ros2 run image_tools cam2image


Republish the ROS topic to /camera/image_raw.

#ros2 run image_transport republish raw in:=image raw out:=/camera/image_raw
ros2 run image_transport republish raw in:=jetson_webcam raw out:=/camera/image_raw
[WARN] [1739665661.702305138] [rcl]: Found remap rule 'in:=jetson_webcam'. This syntax is deprecated. 
Use '--ros-args --remap in:=jetson_webcam' instead.
##ros2 run image_transport --ros-args --remap in:=jetson_webcam raw out:=/camera/image_raw


# Subscriber
Subscribers continually receive images. Please execute one of the following command snippets in the new terminal.



ros2 run csi_camera camera_publisher


ros2 run stella_vslam_ros run_slam \
-v /home/silenzio/lib/stella_vslam/vocab/orb_vocab.fbow \
-c /home/silenzio/lib/stella_vslam/example/kitti/mono_03.yaml \
--map-db-out /home/silenzio/ros2_ws/src/omni/map/stella_vslam/map.msg 


@@@@@@@@@@@@@@@@@@@@@@
## RUN T265:

T1:
new terminal
cd foxy/
docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v .:/foxy ros_foxy_librealsense2 bash
in docker:
./ros_entrypoint.sh
cd foxy/catkin_ws/
. install/local_setup.bash
#ros2 launch realsense2_camera rs_launch.py
ros2 launch realsense2_camera rs_t265_launch.py


T2:
source /opt/ros/humble/setup.bash
ros2 run image_transport republish raw in:=/camera/fisheye1/image_raw raw out:=/camera/image_raw

T3:
source /opt/ros/humble/setup.bash
cd ~/ros2_ws
source install/setup.bash

ros2 run stella_vslam_ros run_slam \
-v /home/silenzio/lib/stella_vslam/vocab/orb_vocab.fbow \
-c /home/silenzio/lib/stella_vslam/example/tum_vi/mono.yaml \
--map-db-out /home/silenzio/ros2_ws/src/omni/map/stella_vslam/map.msg 

## ERR:
Transform failed: "odom" passed to lookupTransform argument source_frame does not exist.


ros2 run tf2_tools view_frames




$ ros2 topic list
/camera/fisheye1/camera_info
/camera/fisheye1/image_raw
/camera/fisheye1/image_raw/compressed
/camera/fisheye1/image_raw/compressedDepth
/camera/fisheye1/metadata
/camera/fisheye2/camera_info
/camera/fisheye2/image_raw
/camera/fisheye2/image_raw/compressed
/camera/fisheye2/image_raw/compressedDepth
/camera/fisheye2/metadata
/camera/image_raw
/camera/odom/metadata
/camera/odom/sample
/initialpose
/parameter_events
/rosout

/run_slam/camera_pose <<<---
/run_slam/keyframes
/run_slam/keyframes_2d

/tf
/tf_static


===========


ros2 run tf2_tools view_frames


$ ros2 topic list
/camera/fisheye1/camera_info
/camera/fisheye1/image_raw
/camera/fisheye1/image_raw/compressed
/camera/fisheye1/image_raw/compressedDepth
/camera/fisheye1/metadata
/camera/fisheye2/camera_info
/camera/fisheye2/image_raw
/camera/fisheye2/image_raw/compressed
/camera/fisheye2/image_raw/compressedDepth
/camera/fisheye2/metadata
/camera/image_raw
/camera/odom/metadata
/camera/odom/sample

/initialpose
/parameter_events
/rosout

/run_slam/camera_pose
/run_slam/keyframes
/run_slam/keyframes_2d

/tf
/tf_static


























https://github.com/berndpfrommer/basalt_ros/

Basalt ROS: ROS2 wrapper for Basalt VIO








------------------------------------------------------------------------------------------
## INSTALL Drivers for Intel¬Æ RealSense‚Ñ¢ Devices
------------------------------------------------------------------------------------------
# https://dev.intelrealsense.com/docs/compiling-librealsense-for-linux-ubuntu-guide

Test device:

lsusb

>Bus 003 Device 006: ID 03e7:2150 Intel Myriad VPU [Movidius 19:25 Neural Compute Stick]

Detach device


INSTALL:

Install dependencies:

sudo apt-get update && sudo apt-get upgrade && sudo apt-get dist-upgrade

sudo apt-get install libssl-dev libusb-1.0-0-dev libudev-dev pkg-config libgtk-3-dev

sudo apt-get install git wget cmake build-essential

sudo apt-get install libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev at


Install librealsense2:


## git clone https://github.com/IntelRealSense/librealsense.git

Download file, need v2.50.0:

https://github.com/IntelRealSense/librealsense/archive/refs/tags/v2.50.0.zip

Unarchive and move to "librealsense" dir

cd librealsense 


Run Intel Realsense permissions script from librealsense2 root directory:
./scripts/setup_udev_rules.sh
Notice: You can always remove permissions by running: ./scripts/setup_udev_rules.sh --uninstall


Build and apply patched kernel modules for:

Ubuntu 20/22 (focal/jammy) with LTS kernel 5.13, 5.15:
	./scripts/patch-realsense-ubuntu-lts-hwe.sh

    Note: What the *.sh script perform?
    The script above will download, patch and build realsense-affected kernel modules (drivers).
    Then it will attempt to insert the patched module instead of the active one. If failed
    the original uvc modules will be restored.

Check the patched modules installation by examining the generated log as well as inspecting the latest entries in kernel log: \


Building librealsense2 SDK:

Navigate to librealsense2 root directory and run:
mkdir build && cd build


Run cmake configure step, here are some cmake configure examples:
The default build is set to produce the core shared object and unit-tests binaries in Debug mode.
Use -DCMAKE_BUILD_TYPE=Release to build with optimizations.


cmake -DCMAKE_BUILD_TYPE=Release ../


Recompile and install liberalness binaries:

sudo make uninstall && make clean && make -j7 && sudo make install


Note: Only relevant to CPUs with more than 1 core: use make -j$(($(nproc)-1)) install allow parallel compilation.

Note: The shared object will be installed in /usr/local/lib, header files in /usr/local/include.
The binary demos, tutorials and test files will be copied into /usr/local/bin

Note: Linux build configuration is presently configured to use the V4L2 backend by default.
Note: If you encounter the following error during compilation gcc: internal compiler error
it might indicate that you do not have enough memory or swap space on your machine.
Try closing memory consuming applications, and if you are running inside a VM, increase available RAM to at least 2 GB.



## RUN TEST:

sudo ldconfig

realsense-viewer

## WORK~!!~!


$ lsusb | grep -i realsense
Bus 002 Device 006: ID 8087:0b37 Intel Corp. Intel(R) RealSense(TM) Tracking Camera T265

silenzio@jetson:~/ros2_ws$ modinfo uvcvideo | grep "version:"
version:        1.1.1
srcversion:     CBF6D7338385ACE45CFC76B


silenzio@jetson:~/ros2_ws$ v4l2-ctl --list-devices
NVIDIA Tegra Video Input Device (platform:tegra-camrtc-ca):
	/dev/media0

vi-output, imx219 9-0010 (platform:tegra-capture-vi:2):
	/dev/video0

$ lsusb | grep -i realsense
Bus 002 Device 006: ID 8087:0b37 Intel Corp. Intel(R) RealSense(TM) Tracking Camera T265


$ rs-enumerate-devices
 15/02 21:54:37,835 ERROR [281472909788256] (librealsense-exception.h:52) xioctl(VIDIOC_S_EXT_CTRLS) failed Last Error: Invalid argument
 15/02 21:54:37,836 ERROR [281472909788256] (rs.cpp:237) [rs2_create_device( info_list:0xaaab0d29d0f0, index:0 ) Backend] xioctl(VIDIOC_S_EXT_CTRLS) failed Last Error: Invalid argument
 15/02 21:54:37,836 ERROR [281472909788256] (rs.cpp:237) [rs2_delete_device( device:nullptr ) UNKNOWN] null pointer passed for argument "device"
Could not create device - xioctl(VIDIOC_S_EXT_CTRLS) failed Last Error: Invalid argument . Check SDK logs for details
No device detected. Is it plugged in?

## ERROR...


## FIX:
https://forums.developer.nvidia.com/t/realsense-d435i-not-working-with-jetson-orin-nano-8gb-jetpack-6-0/298870

## NOT WORK..

## FIX:
# https://github.com/IntelRealSense/librealsense/issues/12194

Please try removing all RealSense related packages on the computer with the Ubuntu terminal instruction below so that only the source code build of librealsense is left remaining.


$ dpkg -l | grep "realsense" | cut -d " " -f 3 | xargs sudo dpkg --purge

(Reading database ... 295361 files and directories currently installed.)
Removing ros-humble-librealsense2 (2.55.1-1jammy.20241126.021057) ...
Removing ros-humble-realsense2-camera-msgs (4.55.1-1jammy.20241128.025132) ...
Processing triggers for libc-bin (2.35-0ubuntu3.9) ...


I met the same problem since last week, but thanks to your latest asnwer, it does solve my problem! 
After removing all Realsense related pkg and install realsense2-camera pkg again, it works perfectly !!!


## ERROR AGAIN...

$ ros2 run realsense2_camera realsense2_camera_node --ros-args -p enable_pose:=true -p device_type:=t265
[INFO] [1739647055.925721020] [camera.camera]: RealSense ROS v4.55.1
[INFO] [1739647055.925980037] [camera.camera]: Built with LibRealSense v2.50.0
[INFO] [1739647055.926022246] [camera.camera]: Running with LibRealSense v2.50.0
[INFO] [1739647055.944681222] [camera.camera]: Device with serial number 905312111138 was found.

[INFO] [1739647055.944844620] [camera.camera]: Device with physical ID 2-1.1-6 was found.
[INFO] [1739647055.944885997] [camera.camera]: Device with name Intel RealSense T265 was found.
[INFO] [1739647055.945292218] [camera.camera]: Device with port number 2-1.1 was found.
[INFO] [1739647055.945346140] [camera.camera]: Device USB type: 3.1
[FATAL] [1739647055.945413054] [camera.camera]: Unsupported device! Product ID: 0x0B37 <<<<<<<<<------
[ros2run]: Process exited with failure 1





------------------------------------------------------------------------------------------
## >>>>>>>>>>>>>> rs-enumerate-devices works only under root <<<<<<<<<<<<<<<<<<
------------------------------------------------------------------------------------------

# https://answers.ros.org/question/361565/

rs-enumerate-devices works only under root
Glad to find this forum.

I have installed ROS Melodic and realsense2camera on Raspberry Pi 4 wired with L515. Realsense2camera was isolated installed.

By applying source ~/realsense2cameraws/devel_isolated/setup.bash rs-enumerate-devices works only under root, the camera is found and recognized.

With pi user camera is not found. "No device detected. Is it plugged in?"

By applying standard source /opt/ros/melodic/setup.bash command rs-enumerate-devices works for pi user. A few hours, but solution is not found, please, help.

Asked by AlexP on 2020-09-14 12:42:36 UTC







------------------------------------------------------------------------------------------
## Disable/enable USB ports on ORIN NX programmatically
------------------------------------------------------------------------------------------
# https://forums.developer.nvidia.com/t/disable-enable-usb-ports-on-orin-nx-programmatically/273196/16


sudo sh -c "echo 141a0000.pcie > /sys/bus/platform/drivers/tegra194-pcie/unbind"
Returning to the original question
Is there a way to cut off power to Orin NX USB port then reenable it with some command like below:

SOLVED

sudo sh -c "echo 141a0000.pcie > /sys/bus/platform/drivers/tegra194-pcie/unbind"
sudo sh -c "echo 141a0000.pcie > /sys/bus/platform/drivers/tegra194-pcie/bind"

Find the PCIe card to which the USB is connected. In my case `141a0000.pcie`. The above command will turn the power supply to the PCIe card off and then on thereby making my T265 tracker camera detectable.


------------------------------------------------------------------------------------------
## INSTALL ROS2 Wrapper for Intel¬Æ RealSense‚Ñ¢ Devices
------------------------------------------------------------------------------------------

# https://github.com/IntelRealSense/realsense-ros

INSTALL:
sudo apt-get install ros-$ROS_DISTRO-realsense2-camera

ros2 launch realsense2_camera rs_t265.launch

realsense-viewer

#ros2 launch realsense2_camera rs_launch.py camera_namespace:=robot1 camera_name:=D455_1
ros2 launch realsense2_camera rs_launch.py camera_namespace:=robot1 camera_name:=T265

----------------------------------------------
## ROS2 Wrapper for Intel¬Æ RealSense‚Ñ¢ Devices
----------------------------------------------
# https://gitee.com/gjxs1980/realsense-ros#using-t265



----------------------------------------------
## RealSense‚Ñ¢ for SLAM and Navigation
----------------------------------------------
https://intel.github.io/robot_devkit_doc/pages/rs_slam.html

C  2019, Intel Corporation



...

ros2 run realsense2_camera realsense2_camera_node --ros-args -p enable_pose:=true -p device_type:=t265

## NOT WORK ERROR:

$ ros2 run realsense2_camera realsense2_camera_node --ros-args -p enable_pose:=true -p device_type:=t265
[INFO] [1739640350.050489240] [camera.camera]: RealSense ROS v4.55.1
[INFO] [1739640350.050788866] [camera.camera]: Built with LibRealSense v2.55.1 <<<<-------
[INFO] [1739640350.050833796] [camera.camera]: Running with LibRealSense v2.55.1
 15/02 20:25:50,062 ERROR [281472820766944] (librealsense-exception.h:52) xioctl(VIDIOC_S_EXT_CTRLS) failed Last Error: Invalid argument
 15/02 20:25:50,062 ERROR [281472820766944] (rs.cpp:237) [rs2_create_device( info_list:0xffff7401cc20, index:0 ) Backend] xioctl(VIDIOC_S_EXT_CTRLS) failed Last Error: Invalid argument
 15/02 20:25:50,062 ERROR [281472820766944] (rs.cpp:237) [rs2_delete_device( device:nullptr ) UNKNOWN] null pointer passed for argument "device"
 15/02 20:25:50,062 WARNING [281472820766944] (rs.cpp:373) null pointer passed for argument "device"
[WARN] [1739640350.063021364] [camera.camera]: Device 1/1 failed with exception: xioctl(VIDIOC_S_EXT_CTRLS) failed Last Error: Invalid argument
[ERROR] [1739640350.063166489] [camera.camera]: The requested device with device name containing t265 is NOT found. Will Try again.
...

## METHOD 2:

colcon build --packages-select ... ... ...

## BUILD OK

## RUN:
source /opt/ros/$ROS_DISTRO/setup.bash
source install/setup.bash

realsense-viewer

ros2 run realsense2_camera realsense2_camera_node --ros-args -p enable_pose:=true -p device_type:=t265




git clone -b <branch> <remote_repo>

Example:

#git clone -b my-branch git@github.com:user/myproject.git

https://github.com/IntelRealSense/realsense-ros/tree/ros2-legacy

git clone -b ros2-legacy https://github.com/IntelRealSense/realsense-ros.git

colcon build





------------------------------------------------------------------------------------------
## INSTALL CSI camera ROS2 driver
------------------------------------------------------------------------------------------

### METHOD #2
# https://github.com/Devanthro/csi_camera.git

cd '/home/silenzio/ros2_ws' 
cd src/
git clone https://github.com/Devanthro/csi_camera.git
cd ..
colcon build 


source install/setup.bash

ros2 run csi_camera simple_camera


## WORK but image is compressed...

ros2 run csi_camera camera_publisher
ros2 run csi_camera camera_subscriber


### METHOD #2
# https://medium.com/@kabilankb2003/integrating-pi-camera-with-ros-2-humble-on-nvidia-jetson-nano-using-opencv-de676dd6a2ca

## CREATE
ros2 pkg create --build-type ament_python csi_cam_opencv --dependencies rclpy image_transport cv_bridge sensor_msgs std_msgs open_cv2

rosdep install -i --from-path src --rosdistro humble -y

colcon build 
colcon build --packages-select csi_cam_opencv

## RUN:
# T1:
source install/setup.bash
ros2 run csi_cam_opencv impub

# T2:
source install/setup.bash
ros2 run csi_cam_opencv imsubs

## WORK !

ros2 topic list
/jetson_webcam
/parameter_events
/rosout


---
header:
  stamp:
    sec: 0
    nanosec: 0
  frame_id: ''
height: 720
width: 1280
encoding: 8UC3
is_bigendian: 0
step: 3840
data:
- 58
- 72
- 86
- 58


------------------------------------------------------------------------------------------
## INSTALL CSI camera driver
------------------------------------------------------------------------------------------
# http://www.yahboom.net/study/Orin-NX-SUPER
>> 05.Vision basic course >> CSI camera preview


1. Configure CSI camera pins
sudo /opt/nvidia/jetson-io/jetson-io.py

...

## RUN:

$ nvgstcapture-1.0
Encoder null, cannot set bitrate!
Encoder Profile = High
Supported resolutions in case of ARGUS Camera
  (2) : 640x480
  (3) : 1280x720
  (4) : 1920x1080
  (5) : 2104x1560
  (6) : 2592x1944
  (7) : 2616x1472
  (8) : 3840x2160
  (9) : 3896x2192
  (10): 4208x3120
  (11): 5632x3168
  (12): 5632x4224


nvgstcapture-1.0 --sensor-id=0 --cus-prev-res=1280x720 --orientation=2
nvgstcapture-1.0 --sensor-id=0 --orientation=2 --video-res=3 --cus-prev-res=1280x720
nvgstcapture-1.0 --sensor-id=0 --orientation=2 --video-res=2 --cus-prev-res=1280x720 --framerate=30

nvgstcapture-1.0 --sensor-id=0  --orientation=2 --video-res=2 --color-format=1 --enc-profile=2


nvgstcapture-1.0 --sensor-id=0 --orientation=2 --video-res=3 --framerate=60
Camera index = 0 
   Camera mode  = 4 
   Output Stream W = 1280 H = 720 
   seconds to Run    = 0 
   Frame Rate = 59.999999 

nvgstcapture-1.0 --sensor-id=0 --orientation=2 --video-res=3 --cus-prev-res=1280x600 --framerate=60


nvgstcapture-1.0 --sensor-id=0  --orientation=2 --video-res=4 --prev-res=4
Output Stream W = 1920 H = 1080 
   seconds to Run    = 0 
   Frame Rate = 29.999999 


## WORK!


Gtk-Message: 03:47:21.816: Failed to load module "canberra-gtk-module"
## FIX:
sudo apt install libcanberra-gtk-module libcanberra-gtk3-module
## WORK!





source /opt/ros/humble/setup.bash

ros2 launch turtlebot3_bringup robot.launch.py

### ros2 launch hls_lfcd_lds_driver view_hlds_laser.launch.py
## ERR



## RUN 
# T1:
source /opt/ros/humble/setup.bash
ros2 launch hls_lfcd_lds_driver hlds_laser.launch.py

# T2:
source /opt/ros/humble/setup.bash
ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 map laser
## [WARN] [1739621322.396169254] []: Old-style arguments are deprecated; see --help for new-style arguments
## ros2 run tf2_ros static_transform_publisher --help


## ROS Vision Messages

https://discourse.ros.org/t/introducing-a-new-rviz2-plugin-for-displaying-vision-msgs-in-ros-2-humble/29979/2

https://github.com/ros-perception/vision_msgs

https://github.com/NovoG93/vision_msgs_rviz_plugins











++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## ROS2 OMNI
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## Set Permission for LDS-01
$ sudo chmod a+rw /dev/ttyUSB0

source /opt/ros/humble/setup.bash

ros2 launch omni omni.launch


cd ~/ros2_ws/src
ros2 pkg create --build-type ament_python --license Apache-2.0 urdf_tutorial_r2d2 --dependencies rclpy
cd urdf_tutorial_r2d2

...

cd second_ros2_ws
colcon build --symlink-install --packages-select urdf_tutorial_r2d2

colcon build --symlink-install --packages-select omni

## RUN:

# T1:
source install/setup.bash
#ros2 launch urdf_tutorial_r2d2 demo.launch.py
ros2 launch omni demo.launch.py

# T2:
source install/setup.bash
rviz2 -d second_ros2_ws/install/urdf_tutorial_r2d2/share/urdf_tutorial_r2d2/r2d2.rviz


rviz2 -d /home/silenzio/ros2_ws/install/urdf_tutorial_r2d2/share/urdf_tutorial_r2d2/rviz/urdf_tutorial_r2d2.rviz

## WORK!!



https://github.com/ros/urdf_launch.git

sudo apt-get install ros-humble-urdf-launch


----------


====================================================================================
------------------------------------------------------------------------------------
## ROS2 CORE COMMAND AND SET
------------------------------------------------------------------------------------
====================================================================================

## Docker Official Image
https://hub.docker.com/_/ros/


## https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.html#setup-colcon-cd

# Setup colcon_cd

echo "source /usr/share/colcon_cd/function/colcon_cd.sh" >> ~/.bashrc
echo "export _colcon_cd_root=/opt/ros/humble/" >> ~/.bashrc$ 

colcon_cd

jetson@ubuntu:~/ros2_humble/install$ 

source /opt/ros/humble/setup.bash


ros2 node list
ros2 topic list
ros2 service list
ros2 action list

ros2 pkg list


ros2 interface list

You can list messages only with the -m parameter :

ros2 interface list -m | grep Image

    sensor_msgs/msg/CompressedImage
    sensor_msgs/msg/Image
    stereo_msgs/msg/DisparityImage
    visualization_msgs/msg/ImageMarker



sensor_msgs/msg/Image


----
## MAKE NEW PACKAGE
## 1
mkdir -p ~/ros2_ws/src
cd ~/ros2_ws/src
ros2 pkg create --build-type ament_python capture_camera

cd ~/ros2_ws/
colcon build
source install/setup.bash


## 2 CMAKE

cd ~/ros2_ws/src
ros2 pkg create --build-type ament_cmake --license Apache-2.0 --node-name omni omni
cd ..
colcon build --packages-select omni
source install/setup.bash
ros2 run omni omni

$ hello world omni package



## 2 PYTHON

ros2 pkg create --build-type ament_python --license Apache-2.0 --node-name pomni pomni
cd ..
colcon build --packages-select pomni
source install/setup.bash
ros2 run pomni pomni
$ Hi from pomni.



------------------------------------------------------------------------------------------
## ROS2 Slam Toolbox
------------------------------------------------------------------------------------------
# https://github.com/SteveMacenski/slam_toolbox
# https://github.com/SteveMacenski/slam_toolbox

# INSTALL:
sudo apt install ros-humble-slam-toolbox


# 1. Launch Robot Interfaces
For this tutorial, we will use the turtlebot3. The turtlebot3 software can be installed via the following or on the turtlebot3 repository:

sudo apt install ros-humble-turtlebot3 ros-humble-turtlebot3-msgs ros-humble-turtlebot3-bringup


If you have another robot, replace with your robot specific interfaces. Typically, this includes the robot state publisher of the URDF, simulated or physical robot interfaces, controllers, safety nodes, and the like.

Run the following commands first whenever you open a new terminal during this tutorial.

source /opt/ros/humble/setup.bash

export TURTLEBOT3_MODEL=waffle



source /opt/ros/humble/setup.bash

ros2 launch turtlebot3_bringup robot.launch.py



# 2. Launch Navigation2

Launch Navigation without nav2_amcl and nav2_map_server. It is assumed that the SLAM node(s) will publish to /map topic and provide the map->odom transform.

ros2 launch nav2_bringup navigation_launch.py


# 3. Working with SLAM
Move your robot by requesting a goal through RViz or the ROS 2 CLI, ie:


ros2 topic pub /goal_pose geometry_msgs/PoseStamped "{header: {stamp: {sec: 0}, frame_id: 'map'}, pose: {position: {x: 0.2, y: 0.0, z: 0.0}, orientation: {w: 1.0}}}"

You should see the map update live! To save this map to file:

ros2 run nav2_map_server map_saver_cli -f ~/map



# 4. Getting Started Simplification

If you're only interested in running SLAM in the turtlebot3 getting started sandbox world, we also provide a simple way to enable SLAM as a launch configuration. Rather than individually launching the interfaces, navigation, and SLAM, you can continue to use the 

with slam config set to true.

tb3_simulation_launch.py slam:=true

We provide the instructions above with the assumption that you  like to run SLAM on your own robot which would have separated simulation / robot interfaces and navigation launch files that are combined in

tb3_simulation_launch.py

for the purposes of easy testing.

ros2 launch nav2_bringup tb3_simulation_launch.py slam:=True




------------------------------------------------------------------------------------------
# ROS2 Installing Gazebo with ROS
------------------------------------------------------------------------------------------


https://gazebosim.org/docs/latest/ros_installation/

sudo apt-get install ros-${ROS_DISTRO}-ros-gz


sudo apt-get install ros-humble-gazebo-ros




------------------------------------------------------------------------------------------
ROS1 Slam Toolbox
------------------------------------------------------------------------------------------

You don't have to compile slam_toolbox from source to use it, unless you want to modify the source code. You can install it with atp:

sudo apt update
sudo apt install ros-humble-slam-toolbox
source /opt/ros/humble/setup.bash
After installing it, you can use the following launch file to use it:

ros2 launch slam_toolbox online_async_launch.py
You'll probably want to see it building in rviz2, you can add the /map topic once the file above is launched.

To save it, run

ros2 run nav2_map_server map_saver_cli -f [name of map]
If you want to see this done step by step, check out this video: https://youtu.be/JXnXnAXrYj8




# https://github.com/SteveMacenski/slam_toolbox/tree/noetic-devel

# INSTALL:

source ~/ros2_humble/install/local_setup.bash
source ~/ros2_ws/src/install/setup.bash
cd ~/ros2_ws/src

git clone https://github.com/SteveMacenski/slam_toolbox.git

cd ..

# ROSDep will take care of the major things
rosdep install -q -y -r --from-paths src --ignore-src
# ERROR: the following packages/stacks could not have their rosdep keys resolved
to system dependencies:
slam_toolbox: No definition of [bond] for OS version [focal]


catkin build
## NOT WORK
## ERROR bondcpp not found...


# DEP INSTALL:
cd ~/ros2_ws/src
git clone https://github.com/ros/bond_core.git
cd ..
catkin build

## ERRORs

home/jetson/ros2_ws/src/slam_toolbox/solvers/ceres_utils.h:10:10: fatal error: ceres/autodiff_manifold.h: No such file or directory
   10 | #include <ceres/autodiff_manifold.h>
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~

## FIX: 
git clone https://ceres-solver.googlesource.com/ceres-solver

# google-glog + gflags
sudo apt-get install libgoogle-glog-dev libgflags-dev
# Use ATLAS for BLAS & LAPACK
sudo apt-get install libatlas-base-dev
# Eigen3
sudo apt-get install libeigen3-dev
# SuiteSparse (optional)
sudo apt-get install libsuitesparse-dev

catkin build

## ERRORs

asked CMake to find a package configuration file provided by "absl", but
  CMake did not find one.

  Could not find a package configuration file provided by "absl" with any of
  the following names:

    abslConfig.cmake
    absl-config.cmake



------------------------------------------------------------------------------------
# Migrating ROS 2 packages that use Gazebo Classic
# https://gazebosim.org/docs/latest/migrating_gazebo_classic_ros2_packages/
------------------------------------------------------------------------------------




------------------------------------------------------------------------------------
## ROS2 gazebo_ros2_control INSTALL
------------------------------------------------------------------------------------

# https://github.com/ros-controls/gazebo_ros2_control/tree/humble?tab=readme-ov-file
# BUILD STEPS HERE - https://github.com/ros-controls/gz_ros2_control

# Compile from source

mkdir -p ~/gz_ros2_control_ws/src

cd ~/gz_ros2_control_ws/src

# git clone https://github.com/ros-controls/gz_ros2_control -b {ROS_DISTRO}
git clone https://github.com/ros-controls/gazebo_ros2_control.git -b {ROS_DISTRO}

rosdep install -r --from-paths . --ignore-src --rosdistro $ROS_DISTRO -y

cd ~/gz_ros2_control_ws

colcon build

#ERRORs:
$ rosdep install -r --from-paths . --ignore-src --rosdistro $ROS_DISTRO -y
ERROR: the following packages/stacks could not have their rosdep keys resolved
to system dependencies:
mecanumbot_hardware: No definition of [hardware_interface] for OS version [focal]
mecanumbot_bringup: No definition of [joint_state_broadcaster] for OS version [focal]
gazebo_ros2_control_demos: No definition of [xacro] for OS version [focal]
mecanumbot_controller: No definition of [realtime_tools] for OS version [focal]
mecanumbot_control: No definition of [controller_manager] for OS version [focal]
mecanumbot_description: No definition of [xacro] for OS version [focal]
gazebo_ros2_control: No definition of [hardware_interface] for OS version [focal]
Continuing to install resolvable dependencies...
#All required rosdeps installed successfully


$ colcon build
Starting >>> gazebo_ros2_control
--- stderr: gazebo_ros2_control  
  Could not find a package configuration file provided by "angles" with any
  of the following names:

    anglesConfig.cmake
    angles-config.cmake


## NOT WORK with OS version [focal] ... need 22


------------------------------------------------------------------------------------











sudo apt-get install ros-humble-...

https://github.com/ros/joint_state_publisher.git
sudo apt-get install ros-humble-joint-state-publisher

https://github.com/ros/urdf_tutorial.git
sudo apt-get install ros-humble-urdf-tutorial


sudo apt-get install ros-humble-urdf-launch

git clone https://github.com/ros/urdf_launch.git

git clone -b ros2 https://github.com/ros/xacro.git

git clone https://github.com/ros/joint_state_publisher.git





------------------------------------------------------------------------------------
## INSTALL Bridge communication between ROS 1 and ROS 2
------------------------------------------------------------------------------------

# https://github.com/ros2/ros1_bridge
# https://github.com/jayprajapati009/ros1_bridge_tutorial


Tutorial: Using ros1_bridge Package for ROS1 (Noetic) and ROS2 (Humble)
In this tutorial, you will learn how to use the ros1_bridge package to enable communication between ROS1 (Noetic) and ROS2 (Humble). This is useful when transitioning from ROS1 to ROS2, as it allows nodes from both ecosystems to exchange messages seamlessly.

## Dependencies

Ubuntu 20.04
ROS Noetic
ROS2 Humble (Built with source)
ros1_bridge (Built with source)

## Installation
Setup a Ubuntu 20.04 system. Link
Install ROS Noetic. Link
Build ROS2 Humble Hawksbill from source. link (3rd step will take an hour, get some food)

## ros1_bridge Setup
For setting up the ros1_bridge package, create a bridge_ws workspace to build the package from source.

mkdir -p ~/bridge_ws/src
cd ~/bridge_ws/src

git clone https://github.com/ros2/ros1_bridge.git

Before building the ROS1 bridge, ensure that everything else is built using standard Colcon arguments. It is not recommended to have the ROS1 environment sourced during this step, as doing so can add additional libraries to the path and potentially cause conflicts. Building your ROS2 workspace without sourcing ROS1 environment variables will help maintain a clean and isolated environment for your ROS2 packages.

cd ~/bridge_ws
colcon build --symlink-install --packages-skip ros1_bridge

Source the ROS1 environment now,

source /opt/ros/noetic/setup.bash
# the path may vary as per you installation
To ensure that the ROS1 bridge includes support for the necessary message/service packages, it's essential to add the relevant ROS1 and ROS2 workspaces that contain these packages to your environment's PATH. This can be achieved by explicitly specifying dependencies on the message/service packages in the `package.xml`` file of the bridge package. By doing this, Colcon will automatically include them in the path when building the bridge. Alternatively, you can manually source the relevant workspaces to make these packages accessible before building the bridge. This ensures that the bridge is aware of and capable of bridging the specified message/service packages between ROS1 and ROS2.

Currently we source it manually,

source ~/ros2_humble/install/setup.bash
# the path may vary as per you installation
Note: Whenever you source ROS1 after sourcing ROS2 or vice-versa, you might observe the follwoing output in the terminal. (relax and ignore)

ROS_DISTRO was set to 'noetic' before. Please make sure that the environment does not mix paths from different distributions.
Finally, built the ros1_bridge, it make take around 12 minutes to build. (time to get a coffee)

colcon build --symlink-install --packages-select ros1_bridge --cmake-force-configure

## BUILD SUCCESS
...

_________
## TRY EXAMPLES


## Example 1
Let's try out an example where we initiate a ROS1 Talker (publisher) and a ROS2 Listener (subscriber) using ros1_bridge.

T1: First lets start a ROS1 roscore,

source /opt/ros/noetic/setup.bash
roscore


T2: The dynamic bridge, once started, functions by monitoring the availability of ROS1 and ROS2 topics. When it identifies a matching topic in both ecosystems, it initiates the bridging process for messages on that specific topic. This allows communication and message exchange between ROS1 and ROS2 nodes, enabling interoperability between the two systems. Let's start the dynamic bridge.

# source the ROS1 environment first 
source /opt/ros/noetic/setup.bash

# now, source the ROS2 environment
source ~/ros2_humble/install/setup.bash

# source the bridge_ws
source ~/bridge_ws/install/setup.bash

# connect the ROS_MASTER_URI
export ROS_MASTER_URI=http://localhost:11311
ros2 run ros1_bridge dynamic_bridge

## ERROR:
failed to create 2to1 bridge for topic '/rosout' with ROS 2 type 'rcl_interfaces/msg/Log' and ROS 1 type 'rosgraph_msgs/Log': No template specialization for the pair
# SKIP THIS...


The last command will start outputting the currently available topics in ROS1 and ROS2 in a regular interval.



T3: Here, we will initiate the ROS1 talker

source /opt/ros/noetic/setup.bash
rosrun rospy_tutorials talker



T4: Here, we will initiate the ROS2 listener

source ~/ros2_humble/install/setup.bash
ros2 run demo_nodes_cpp listener

If the ROS2 node (Terminal-4) starts printing the messages published by ROS1 node (Terminal-3). The ros1_bridge is working successfully.



## WORK BUT PRINT WARNING:
failed to create 2to1 bridge for topic '/rosout' with ROS 2 type 'rcl_interfaces/msg/Log' and ROS 1 type 'rosgraph_msgs/Log': No template specialization for the pair
check the list of supported pairs with the `--print-pairs` option


## FIX
get bridge.yaml file from here - https://github.com/ros2/ros1_bridge/pull/331

file "bridge.yaml":

topics:
  - 
    topic: /chatter  # ROS1 topic name
    type: std_msgs/msg/String  # ROS2 type name
    queue_size: 1  # For the publisher back to ROS1
  - 
    topic: /joint_states
    type: sensor_msgs/msg/JointState
    queue_size: 1
  - 
    topic: /message_to_ros
    type: std_msgs/msg/String
    queue_size: 1
  - 
    topic: /message_from_ros
    type: std_msgs/msg/String
    queue_size: 1
    qos:
      history: keep_last
      depth: 10
      reliability: reliable
      durability: transient_local
      deadline: 
          secs: 10
          nsecs: 2345
      lifespan: 
          secs: 20
          nsecs: 3456
      liveliness: LIVELINESS_AUTOMATIC
      liveliness_lease_duration: 
          secs: 40
          nsecs: 5678
  - 
    topic: /tf
    type: tf2_msgs/msg/TFMessage
    queue_size: 1
  - 
    topic: /tf_static
    type: tf2_msgs/msg/TFMessage
    queue_size: 1
    qos:
      history: keep_all
      durability: transient_local

end of file "bridge.yaml":


## PUT FILE "bridge.yaml" IN WORK DIR AND RUN THIS:


# Example 4: bridge only selected topics and services

This example expands on example 3 by selecting a subset of topics and services to be bridged. This is handy when, for example, you have a system that runs most of it's stuff in either ROS 1 or ROS 2 but needs a few nodes from the 'opposite' version of ROS. Where the dynamic_bridge bridges all topics and service, the parameter_bridge uses the ROS 1 parameter server to choose which topics and services are bridged. Note: The service bridge is monodirectional. You must use either services_2_to_1 and/or services_1_to_2 to bridge ROS 2 -> ROS 1 or ROS 1 -> ROS 2 services accordingly. For example, to bridge only the /chatter topic bidirectionally, and the /add_two_ints service from ROS 2 to ROS 1 only, create this configuration file, bridge.yaml:


T1: (ROS 1 only):

source /opt/ros/noetic/setup.bash
roscore


T2: (ROS 1 only):
Then load the bridge.yaml config file and start the talker to publish on the /chatter topic:

source /opt/ros/noetic/setup.bash

rosparam load bridge.yaml

rosrun rospy_tutorials talker


T3: (ROS 1 and ROS 2 ):
# source the ROS1 environment first 
source /opt/ros/noetic/setup.bash

# now, source the ROS2 environment
source ~/ros2_humble/install/setup.bash

# source the bridge_ws
source ~/bridge_ws/install/setup.bash

# connect the ROS_MASTER_URI
export ROS_MASTER_URI=http://localhost:11311
ros2 run ros1_bridge parameter_bridge


OR:
rosparam load bridge.yaml && source /opt/ros/noetic/setup.bash && ros2 run ros1_bridge parameter_bridge


ROS1 orb_slam3_ros_wrapper 
rosparam load bridge_orb_slam3_ros_wrapper.yaml && source /home/jetson/ros_ws/devel/setup.bash && ros2 run ros1_bridge parameter_bridge


T4: (ROS 2 only):

source ~/ros2_humble/install/setup.bash

ros2 run demo_nodes_cpp listener

If the ROS2 node (T4) starts printing the messages published by ROS1 node (Terminal-3). The ros1_bridge is working successfully.


## WORK !!! 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
T3: (ROS 1 and ROS 2 with BRIDGE ):
rosparam load bridge.yaml && source /opt/ros/noetic/setup.bash && ros2 run ros1_bridge parameter_bridge

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Trying to create bidirectional bridge for topic '/image_topic' with ROS 2 type 'sensor_msgs/msg/Image'
[INFO] [1738322272.506793282] [ros_bridge]: create bidirectional bridge for topic /image_topic

Trying to create bidirectional bridge for topic '/chatter' with ROS 2 type 'std_msgs/msg/String'
[INFO] [1738322272.530366115] [ros_bridge]: create bidirectional bridge for topic /chatter

Trying to create bidirectional bridge for topic '/joint_states' with ROS 2 type 'sensor_msgs/msg/JointState'
[INFO] [1738322272.547062194] [ros_bridge]: create bidirectional bridge for topic /joint_states

Trying to create bidirectional bridge for topic '/message_to_ros' with ROS 2 type 'std_msgs/msg/String'
[INFO] [1738322272.562973549] [ros_bridge]: create bidirectional bridge for topic /message_to_ros

Trying to create bidirectional bridge for topic '/message_from_ros' with ROS 2 type 'std_msgs/msg/String'
Setting up QoS for '/message_from_ros': Qos(history: keep_last(10), reliability: reliable, durability: transient_local, deadline: Duration(nsecs: 10000002345), lifespan: Duration(nsecs: 20000003456), liveliness: LIVELINESS_AUTOMATIC, liveliness_lease_duration: Duration(nsecs: 40000005678), )
[INFO] [1738322272.576381095] [ros_bridge]: create bidirectional bridge for topic /message_from_ros

Trying to create bidirectional bridge for topic '/tf' with ROS 2 type 'tf2_msgs/msg/TFMessage'
[INFO] [1738322272.589949221] [ros_bridge]: create bidirectional bridge for topic /tf

Trying to create bidirectional bridge for topic '/depth_scan' with ROS 2 type 'sensor_msgs/msg/LaserScan'
[INFO] [1738322272.604998665] [ros_bridge]: create bidirectional bridge for topic /depth_scan
The parameter 'services_1_to_2' either doesn't exist or isn't an array
The parameter 'services_2_to_1' either doesn't exist or isn't an array
[INFO] [1738322299.891340460] [ros_bridge]: Passing message from ROS 1 sensor_msgs/Image to ROS 2 sensor_msgs/msg/Image (showing msg only once per type)

[INFO] [1738326266.086779555] [ros_bridge]: Passing message from ROS 1 sensor_msgs/Imu to ROS 2 sensor_msgs/msg/Imu (showing msg only once per type)
[INFO] [1738326266.461923557] [ros_bridge]: Passing message from ROS 1 tf2_msgs/TFMessage to ROS 2 tf2_msgs/msg/TFMessage (showing msg only once per type)
[INFO] [1738326266.464102825] [ros_bridge]: Passing message from ROS 1 nav_msgs/Odometry to ROS 2 nav_msgs/msg/Odometry (showing msg only once per type)






## Example 2: run the bridge and exchange images
The second example will demonstrate the bridge passing along bigger and more complicated messages. A ROS 2 node is publishing images retrieved from a camera and on the ROS 1 side we use rqt_image_view to render the images in a GUI. And a ROS 1 publisher can send a message to toggle an option in the ROS 2 node.

# First we start a ROS 1 roscore and the bridge:

# Shell A:
source /opt/ros/noetic/setup.bash
roscore

# Shell B:
source /opt/ros/noetic/setup.bash

source ~/ros2_humble/install/setup.bash

source ~/bridge_ws/install/setup.bash

export ROS_MASTER_URI=http://localhost:11311

ros2 run ros1_bridge dynamic_bridge


## Now we start the ROS 1 GUI:

# Shell C:
source /opt/ros/noetic/setup.bash
rqt_image_view /image


## Now we start the ROS 2 image publisher from the image_tools ROS 2 package:

# Shell D:
source ~/ros2_humble/install/setup.bash
ros2 run image_tools cam2image

You should see the current images in rqt_image_view which are coming from the ROS 2 node cam2image and are being passed along by the bridge.

To exercise the bridge in the opposite direction at the same time you can publish a message to the ROS 2 node from ROS 1. By publishing either true or false to the flip_image topic, the camera node will conditionally flip the image before sending it. You can either use the Message Publisher plugin in rqt to publish a std_msgs/Bool message on the topic flip_image, or run one of the two following rostopic commands:

# Shell E:
source /opt/ros/noetic/setup.bash

rostopic pub -r 1 /flip_image std_msgs/Bool "{data: true}"
rostopic pub -r 1 /flip_image std_msgs/Bool "{data: false}"



------------------------------------------------------------------------------------


------------------------------------------------------------------------------------
## ROS2 BUILD PACKAGE
------------------------------------------------------------------------------------

# 1. Source env
!!! open new terminal
source ~/ros2_humble/install/local_setup.bash

# 2. Create a new directory
mkdir -p ~/ros2_ws/src
cd ~/ros2_ws/src


# 3. Clone a sample repo
git clone https://github.com/ros/ros_tutorials.git -b humble

cd ..

# 4. Resolve dependencies
rosdep install -i --from-path src --rosdistro humble -y
#All required rosdeps installed successfully


# 5. Build the workspace with colcon
colcon build

Starting >>> turtlesim
Finished <<< turtlesim [5.49s]

Summary: 1 package finished [5.58s]


## RUN >>>>> IN THE NEW TERM >>>>
1.
source ~/ros2_humble/install/local_setup.bash

2.
cd ~/ros2_ws

3. 
source install/local_setup.bash

4. 
ros2 run turtlesim turtlesim_node



------------------------------------------------------------------------------------
## ROS2 INSTALL TUTORIAL PACKAGES
------------------------------------------------------------------------------------
## https://docs.ros.org/en/humble/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.html

# GOAL
ros2 launch urdf_tutorial display.launch.py model:=urdf/01-myfirst.urdf


git clone -b ros2 https://github.com/ros/urdf_tutorial.git

git clone https://github.com/ros/urdf_launch.git

git clone -b ros2 https://github.com/ros/xacro.git

git clone https://github.com/ros/joint_state_publisher.git


ros2 launch urdf_tutorial display.launch.py model:=urdf/01-myfirst.urdf
...
ros2 launch urdf_tutorial display.launch.py model:=urdf/08-macroed.urdf.xacro

ros2 launch urdf_tutorial display.launch.py model:=urdf/omni.urdf.xacro

## WORK!!





------------------------------------------------------------------------------------
## Deep Learning Nodes for ROS
------------------------------------------------------------------------------------
# https://github.com/dusty-nv/ros_deep_learning/tree/ros2

This repo contains deep learning inference nodes and camera/video streaming nodes for ROS/ROS2 with support for Jetson Nano/TX1/TX2/Xavier NX/AGX Xavier and TensorRT.

The camera/video streaming nodes support the following input/output interfaces:

MIPI CSI cameras
V4L2 cameras
RTP / RTSP
Videos & Images
Image sequences
OpenGL windows

## INSTALL:

source ~/ros2_humble/install/setup.bash

cd ~/ros2_ws/src
git clone -b ros2 https://github.com/dusty-nv/ros_deep_learning


git clone https://github.com/dusty-nv/ros_deep_learning
# ERROR: 
ModuleNotFoundError: No module named 'catkin.environment_cache'

colcon build

## ROS1

git clone -b ros1 https://github.com/dusty-nv/ros_deep_learning

catkin_make


## NOT WORK @@@@







------------------------------------------------------------------------------------
## A bidirectional, ROS2 to GStreamer bridge ros-gst-bridge
------------------------------------------------------------------------------------
# https://github.com/BrettRD/ros-gst-bridge/tree/ros2

source ~/ros2_humble/install/setup.bash

$ cd ~/ros2_ws/src

## How do I clone a specific Git branch?
## git clone -b my-branch git@github.com:user/myproject.git

$ git clone -b ros2 https://github.com/BrettRD/ros-gst-bridge.git


colcon build


source ~/ros2_ws/src/install/setup.bash

## NOT WORK @@@@





------------------------------------------------------------------------------------





# roslaunch tiago_bringup tiago_bringup.launch 

ros2 launch  tiago_bringup tiago_bringup.launch.py arm:=no-arm

ros2 launch  omni_base_bringup omni_base_bringup.launch.py


------------------------------------------------------------------------------------
## INSTALL pal-robotics/tiago_simulation FOR ROS2
------------------------------------------------------------------------------------
# https://github.com/pal-robotics/tiago_simulation/tree/humble-devel

# ERROR 
TypeError: dataclass() got an unexpected keyword argument 'kw_only'

# https://stackoverflow.com/questions/73732521/how-to-use-dataclass-kw-only-correctly
It was implemented in 3.10, scroll down here ‚Äì 

"New in version 3.10" ‚Äì  CommentedSep 15, 2022 at 15:58

## NOT WORK @@@@






------------------------------------------------------------------------------------
## INSTALL ROS2 on Jetson Orin NX, Ubuntu 20.04 focal
------------------------------------------------------------------------------------

# Official installation guide
https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html



## 1. Building from source

...

cd ~/ros2_humble/
colcon build --symlink-install

# ERROR after ~40 mins ...
....
Ros2 Colcon build failed ,rclpy -error: 'PyErr_warnformat' was not decleared in the scope
...
Failed   <<< rclpy [1min 24s, exited with code 2]


FIX:

export Python_EXECUTABLE=/usr/bin/python3
export Python3_EXECUTABLE=/usr/bin/python3
export PYTHON_EXECUTABLE=/usr/bin/python3
export PYTHON3_EXECUTABLE=/usr/bin/python3

echo $Python_EXECUTABLE
echo $Python3_EXECUTABLE
echo $PYTHON_EXECUTABLE
echo $PYTHON3_EXECUTABLE


# rclpy fails to build with error about Python3 version #1082
# https://github.com/ros2/rclpy/issues/1082

# Ros2 Colcon build failed ,rclpy -error: 'PyErr_warnformat' was not decleared in the scope
# https://stackoverflow.com/questions/73677537/ros2-colcon-build-failed-rclpy-error-pyerr-warnformat-was-not-decleared-in

This fixed it for me:
$ sudo apt-get install python-is-python3

# delete all dir except SRC in ~/ros2_humble

colcon build --symlink-install

### WORK! !!11

---
Finished <<< rviz2 [21.1s]

Summary: 346 packages finished [1h 28min 46s]


## 2. RUN 
#. ~/ros2_humble/install/local_setup.bash
source ~/ros2_humble/install/local_setup.bash
ROS_DISTRO was set to 'noetic' before. Please make sure that the environment does not mix paths from different distributions.

jetson@ubuntu:~/ros2_humble$ nano ~/.bashrc 
rem ## ROS_DISTRO = ...noetic...

jetson@ubuntu:~/ros2_humble$ . ~/ros2_humble/install/local_setup.bash
$

WORK

## 3. Try some examples
In one terminal, source the setup file and then run a C++ talker:

. ~/ros2_humble/install/local_setup.bash
ros2 run demo_nodes_cpp talker
In another terminal source the setup file and then run a Python listener:

#. ~/ros2_humble/install/local_setup.bash
source ~/ros2_humble/install/local_setup.bash
ros2 run demo_nodes_py listener

WORK








______________________________________________________________________
## FOR Ubuntu 22


sudo apt install ros-humble-desktop
Reading package lists... Done
Building dependency tree       
Reading state information... Done
E: Unable to locate package ros-humble-desktop


HOW OT FIX:

https://askubuntu.com/questions/1244865/ros-download-unable-to-locate-package-error
https://help.ubuntu.com/community/Repositories/Ubuntu
## NOT WORK


------------------------------------------------------------------------------------------
## Basalt Visual-Inertial Odometry and Mapping
------------------------------------------------------------------------------------------

# https://gitlab.com/VladyslavUsenko/basalt/

## INSTALL:

Installation

APT installation for Ubuntu 22.04, 20.04 and 18.04 (Fast)
Set up keys, add the repository to the sources list, update the Ubuntu package index and install Basalt:


sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0AD9A3000D97B6C9
sudo sh -c 'echo "deb [arch=amd64] http://packages.usenko.net/ubuntu $(lsb_release -sc) $(lsb_release -sc)/main" > /etc/apt/sources.list.d/basalt.list'sudo apt-get update
sudo apt-get dist-upgrade
sudo apt-get install basalt

## ERROR...

git clone --recursive https://gitlab.com/VladyslavUsenko/basalt.git
cd basalt
./scripts/install_deps.sh
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
make -j8


## Tutorial on Camera-IMU and Motion Capture Calibration with Realsense T265
https://gitlab.com/VladyslavUsenko/basalt/-/blob/master/doc/Realsense.md

-----------------------------------------------------------------------------------------
## OrbbecSDK ROS2 Wrapper
-----------------------------------------------------------------------------------------

https://www.orbbec.com/docs/g330-ros-2-wrapper-user-manual/
https://github.com/orbbec/OrbbecSDK_ROS2

Product Series	Product	Branch main	Branch v2-main
Astra	Astra 2	full maintenance	recommended for new designs
Astra+		limited maintenance	not supported
Astra Pro Plus	limited maintenance	not supported <<<<<-------


# OrbbecSDK ROS2 Wrapper

RUN mkdir -p ~/ros2_ws/src
RUN cd ~/ros2_ws/src
RUN git clone https://github.com/orbbec/OrbbecSDK_ROS2.git


RUN cd  ~/ros2_ws/src/OrbbecSDK_ROS2/orbbec_camera/scripts
RUN bash install_udev_rules.sh
RUN udevadm control --reload-rules && sudo udevadm trigger

RUN cd ~/ros2_ws/

sudo apt install libgflags-dev nlohmann-json3-dev libgoogle-glog-dev \
ros-$ROS_DISTRO-image-transport ros-$ROS_DISTRO-image-publisher ros-$ROS_DISTRO-camera-info-manager \
ros-$ROS_DISTRO-diagnostic-updater ros-$ROS_DISTRO-diagnostic-msgs

add >>>>>>
	ros-foxy-tf2-sensor-msgs \
	ros-foxy-geometry2 \
	ros-foxy-tf2-geometry-msgs  \
to apt install in Dockerfile 

#docker build -t ros_foxy_librealsense2 --build-arg LIBRS_VERSION=2.50.0 .
docker build -t ros_foxy_librealsense2_astra --build-arg LIBRS_VERSION=2.50.0 .

## BUILD OK

## RUN AND MAKE orbbec_sdk_ros2
docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy ros_foxy_librealsense2_astra bash

# Intel RealSense devices (Movidius, T265)
SUBSYSTEMS=="usb", ENV{DEVTYPE}=="usb_device", ATTRS{idVendor}=="8087", ATTRS{idProduct}=="0af3", MODE="0666", GROUP="plugdev"
SUBSYSTEMS=="usb", ENV{DEVTYPE}=="usb_device", ATTRS{idVendor}=="8087", ATTRS{idProduct}=="0b37", MODE="0666", GROUP="plugdev"
SUBSYSTEMS=="usb", ENV{DEVTYPE}=="usb_device", ATTRS{idVendor}=="03e7", ATTRS{idProduct}=="2150", MODE="0666", GROUP="plugdev"

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy ros_foxy_librealsense2_astra bash




# build release, Default is Debug
colcon build --event-handlers  console_direct+  --cmake-args  -DCMAKE_BUILD_TYPE=Release

## RUN inside cont:
sudo apt install libgflags-dev nlohmann-json3-dev libgoogle-glog-dev


## BUILD OK


Install udev rules.

cd  /foxy/catkin_ws/src/orbbec_sdk_ros2/orbbec_camera/scripts
#sudo bash install_udev_rules.sh
sudo bash install.sh
#sudo udevadm control --reload-rules && sudo udevadm trigger

udevadm control --reload-rules && udevadm trigger <<<<<<<<< ---- NOT WORK

## FIX:

## Orbbec Astra - udev files issues
https://3dclub.orbbec3d.com/t/orbbec-astra-udev-files-issues/754

lsusb
...
Bus 001 Device 010: ID 2bc5:0403 Orbbec 3D Technology International, Inc Astra Pro
Bus 001 Device 009: ID 2bc5:0501 Orbbec 3D Technology International, Inc Astra Pro HD Camera


the udev rule worked:

root@51c20a24a821:/# ls -lah /dev/bus/usb/001/010
crw-rw-r-- 1 root root 189, 9 Feb 20 12:51 /dev/bus/usb/001/010

root@51c20a24a821:/# ls -lah /dev/bus/usb/001/009
crw-rw-r-- 1 root root 189, 8 Feb 20 12:51 /dev/bus/usb/001/009

If the result begins with crw-rw-rw-, the udev rule worked.







# RUN:

cd /foxy/catkin_ws
. ./install/setup.bash

ros2 launch orbbec_camera astra_pro_plus.launch.xml

ros2 launch orbbec_camera astra_pro.launch.xml

rosl2 aunch astra_camera astra_pro.launch
rosl2 aunch astra_camera astra_pro_640x480.launch

## RUN:

ros2 launch orbbec_camera astra_pro2.launch.py
## ERROR:

root@697b0f5912fd:/foxy/catkin_ws# ros2 launch orbbec_camera astra_pro2.launch.py

[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-20-17-59-21-971869-697b0f5912fd-7201
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [orbbec_camera_node-1]: process started with pid [7203]
[orbbec_camera_node-1] [02/20 17:59:22.235210][info][7203][Context.cpp:68] Context created with config: /foxy/catkin_ws/install/orbbec_camera/share/orbbec_camera/config/OrbbecSDKConfig_v1.0.xml
[orbbec_camera_node-1] [02/20 17:59:22.235248][info][7203][Context.cpp:73] Work directory=/foxy/catkin_ws, SDK version=v1.10.8-20240604-d1671a3
[orbbec_camera_node-1] [02/20 17:59:22.235309][info][7203][LinuxPal.cpp:32] createObPal: create LinuxPal!
[orbbec_camera_node-1] [02/20 17:59:22.311512][warning][7203][OpenNIDeviceInfo.cpp:186] New openni device matched.
[orbbec_camera_node-1] [02/20 17:59:22.311731][info][7203][LinuxPal.cpp:143] Create PollingDeviceWatcher!
[orbbec_camera_node-1] [02/20 17:59:22.311785][info][7203][DeviceManager.cpp:15] Current found device(s): (1)
[orbbec_camera_node-1] [02/20 17:59:22.311797][info][7203][DeviceManager.cpp:24] 	- Name: Astra Pro, PID: 0x0403, SN/ID: , Connection: USB2.0
[orbbec_camera_node-1] [INFO] [1740074362.413859863] [camera.ob_camera_node]: Connecting to the default device
[orbbec_camera_node-1] [INFO] [1740074362.472029558] [camera.ob_camera_node]: use_hardware_time: false
[orbbec_camera_node-1] [ERROR] [1740074362.480478203] [camera.ob_camera_node]: Failed to get depth  profile: Invalid input, No matched video stream profile found!
[orbbec_camera_node-1] [ERROR] [1740074362.480623007] [camera.ob_camera_node]: Stream: OB_STREAM_DEPTH, Stream Index: 0, Width: 640, Height: 480, FPS: 10, Format: OB_FORMAT_Y11
[orbbec_camera_node-1] [ERROR] [1740074362.480651776] [camera.ob_camera_node]: Error: The device might be connected via USB 2.0. Please verify your configuration and try again. The current process will now exit.

[orbbec_camera_node-1] [INFO] [1740074362.480669696] [camera.ob_camera_node]: Available profiles:
[orbbec_camera_node-1] [INFO] [1740074362.480782308] [camera.ob_camera_node]: depth profile: 160x120 30fps Y11
[orbbec_camera_node-1] [INFO] [1740074362.480831013] [camera.ob_camera_node]: depth profile: 320x240 30fps Y11
[orbbec_camera_node-1] [INFO] [1740074362.480849670] [camera.ob_camera_node]: depth profile: 640x480 30fps Y11
[orbbec_camera_node-1] [INFO] [1740074362.480887719] [camera.ob_camera_node]: depth profile: 1280x1024 7fps Y11
[orbbec_camera_node-1] [INFO] [1740074362.480905672] [camera.ob_camera_node]: depth profile: 160x120 30fps Y12
[orbbec_camera_node-1] [INFO] [1740074362.480920424] [camera.ob_camera_node]: depth profile: 320x240 30fps Y12
[orbbec_camera_node-1] [INFO] [1740074362.480934761] [camera.ob_camera_node]: depth profile: 640x480 30fps Y12
[orbbec_camera_node-1] [INFO] [1740074362.480948233] [camera.ob_camera_node]: depth profile: 1280x1024 7fps Y12
[ERROR] [orbbec_camera_node-1]: process has died [pid 7203, exit code 255, cmd '/foxy/catkin_ws/install/orbbec_camera/lib/orbbec_ca

- Name: Astra Pro, PID: 0x0403, SN/ID: , Connection: USB2.0

SUBSYSTEM=="usb", ATTR{idProduct}=="0403", ATTR{idVendor}=="2bc5", MODE:="0666", OWNER:="root", GROUP:="video", SYMLINK+="astra_pro"

## RUN ON MAC M2:

(base) silenzioMBPM2:OrbbecViewer_v1.10.16_202410211553_macos_arm64_release silenzio$ ./OrbbecViewer
2025-02-21 01:55:19.038 INFO  [22482039] [loggerInit@18] **********************************************
2025-02-21 01:55:19.038 INFO  [22482039] [loggerInit@19]  OrbbecViewer launched! Welcome!! 
2025-02-21 01:55:19.038 INFO  [22482039] [loggerInit@20]  	- Version: V1.10.16
2025-02-21 01:55:19.038 INFO  [22482039] [loggerInit@21]  	- Author: 
2025-02-21 01:55:19.038 INFO  [22482039] [loggerInit@22]  	- E-Mail: 
2025-02-21 01:55:19.038 INFO  [22482039] [loggerInit@23]  	- Company: orbbec
2025-02-21 01:55:19.038 INFO  [22482039] [loggerInit@24]  	- Website: http://www.orbbec.com.cn/
2025-02-21 01:55:19.038 INFO  [22482039] [loggerInit@25] **********************************************
[02/21 01:55:19.268122][info][22482039][Context.cpp:68] Context created with config: /Users/silenzio/_LIBRARY/_ROBOSERVER/OrbbecSDK/OrbbecViewer_v1.10.16_202410211553_macos_arm64_release/OrbbecSDKConfig_v1.0.xml
[02/21 01:55:19.268160][info][22482039][Context.cpp:73] Work directory=/Users/silenzio/_LIBRARY/_ROBOSERVER/OrbbecSDK/OrbbecViewer_v1.10.16_202410211553_macos_arm64_release, SDK version=v1.10.16-20241021-c0329e356
[02/21 01:55:19.268170][info][22482039][MacPal.cpp:31] createObPal: create MacPal!
[02/21 01:55:19.271568][info][22482039][MacPal.cpp:125] Create PollingDeviceWatcher!
[02/21 01:55:19.271582][info][22482039][DeviceManager.cpp:15] Current found device(s): (0)
[02/21 01:55:19.271602][info][22482039][DeviceManager.cpp:304] Enable net device enumeration: true
[02/21 01:55:20.273183][info][22482039][DeviceManager.cpp:15] Current device(s) list: (0)
[02/21 01:55:41.354594][warning][22482121][OpenNIDeviceInfo.cpp:186] New openni device matched.
[02/21 01:55:41.354701][info][22482552][DeviceManager.cpp:181] Device changed! removed: 0, added: 1
[02/21 01:55:41.354724][info][22482552][DeviceManager.cpp:15] Current device(s) list: (1)
[02/21 01:55:41.354738][info][22482552][DeviceManager.cpp:24] 	- Name: Astra Pro, PID: 0x0403, SN/ID: , Connection: USB2.0
2025-02-21 01:55:41.354 DEBUG [22482552] [OBSensorServer::OBSensorServer@66] device added:Astra Pro-uid:64-1.2.2-8
[02/21 01:55:41.368111][info][22482039][OpenNIHostProtocol.cpp:567] Hardware versions: FW=5.8.22 (14), HW=0, Chip=0, Sensor=0, SYS=12
[02/21 01:55:41.368703][error][22482039][OpenNIHostProtocol.cpp:584] Get usb core type failed!
[02/21 01:55:41.372456][info][22482039][OpenNISensorFirmware.cpp:1190] Sensor serial number:18042020299
[02/21 01:55:41.373558][info][22482039][OpenNISensorFirmware.cpp:1218] Firmware version RD107E-007
[02/21 01:55:41.374081][info][22482039][OpenNISensorFirmware.cpp:1224] Device frequency 100
[02/21 01:55:41.390186][error][22482039][OpenNIHostProtocol.cpp:952] Support sub cmd error!
[02/21 01:55:41.390255][warning][22482039][OpenNISensorFirmware.cpp:153] OpenNI2 camera don't support Watchdog function!
[02/21 01:55:41.390567][info][22482039][AbstractDevice.cpp:124] 	- Firmware version: RD107E-007
[02/21 01:55:41.390979][info][22482039][OpenNIDevice.cpp:813] Init depth filter params.
[02/21 01:55:41.390996][info][22482039][OpenNIDevice.cpp:40] OpenNI device created! PID: 0x0403, SN: 18042020299
[02/21 01:55:41.391017][info][22482039][DeviceManager.cpp:150] Device created successfully! Name: Astra Pro, PID: 0x0403, SN/ID: 
2025-02-21 01:55:41.391 ERROR [22482039] [OBDeviceExt::OBDeviceExt@40] Device is disconnect!
[02/21 01:55:41.391617][info][22482039][OpenNIDevice.cpp:681] IR sensor has been created!
[02/21 01:55:41.392881][info][22482039][OpenNIDevice.cpp:605] Depth sensor has been created!
[02/21 01:55:41.393756][info][22482039][OpenNIDevice.cpp:384] Depth sensor has been created!
[02/21 01:55:41.396493][warning][22482039][ObException.cpp:5] Current device does not support frame sync!
[02/21 01:55:41.396652][warning][22482039][Pipeline.cpp:45] Execute failure! A libobsensor_exception has occurred!
	 - where:45#Pipeline
	 - msg:Current device does not support frame sync!
	 - type:N11libobsensor31unsupported_operation_exceptionE
[02/21 01:55:41.396671][info][22482039][Pipeline.cpp:47] Pipeline created with device: {name: Astra Pro, sn: 18042020299}, @0x13C922158
[02/21 01:55:41.396755][warning][22482039][ObException.cpp:5] Current device does not support frame sync!


## RUN:

root@697b0f5912fd:/foxy/catkin_ws# ros2 run orbbec_camera list_depth_work_mode_node

[02/20 18:02:21.027081][info][7248][Context.cpp:68] Context created with config: default config!
[02/20 18:02:21.027118][info][7248][Context.cpp:73] Work directory=/foxy/catkin_ws, SDK version=v1.10.8-20240604-d1671a3
[02/20 18:02:21.027156][info][7248][LinuxPal.cpp:32] createObPal: create LinuxPal!
[02/20 18:02:21.103657][warning][7248][OpenNIDeviceInfo.cpp:186] New openni device matched.
[02/20 18:02:21.103870][info][7248][LinuxPal.cpp:143] Create PollingDeviceWatcher!
[02/20 18:02:21.103945][info][7248][DeviceManager.cpp:15] Current found device(s): (1)
[02/20 18:02:21.103966][info][7248][DeviceManager.cpp:24] 	- Name: Astra Pro, PID: 0x0403, SN/ID: , Connection: USB2.0
[02/20 18:02:21.104008][info][7248][Pipeline.cpp:15] Try to create pipeline with default device.
[02/20 18:02:21.106310][info][7248][OpenNIHostProtocol.cpp:567] Hardware versions: FW=5.8.22 (14), HW=0, Chip=0, Sensor=0, SYS=12
[02/20 18:02:21.107497][error][7248][OpenNIHostProtocol.cpp:584] Get usb core type failed!
[02/20 18:02:21.114748][info][7248][OpenNISensorFirmware.cpp:1185] Sensor serial number:18042020299
[02/20 18:02:21.117486][info][7248][OpenNISensorFirmware.cpp:1213] Firmware version RD107E-007
[02/20 18:02:21.119037][info][7248][OpenNISensorFirmware.cpp:1219] Device frequency 100
[02/20 18:02:21.161514][error][7248][OpenNIHostProtocol.cpp:952] Support sub cmd error!
[02/20 18:02:21.161757][warning][7248][OpenNISensorFirmware.cpp:153] OpenNI2 camera don't support Watchdog function!
[02/20 18:02:21.162291][info][7248][AbstractDevice.cpp:117] 	- Firmware version: RD107E-007
[02/20 18:02:21.162427][info][7248][OpenNIDevice.cpp:37] OpenNI device created! PID: 0x0403, SN: 18042020299
[02/20 18:02:21.162464][info][7248][DeviceManager.cpp:150] Device created successfully! Name: Astra Pro, PID: 0x0403, SN/ID: 
[02/20 18:02:21.162559][warning][7248][ObException.cpp:5] Current device does not support frame sync!
[02/20 18:02:21.162816][warning][7248][Pipeline.cpp:45] Execute failure! A libobsensor_exception has occurred!
	 - where:45#Pipeline
	 - msg:Current device does not support frame sync!
	 - type:N11libobsensor31unsupported_operation_exceptionE
[02/20 18:02:21.162878][info][7248][Pipeline.cpp:47] Pipeline created with device: {name: Astra Pro, sn: 18042020299}, @0xAAAABC52CFF0
Current device not support depth work mode! 	<<<<<<<<<-----------
[02/20 18:02:21.163039][info][7248][Pipeline.cpp:75] Pipeline destroyed! @0xAAAABC52CFF0
[02/20 18:02:21.163070][info][7248][OpenNIDevice.cpp:41] OpenNI device destroyed! PID: 0x0403, SN: 18042020299
[02/20 18:02:21.164291][info][7248][Context.cpp:84] Context destroyed

## FIX:

√Æn file:
/home/silenzio/foxy/catkin_ws/install/orbbec_camera/share/orbbec_camera/launch/astra.launch.py

        DeclareLaunchArgument('color_width', default_value='640'),
        DeclareLaunchArgument('color_height', default_value='480'),
        DeclareLaunchArgument('color_fps', default_value='30'),
        DeclareLaunchArgument('color_format', default_value='UYVY'),
        DeclareLaunchArgument('enable_color', default_value='false'),
        DeclareLaunchArgument('flip_color', default_value='false'),
        DeclareLaunchArgument('color_qos', default_value='default'),
        DeclareLaunchArgument('color_camera_info_qos', default_value='default'),
        DeclareLaunchArgument('enable_color_auto_exposure', default_value='true'),
        DeclareLaunchArgument('depth_width', default_value='640'),
        DeclareLaunchArgument('depth_height', default_value='480'),
        DeclareLaunchArgument('depth_fps', default_value='30'),
        DeclareLaunchArgument('depth_format', default_value='Y12'),
        DeclareLaunchArgument('enable_depth', default_value='true'),
        DeclareLaunchArgument('flip_depth', default_value='false'),
        DeclareLaunchArgument('depth_qos', default_value='default'),
        DeclareLaunchArgument('depth_camera_info_qos', default_value='default'),
        DeclareLaunchArgument('ir_width', default_value='640'),
        DeclareLaunchArgument('ir_height', default_value='480'),
        DeclareLaunchArgument('ir_fps', default_value='30'),
        DeclareLaunchArgument('ir_format', default_value='Y10'),
        DeclareLaunchArgument('enable_ir', default_value='true'),





## RUN:

root@697b0f5912fd:/foxy/catkin_ws# ros2 launch orbbec_camera astra_pro2.launch.py
[INFO] [launch]: All log files can be found below /root/.ros/log/2025-02-20-18-23-05-588672-697b0f5912fd-7490
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [orbbec_camera_node-1]: process started with pid [7492]
[orbbec_camera_node-1] [02/20 18:23:05.763963][info][7492][Context.cpp:68] Context created with config: /foxy/catkin_ws/install/orbbec_camera/share/orbbec_camera/config/OrbbecSDKConfig_v1.0.xml
[orbbec_camera_node-1] [02/20 18:23:05.764002][info][7492][Context.cpp:73] Work directory=/foxy/catkin_ws, SDK version=v1.10.8-20240604-d1671a3
[orbbec_camera_node-1] [02/20 18:23:05.764028][info][7492][LinuxPal.cpp:32] createObPal: create LinuxPal!
[orbbec_camera_node-1] [02/20 18:23:05.847469][warning][7492][OpenNIDeviceInfo.cpp:186] New openni device matched.
[orbbec_camera_node-1] [02/20 18:23:05.847973][info][7492][LinuxPal.cpp:143] Create PollingDeviceWatcher!
[orbbec_camera_node-1] [02/20 18:23:05.848054][info][7492][DeviceManager.cpp:15] Current found device(s): (1)
[orbbec_camera_node-1] [02/20 18:23:05.848068][info][7492][DeviceManager.cpp:24] 	- Name: Astra Pro, PID: 0x0403, SN/ID: , Connection: USB2.0
[orbbec_camera_node-1] [INFO] [1740075785.949581480] [camera.ob_camera_node]: Connecting to the default device
[orbbec_camera_node-1] [INFO] [1740075786.007566604] [camera.ob_camera_node]: use_hardware_time: false
[orbbec_camera_node-1] [INFO] [1740075786.016054995] [camera.ob_camera_node]:  stream depth is enabled - width: 640, height: 480, fps: 30, Format: OB_FORMAT_Y12
[orbbec_camera_node-1] [INFO] [1740075786.016871820] [camera.ob_camera_node]:  stream ir is enabled - width: 640, height: 480, fps: 30, Format: OB_FORMAT_Y10
[orbbec_camera_node-1] [INFO] [1740075786.048943886] [camera.ob_camera_node]: Publish diagnostics every 1 seconds
[orbbec_camera_node-1] [INFO] [1740075786.050893162] [camera.ob_camera_node]: Enable depth stream
[orbbec_camera_node-1] [INFO] [1740075786.051002093] [camera.ob_camera_node]: Stream depth width: 640 height: 480 fps: 30 format: Y12
[orbbec_camera_node-1] [INFO] [1740075786.051048879] [camera.ob_camera_node]: Enable ir stream
[orbbec_camera_node-1] [INFO] [1740075786.051081840] [camera.ob_camera_node]: Stream ir width: 640 height: 480 fps: 30 format: Y10
[orbbec_camera_node-1] [INFO] [1740075786.078257082] [camera.ob_camera_node]: Disable frame sync
[orbbec_camera_node-1] [INFO] [1740075786.078445600] [camera.ob_camera_node]: Device Astra Pro connected
[orbbec_camera_node-1] [INFO] [1740075786.078492449] [camera.ob_camera_node]: Serial number: 18042020299
[orbbec_camera_node-1] [INFO] [1740075786.078521410] [camera.ob_camera_node]: Firmware version: RD107E-007
[orbbec_camera_node-1] [INFO] [1740075786.078549539] [camera.ob_camera_node]: Hardware version: 
[orbbec_camera_node-1] [INFO] [1740075786.078568195] [camera.ob_camera_node]: device unique id: 1-2.1.2-16
[orbbec_camera_node-1] [INFO] [1740075786.078597924] [camera.ob_camera_node]: Current node pid: 7492
[orbbec_camera_node-1] [INFO] [1740075786.170621063] [camera.ob_camera_node]: Publishing static transform from camera_link to ir
[orbbec_camera_node-1] [INFO] [1740075786.170742154] [camera.ob_camera_node]: Translation 0, 0, 0
[orbbec_camera_node-1] [INFO] [1740075786.170769739] [camera.ob_camera_node]: Rotation 0, 0, 0, 1
[orbbec_camera_node-1] [INFO] [1740075786.170810285] [camera.ob_camera_node]: Publishing static transform from camera_link to depth
[orbbec_camera_node-1] [INFO] [1740075786.170835021] [camera.ob_camera_node]: Translation 0, 0, 0
[orbbec_camera_node-1] [INFO] [1740075786.170853710] [camera.ob_camera_node]: Rotation 0, 0, 0, 1
[orbbec_camera_node-1] [WARN] [1740075786.171049780] [camera.ob_camera_node]: Publishing dynamic camera transforms (/tf) at 10 Hz



ros2 topic list

/camera/depth/camera_info

/camera/depth/image_raw
/camera/depth/image_raw/compressed
/camera/depth/image_raw/compressedDepth

/camera/depth/points
/camera/depth_filter_status
/camera/depth_to_ir

/camera/ir/camera_info

/camera/ir/image_raw
/camera/ir/image_raw/compressed
/camera/ir/image_raw/compressedDepth

/diagnostics
/parameter_events
/rosout
/tf
/tf_static


## ERROR: Not show points in pointsCloud2 in RVIZ2 ...




ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 1 base_link camera_link





/home/silenzio/foxy/catkin_ws/src/orbbec_sdk_ros2/orbbec_camera/scripts/














https://github.com/ros2/geometry2/tree/ros2

https://github.com/IntelRealSense/realsense-ros/tree/ros2-legacy

git clone -b foxy https://github.com/ros2/geometry2.git












https://github.com/ros2/geometry2.git
sudo apt install ros-foxy-geometry2

apt-get install ros-foxy-tf2-geometry-msgs

apt-get install ros-foxy-tf2-sensor-msgs


colcon build --packages-select orbbec_sdk_ros2 --symlink-instal

cd ~/ros2_ws/
# build release, Default is Debug
colcon build --event-handlers  console_direct+  --cmake-args  -DCMAKE_BUILD_TYPE=Release



















T1: docker with ROS2 foxy & realsence T256 cam

#realsense-viewer
#cd foxy/

docker run -it --rm -v /dev:/dev --device-cgroup-rule "c 81:* rmw" --device-cgroup-rule "c 189:* rmw" -v ~/foxy:/foxy ros_foxy_librealsense2 bash

./ros_entrypoint.sh
cd foxy/catkin_ws/
. install/local_setup.bash
ros2 launch realsense2_camera rs_launch.py








# https://answers.ros.org/question/310219/
#  The Astra driver does not publish a color image



https://github.com/ros-drivers/rgbd_launch/tree/ros2

git clone -b ros2 https://github.com/ros-drivers/rgbd_launch.git


https://github.com/ros-drivers/rgbd_launch.git
sudo apt install ros-humble-rgbd-launch

