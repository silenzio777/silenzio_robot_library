

```
#FROM arm64v8/ros:noetic-robot-focal AS r1_nv_rs_ssl_slam_ceres_cuda

FROM dustynv/ros:noetic-desktop-l4t-r35.4.1 AS r1_nv_rs_ssl_slam_ceres_cuda

#- Found CUDA version 11.4.315 installed in: /usr/local/cuda
#16 3.400 -- The CUDA compiler identification is NVIDIA 11.4.315
#16 3.421 -- Detecting CUDA compiler ABI info
#16 10.86 -- Detecting CUDA compiler ABI info - done
#16 11.01 -- Check for working CUDA compiler: /usr/local/cuda/bin/nvcc - skipped
#16 11.01 -- Detecting CUDA compile features
#16 11.01 -- Detecting CUDA compile features - done
#16 11.02 -- Setting CUDA Architecture to 50;60;70;80
# ...
# CMake Warning:
#16 15.65   Manually-specified variables were not used by the project:
#16 15.65 
#16 15.65     CERES_USE_CUDA
#16 15.65     CUDA_ARCH_BIN
#16 15.65     CUDA_ARCH_PTX
#16 15.65     CUDA_TOOLKIT_ROOT_DIR

# To avoid waiting for input during package installation
ENV DEBIAN_FRONTEND=noninteractive

#################################
## BASE
#################################

# Builder dependencies installation
RUN apt-get update \
    && apt-get install -qq -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libssl-dev \
    libusb-1.0-0-dev \
    pkg-config \
    libgtk-3-dev \
    libglfw3-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \    
    curl \
    python3 \
    python3-dev \
    ca-certificates \
    software-properties-common \
    wget \
    unzip 
    #&& rm -rf /var/lib/apt/lists/*

#   libopencv-dev -y
#   libopencv-dev \
#   -t=4.2.0 libopencv-dev
#   libopencv-dev=2.4.9.1+dfsg-1.5ubuntu1

#################################
## ceres-solver
#################################
## http://ceres-solver.org/installation.html

RUN add-apt-repository universe

# Install GTSAM & PCL
RUN add-apt-repository ppa:borglab/gtsam-release-4.0 -y
RUN apt-get update -y
RUN apt-get install -qq -y --no-install-recommends libgtsam-dev libgtsam-unstable-dev libpcl-dev

# g2o dependencies
RUN apt install -y libatlas-base-dev libsuitesparse-dev
# OpenCV dependencies
# RUN apt install -y libgtk-3-dev ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavresample-dev libtbb-dev
# eigen dependencies
RUN apt install -y gfortran libgflags2.2 libgflags-dev libgoogle-glog-dev

RUN cd /tmp && \
    wget -q https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.bz2 && \
    tar xf eigen-3.3.7.tar.bz2 && rm -rf eigen-3.3.7.tar.bz2 && \
    cd eigen-3.3.7 && \
    mkdir build && \
    cd build && \
    cmake ../ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local && \
    make -j7 && make install

WORKDIR /opt

RUN git clone https://ceres-solver.googlesource.com/ceres-solver --branch 2.2.0 --depth=1

WORKDIR /opt/ceres-solver/build

RUN cmake .. -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=ON \
    -DCERES_USE_CUDA=ON \
    -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \
    -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc \
    -DCUDA_ARCH_BIN="native" \    
    -DCMAKE_CUDA_ARCHITECTURES="native" \    
    -DCUDA_ARCH_PTX="" && \
    make -j7 && \
    make install
    

#################################
## ROS1 noetic
#################################

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -

RUN apt-get install -qq -y --no-install-recommends libgoogle-glog-dev libgflags-dev libeigen3-dev \ 
    libboost-all-dev libboost-dev libpython2.7-dev 

RUN apt-get update 
RUN apt-get install -qq -y --no-install-recommends \
    pcl-tools \
    ros-noetic-rviz \
    ros-noetic-rqt \
    #ros-noetic-rqt-common-plugins \
    #ros-noetic-rqt-robot-plugins \
    #ros-noetic-rviz-visual-tools \
    ros-noetic-hls-lfcd-lds-driver \
    ros-noetic-hector-trajectory-server \
    ros-noetic-octomap* \
    ros-noetic-eigen-conversions \
    && apt clean

#apt install ros-noetic-diagnostic-msgs
#apt install ros-noetic-common-msgs
#apt install ros-noetic-ddynamic-reconfigure \
#apt install ros-noetic-geometry   



#################################
## realsense
#################################

## From apt:
#RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE
#RUN add-apt-repository "deb https://librealsense.intel.com/Debian/apt-repo $(lsb_release -cs) main" -u
#RUN apt-get install librealsense2-utils librealsense2-dev -y 

## From source:

ARG LIBRS_VERSION
# Make sure that wen have a version number of librealsense as argument
RUN test -n "$LIBRS_VERSION"

# Download sources
WORKDIR /usr/src
RUN curl https://codeload.github.com/IntelRealSense/librealsense/tar.gz/refs/tags/v$LIBRS_VERSION -o librealsense.tar.gz 
RUN tar -zxf librealsense.tar.gz \
    && rm librealsense.tar.gz 
RUN ln -s /usr/src/librealsense-$LIBRS_VERSION /usr/src/librealsense

RUN apt-get install libudev-dev -y 

# Build and install
RUN cd /usr/src/librealsense \
    && mkdir build && cd build \
    && cmake ../ \
    -DCMAKE_C_FLAGS_RELEASE="${CMAKE_C_FLAGS_RELEASE} -s" \
    -DCMAKE_CXX_FLAGS_RELEASE="${CMAKE_CXX_FLAGS_RELEASE} -s" \
    -DCMAKE_INSTALL_PREFIX=/opt/librealsense \
    -DBUILD_GRAPHICAL_EXAMPLES=OFF \
    -DBUILD_PYTHON_BINDINGS:bool=false \
    -DFORCE_RSUSB_BACKEND=true \
    #-DFORCE_RSUSB_BACKEND=false \
    -DCMAKE_BUILD_TYPE=Release \
    #-DBUILD_WITH_CUDA=true \
    -DPYTHON_EXECUTABLE=/usr/bin/python3 \
    && make -j$(($(nproc)-1)) all \
    && make install 

# cmake ../ -DFORCE_RSUSB_BACKEND=ON -DBUILD_PYTHON_BINDINGS:bool=true -DPYTHON_EXECUTABLE=/usr/bin/python3 
# -DCMAKE_BUILD_TYPE=release -DBUILD_EXAMPLES=true -DBUILD_GRAPHICAL_EXAMPLES=true -DBUILD_WITH_CUDA:bool=true 

#COPY /opt/librealsense /usr/local/
#COPY /usr/lib/python3/dist-packages/pyrealsense2 /usr/lib/python3/dist-packages/pyrealsense2
#COPY /usr/src/librealsense/config/99-realsense-libusb.rules /etc/udev/rules.d/

RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py 
RUN python3 get-pip.py 

#RUN apt-get update && apt-get install -y ros-noetic-rqt ros-noetic-rqt-graph ros-noetic-rqt-common-plugins
RUN apt-get update && apt-get install -y iputils-ping

RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc

ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["/bin/bash"]

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/librealsense/lib
ENV PATH=$PATH:/opt/librealsense/bin

WORKDIR /catkin_ws


```


### Build docker container
```
docker build --network=host --build-arg NVIDIA_DRIVER_CAPABILITIES=compute,utility -t r1_nv_rs_ssl_slam_ceres_cuda --target r1_nv_rs_ssl_slam_ceres_cuda --build-arg LIBRS_VERSION=2.48.0 --progress=plain . 
```
